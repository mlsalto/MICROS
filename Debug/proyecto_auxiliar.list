
proyecto_auxiliar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060bc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006260  08006260  00016260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063e8  080063e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080063e8  080063e8  000163e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063f0  080063f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063f0  080063f0  000163f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063f4  080063f4  000163f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080063f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  200001e0  080065d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  080065d8  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d3e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bf8  00000000  00000000  00029f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002c460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f7  00000000  00000000  0002cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa47  00000000  00000000  00044687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092701  00000000  00000000  0004f0ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e17cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000325c  00000000  00000000  000e1820  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006244 	.word	0x08006244

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08006244 	.word	0x08006244

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b974 	b.w	8000e98 <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468e      	mov	lr, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d14d      	bne.n	8000c72 <__udivmoddi4+0xaa>
 8000bd6:	428a      	cmp	r2, r1
 8000bd8:	4694      	mov	ip, r2
 8000bda:	d969      	bls.n	8000cb0 <__udivmoddi4+0xe8>
 8000bdc:	fab2 f282 	clz	r2, r2
 8000be0:	b152      	cbz	r2, 8000bf8 <__udivmoddi4+0x30>
 8000be2:	fa01 f302 	lsl.w	r3, r1, r2
 8000be6:	f1c2 0120 	rsb	r1, r2, #32
 8000bea:	fa20 f101 	lsr.w	r1, r0, r1
 8000bee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000bf6:	4094      	lsls	r4, r2
 8000bf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000c02:	fa1f f78c 	uxth.w	r7, ip
 8000c06:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c0e:	fb06 f107 	mul.w	r1, r6, r7
 8000c12:	4299      	cmp	r1, r3
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x64>
 8000c16:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1e:	f080 811f 	bcs.w	8000e60 <__udivmoddi4+0x298>
 8000c22:	4299      	cmp	r1, r3
 8000c24:	f240 811c 	bls.w	8000e60 <__udivmoddi4+0x298>
 8000c28:	3e02      	subs	r6, #2
 8000c2a:	4463      	add	r3, ip
 8000c2c:	1a5b      	subs	r3, r3, r1
 8000c2e:	b2a4      	uxth	r4, r4
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c3c:	fb00 f707 	mul.w	r7, r0, r7
 8000c40:	42a7      	cmp	r7, r4
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x92>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	f080 810a 	bcs.w	8000e64 <__udivmoddi4+0x29c>
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	f240 8107 	bls.w	8000e64 <__udivmoddi4+0x29c>
 8000c56:	4464      	add	r4, ip
 8000c58:	3802      	subs	r0, #2
 8000c5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c5e:	1be4      	subs	r4, r4, r7
 8000c60:	2600      	movs	r6, #0
 8000c62:	b11d      	cbz	r5, 8000c6c <__udivmoddi4+0xa4>
 8000c64:	40d4      	lsrs	r4, r2
 8000c66:	2300      	movs	r3, #0
 8000c68:	e9c5 4300 	strd	r4, r3, [r5]
 8000c6c:	4631      	mov	r1, r6
 8000c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c72:	428b      	cmp	r3, r1
 8000c74:	d909      	bls.n	8000c8a <__udivmoddi4+0xc2>
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	f000 80ef 	beq.w	8000e5a <__udivmoddi4+0x292>
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c82:	4630      	mov	r0, r6
 8000c84:	4631      	mov	r1, r6
 8000c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8a:	fab3 f683 	clz	r6, r3
 8000c8e:	2e00      	cmp	r6, #0
 8000c90:	d14a      	bne.n	8000d28 <__udivmoddi4+0x160>
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d302      	bcc.n	8000c9c <__udivmoddi4+0xd4>
 8000c96:	4282      	cmp	r2, r0
 8000c98:	f200 80f9 	bhi.w	8000e8e <__udivmoddi4+0x2c6>
 8000c9c:	1a84      	subs	r4, r0, r2
 8000c9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d0e0      	beq.n	8000c6c <__udivmoddi4+0xa4>
 8000caa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cae:	e7dd      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000cb0:	b902      	cbnz	r2, 8000cb4 <__udivmoddi4+0xec>
 8000cb2:	deff      	udf	#255	; 0xff
 8000cb4:	fab2 f282 	clz	r2, r2
 8000cb8:	2a00      	cmp	r2, #0
 8000cba:	f040 8092 	bne.w	8000de2 <__udivmoddi4+0x21a>
 8000cbe:	eba1 010c 	sub.w	r1, r1, ip
 8000cc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cc6:	fa1f fe8c 	uxth.w	lr, ip
 8000cca:	2601      	movs	r6, #1
 8000ccc:	0c20      	lsrs	r0, r4, #16
 8000cce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cda:	fb0e f003 	mul.w	r0, lr, r3
 8000cde:	4288      	cmp	r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x12c>
 8000ce2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x12a>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f200 80cb 	bhi.w	8000e88 <__udivmoddi4+0x2c0>
 8000cf2:	4643      	mov	r3, r8
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000d00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d04:	fb0e fe00 	mul.w	lr, lr, r0
 8000d08:	45a6      	cmp	lr, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x156>
 8000d0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d14:	d202      	bcs.n	8000d1c <__udivmoddi4+0x154>
 8000d16:	45a6      	cmp	lr, r4
 8000d18:	f200 80bb 	bhi.w	8000e92 <__udivmoddi4+0x2ca>
 8000d1c:	4608      	mov	r0, r1
 8000d1e:	eba4 040e 	sub.w	r4, r4, lr
 8000d22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d26:	e79c      	b.n	8000c62 <__udivmoddi4+0x9a>
 8000d28:	f1c6 0720 	rsb	r7, r6, #32
 8000d2c:	40b3      	lsls	r3, r6
 8000d2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d36:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d3e:	431c      	orrs	r4, r3
 8000d40:	40f9      	lsrs	r1, r7
 8000d42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d46:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d4e:	0c20      	lsrs	r0, r4, #16
 8000d50:	fa1f fe8c 	uxth.w	lr, ip
 8000d54:	fb09 1118 	mls	r1, r9, r8, r1
 8000d58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d60:	4288      	cmp	r0, r1
 8000d62:	fa02 f206 	lsl.w	r2, r2, r6
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b8>
 8000d68:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d70:	f080 8088 	bcs.w	8000e84 <__udivmoddi4+0x2bc>
 8000d74:	4288      	cmp	r0, r1
 8000d76:	f240 8085 	bls.w	8000e84 <__udivmoddi4+0x2bc>
 8000d7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	1a09      	subs	r1, r1, r0
 8000d82:	b2a4      	uxth	r4, r4
 8000d84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d88:	fb09 1110 	mls	r1, r9, r0, r1
 8000d8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d94:	458e      	cmp	lr, r1
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1e2>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da0:	d26c      	bcs.n	8000e7c <__udivmoddi4+0x2b4>
 8000da2:	458e      	cmp	lr, r1
 8000da4:	d96a      	bls.n	8000e7c <__udivmoddi4+0x2b4>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4461      	add	r1, ip
 8000daa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dae:	fba0 9402 	umull	r9, r4, r0, r2
 8000db2:	eba1 010e 	sub.w	r1, r1, lr
 8000db6:	42a1      	cmp	r1, r4
 8000db8:	46c8      	mov	r8, r9
 8000dba:	46a6      	mov	lr, r4
 8000dbc:	d356      	bcc.n	8000e6c <__udivmoddi4+0x2a4>
 8000dbe:	d053      	beq.n	8000e68 <__udivmoddi4+0x2a0>
 8000dc0:	b15d      	cbz	r5, 8000dda <__udivmoddi4+0x212>
 8000dc2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dc6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dca:	fa01 f707 	lsl.w	r7, r1, r7
 8000dce:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd2:	40f1      	lsrs	r1, r6
 8000dd4:	431f      	orrs	r7, r3
 8000dd6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dda:	2600      	movs	r6, #0
 8000ddc:	4631      	mov	r1, r6
 8000dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	40d8      	lsrs	r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	fa21 f303 	lsr.w	r3, r1, r3
 8000df0:	4091      	lsls	r1, r2
 8000df2:	4301      	orrs	r1, r0
 8000df4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e00:	fb07 3610 	mls	r6, r7, r0, r3
 8000e04:	0c0b      	lsrs	r3, r1, #16
 8000e06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e0e:	429e      	cmp	r6, r3
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d908      	bls.n	8000e28 <__udivmoddi4+0x260>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e1e:	d22f      	bcs.n	8000e80 <__udivmoddi4+0x2b8>
 8000e20:	429e      	cmp	r6, r3
 8000e22:	d92d      	bls.n	8000e80 <__udivmoddi4+0x2b8>
 8000e24:	3802      	subs	r0, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1b9b      	subs	r3, r3, r6
 8000e2a:	b289      	uxth	r1, r1
 8000e2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e30:	fb07 3316 	mls	r3, r7, r6, r3
 8000e34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e38:	fb06 f30e 	mul.w	r3, r6, lr
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x28a>
 8000e40:	eb1c 0101 	adds.w	r1, ip, r1
 8000e44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e48:	d216      	bcs.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d914      	bls.n	8000e78 <__udivmoddi4+0x2b0>
 8000e4e:	3e02      	subs	r6, #2
 8000e50:	4461      	add	r1, ip
 8000e52:	1ac9      	subs	r1, r1, r3
 8000e54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e58:	e738      	b.n	8000ccc <__udivmoddi4+0x104>
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e705      	b.n	8000c6c <__udivmoddi4+0xa4>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e3      	b.n	8000c2c <__udivmoddi4+0x64>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6f8      	b.n	8000c5a <__udivmoddi4+0x92>
 8000e68:	454b      	cmp	r3, r9
 8000e6a:	d2a9      	bcs.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7a3      	b.n	8000dc0 <__udivmoddi4+0x1f8>
 8000e78:	4646      	mov	r6, r8
 8000e7a:	e7ea      	b.n	8000e52 <__udivmoddi4+0x28a>
 8000e7c:	4620      	mov	r0, r4
 8000e7e:	e794      	b.n	8000daa <__udivmoddi4+0x1e2>
 8000e80:	4640      	mov	r0, r8
 8000e82:	e7d1      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e84:	46d0      	mov	r8, sl
 8000e86:	e77b      	b.n	8000d80 <__udivmoddi4+0x1b8>
 8000e88:	3b02      	subs	r3, #2
 8000e8a:	4461      	add	r1, ip
 8000e8c:	e732      	b.n	8000cf4 <__udivmoddi4+0x12c>
 8000e8e:	4630      	mov	r0, r6
 8000e90:	e709      	b.n	8000ca6 <__udivmoddi4+0xde>
 8000e92:	4464      	add	r4, ip
 8000e94:	3802      	subs	r0, #2
 8000e96:	e742      	b.n	8000d1e <__udivmoddi4+0x156>

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop

08000e9c <ponerPieza>:
_Bool filaComp(int8_t row);
void gameOver(void);
void gameInit(void);

void ponerPieza(uint8_t pieza[4][4], int8_t row, int8_t col) // row and col means left top corner
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	70fb      	strb	r3, [r7, #3]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	70bb      	strb	r3, [r7, #2]
	for(int8_t i = row;i < row + 4;i++)
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e03b      	b.n	8000f2a <ponerPieza+0x8e>
	{
		for(int8_t j = col; j < col + 4; j++)
 8000eb2:	78bb      	ldrb	r3, [r7, #2]
 8000eb4:	73bb      	strb	r3, [r7, #14]
 8000eb6:	e02b      	b.n	8000f10 <ponerPieza+0x74>
		{
			if (j < 9 && i < 17 && j >= 0)
 8000eb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	dc21      	bgt.n	8000f04 <ponerPieza+0x68>
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	2b10      	cmp	r3, #16
 8000ec6:	dc1d      	bgt.n	8000f04 <ponerPieza+0x68>
 8000ec8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db19      	blt.n	8000f04 <ponerPieza+0x68>
			{
				 if(pieza[i - row][j - col] == true) matriz[i][j] = 1;
 8000ed0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	441a      	add	r2, r3
 8000ee0:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000ee4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	5cd3      	ldrb	r3, [r2, r3]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d109      	bne.n	8000f04 <ponerPieza+0x68>
 8000ef0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ef8:	4913      	ldr	r1, [pc, #76]	; (8000f48 <ponerPieza+0xac>)
 8000efa:	00d2      	lsls	r2, r2, #3
 8000efc:	440a      	add	r2, r1
 8000efe:	4413      	add	r3, r2
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
		for(int8_t j = col; j < col + 4; j++)
 8000f04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	73bb      	strb	r3, [r7, #14]
 8000f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000f14:	1cda      	adds	r2, r3, #3
 8000f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f1a:	429a      	cmp	r2, r3
 8000f1c:	dacc      	bge.n	8000eb8 <ponerPieza+0x1c>
	for(int8_t i = row;i < row + 4;i++)
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	3301      	adds	r3, #1
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	73fb      	strb	r3, [r7, #15]
 8000f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f2e:	1cda      	adds	r2, r3, #3
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	dabc      	bge.n	8000eb2 <ponerPieza+0x16>
			}
		}
	}
}
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	2000029c 	.word	0x2000029c

08000f4c <eliminarPieza>:

void eliminarPieza(uint8_t pieza[4][4], int8_t row, int8_t col)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	460b      	mov	r3, r1
 8000f56:	70fb      	strb	r3, [r7, #3]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	70bb      	strb	r3, [r7, #2]
	for(int8_t i = row;i < row + 4;i++)
 8000f5c:	78fb      	ldrb	r3, [r7, #3]
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e03b      	b.n	8000fda <eliminarPieza+0x8e>
		{
			for(int8_t j = col; j < col + 4; j++)
 8000f62:	78bb      	ldrb	r3, [r7, #2]
 8000f64:	73bb      	strb	r3, [r7, #14]
 8000f66:	e02b      	b.n	8000fc0 <eliminarPieza+0x74>
			{
				if (j < 9 && i < 17 && j >= 0)
 8000f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f6c:	2b08      	cmp	r3, #8
 8000f6e:	dc21      	bgt.n	8000fb4 <eliminarPieza+0x68>
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b10      	cmp	r3, #16
 8000f76:	dc1d      	bgt.n	8000fb4 <eliminarPieza+0x68>
 8000f78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db19      	blt.n	8000fb4 <eliminarPieza+0x68>
				{
					 if(pieza[i - row][j - col] == true) matriz[i][j] = 0;
 8000f80:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	687a      	ldr	r2, [r7, #4]
 8000f8e:	441a      	add	r2, r3
 8000f90:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8000f94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000f98:	1acb      	subs	r3, r1, r3
 8000f9a:	5cd3      	ldrb	r3, [r2, r3]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d109      	bne.n	8000fb4 <eliminarPieza+0x68>
 8000fa0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8000fa4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fa8:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <eliminarPieza+0xac>)
 8000faa:	00d2      	lsls	r2, r2, #3
 8000fac:	440a      	add	r2, r1
 8000fae:	4413      	add	r3, r2
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
			for(int8_t j = col; j < col + 4; j++)
 8000fb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	3301      	adds	r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	73bb      	strb	r3, [r7, #14]
 8000fc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000fc4:	1cda      	adds	r2, r3, #3
 8000fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	dacc      	bge.n	8000f68 <eliminarPieza+0x1c>
	for(int8_t i = row;i < row + 4;i++)
 8000fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fde:	1cda      	adds	r2, r3, #3
 8000fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	dabc      	bge.n	8000f62 <eliminarPieza+0x16>
				}
			}
		}
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3714      	adds	r7, #20
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	2000029c 	.word	0x2000029c

08000ffc <eliminarFila>:

void eliminarFila(int8_t row)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	for(int8_t columna = 0; columna < 8 ;columna++)
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
 800100a:	e00f      	b.n	800102c <eliminarFila+0x30>
		{
		  matriz[row][columna] = 0;
 800100c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001010:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001014:	490b      	ldr	r1, [pc, #44]	; (8001044 <eliminarFila+0x48>)
 8001016:	00d2      	lsls	r2, r2, #3
 8001018:	440a      	add	r2, r1
 800101a:	4413      	add	r3, r2
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
	for(int8_t columna = 0; columna < 8 ;columna++)
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	3301      	adds	r3, #1
 8001028:	b2db      	uxtb	r3, r3
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001030:	2b07      	cmp	r3, #7
 8001032:	ddeb      	ble.n	800100c <eliminarFila+0x10>
		}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000029c 	.word	0x2000029c

08001048 <piezaNueva>:

void piezaNueva()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af00      	add	r7, sp, #0
	pieceRow = -2;
 800104e:	4b93      	ldr	r3, [pc, #588]	; (800129c <piezaNueva+0x254>)
 8001050:	22fe      	movs	r2, #254	; 0xfe
 8001052:	701a      	strb	r2, [r3, #0]
	pieceColumn = 2;
 8001054:	4b92      	ldr	r3, [pc, #584]	; (80012a0 <piezaNueva+0x258>)
 8001056:	2202      	movs	r2, #2
 8001058:	701a      	strb	r2, [r3, #0]
	int numero_aleatorio = rand() % 7;
 800105a:	f003 f99f 	bl	800439c <rand>
 800105e:	4602      	mov	r2, r0
 8001060:	4b90      	ldr	r3, [pc, #576]	; (80012a4 <piezaNueva+0x25c>)
 8001062:	fb83 1302 	smull	r1, r3, r3, r2
 8001066:	4413      	add	r3, r2
 8001068:	1099      	asrs	r1, r3, #2
 800106a:	17d3      	asrs	r3, r2, #31
 800106c:	1ac9      	subs	r1, r1, r3
 800106e:	460b      	mov	r3, r1
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	1a5b      	subs	r3, r3, r1
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	607b      	str	r3, [r7, #4]

	switch(numero_aleatorio){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b06      	cmp	r3, #6
 800107c:	f200 8100 	bhi.w	8001280 <piezaNueva+0x238>
 8001080:	a201      	add	r2, pc, #4	; (adr r2, 8001088 <piezaNueva+0x40>)
 8001082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001086:	bf00      	nop
 8001088:	080010a5 	.word	0x080010a5
 800108c:	080010e9 	.word	0x080010e9
 8001090:	0800112d 	.word	0x0800112d
 8001094:	08001171 	.word	0x08001171
 8001098:	080011b5 	.word	0x080011b5
 800109c:	080011f9 	.word	0x080011f9
 80010a0:	0800123d 	.word	0x0800123d

	case 0:
			for (int i = 0; i < 4; i++) {
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010a8:	e01a      	b.n	80010e0 <piezaNueva+0x98>
				for (int j = 0; j < 4; j++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80010ae:	e011      	b.n	80010d4 <piezaNueva+0x8c>
					piezaActual[i][j] = pieza_O[i][j];
 80010b0:	4a7d      	ldr	r2, [pc, #500]	; (80012a8 <piezaNueva+0x260>)
 80010b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	441a      	add	r2, r3
 80010b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ba:	4413      	add	r3, r2
 80010bc:	7819      	ldrb	r1, [r3, #0]
 80010be:	4a7b      	ldr	r2, [pc, #492]	; (80012ac <piezaNueva+0x264>)
 80010c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	441a      	add	r2, r3
 80010c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010c8:	4413      	add	r3, r2
 80010ca:	460a      	mov	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 80010ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d0:	3301      	adds	r3, #1
 80010d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80010d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	ddea      	ble.n	80010b0 <piezaNueva+0x68>
			for (int i = 0; i < 4; i++) {
 80010da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010dc:	3301      	adds	r3, #1
 80010de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80010e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010e2:	2b03      	cmp	r3, #3
 80010e4:	dde1      	ble.n	80010aa <piezaNueva+0x62>
				}
			}
			break;
 80010e6:	e0cb      	b.n	8001280 <piezaNueva+0x238>

	case 1:
			for (int i = 0; i < 4; i++) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
 80010ec:	e01a      	b.n	8001124 <piezaNueva+0xdc>
				for (int j = 0; j < 4; j++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
 80010f2:	e011      	b.n	8001118 <piezaNueva+0xd0>
					piezaActual[i][j] = pieza_T[i][j];
 80010f4:	4a6e      	ldr	r2, [pc, #440]	; (80012b0 <piezaNueva+0x268>)
 80010f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	441a      	add	r2, r3
 80010fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fe:	4413      	add	r3, r2
 8001100:	7819      	ldrb	r1, [r3, #0]
 8001102:	4a6a      	ldr	r2, [pc, #424]	; (80012ac <piezaNueva+0x264>)
 8001104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	441a      	add	r2, r3
 800110a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800110c:	4413      	add	r3, r2
 800110e:	460a      	mov	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8001112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001114:	3301      	adds	r3, #1
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
 8001118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111a:	2b03      	cmp	r3, #3
 800111c:	ddea      	ble.n	80010f4 <piezaNueva+0xac>
			for (int i = 0; i < 4; i++) {
 800111e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001120:	3301      	adds	r3, #1
 8001122:	637b      	str	r3, [r7, #52]	; 0x34
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	2b03      	cmp	r3, #3
 8001128:	dde1      	ble.n	80010ee <piezaNueva+0xa6>
				}
			}
			break;
 800112a:	e0a9      	b.n	8001280 <piezaNueva+0x238>

	case 2:
			for (int i = 0; i < 4; i++) {
 800112c:	2300      	movs	r3, #0
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001130:	e01a      	b.n	8001168 <piezaNueva+0x120>
				for (int j = 0; j < 4; j++) {
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
 8001136:	e011      	b.n	800115c <piezaNueva+0x114>
					piezaActual[i][j] = pieza_S[i][j];
 8001138:	4a5e      	ldr	r2, [pc, #376]	; (80012b4 <piezaNueva+0x26c>)
 800113a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	441a      	add	r2, r3
 8001140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001142:	4413      	add	r3, r2
 8001144:	7819      	ldrb	r1, [r3, #0]
 8001146:	4a59      	ldr	r2, [pc, #356]	; (80012ac <piezaNueva+0x264>)
 8001148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	441a      	add	r2, r3
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	4413      	add	r3, r2
 8001152:	460a      	mov	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8001156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001158:	3301      	adds	r3, #1
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	2b03      	cmp	r3, #3
 8001160:	ddea      	ble.n	8001138 <piezaNueva+0xf0>
			for (int i = 0; i < 4; i++) {
 8001162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001164:	3301      	adds	r3, #1
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800116a:	2b03      	cmp	r3, #3
 800116c:	dde1      	ble.n	8001132 <piezaNueva+0xea>
				}
			}
			break;
 800116e:	e087      	b.n	8001280 <piezaNueva+0x238>

	case 3:
			for (int i = 0; i < 4; i++) {
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
 8001174:	e01a      	b.n	80011ac <piezaNueva+0x164>
				for (int j = 0; j < 4; j++) {
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
 800117a:	e011      	b.n	80011a0 <piezaNueva+0x158>
					piezaActual[i][j] = pieza_Z[i][j];
 800117c:	4a4e      	ldr	r2, [pc, #312]	; (80012b8 <piezaNueva+0x270>)
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	441a      	add	r2, r3
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	4413      	add	r3, r2
 8001188:	7819      	ldrb	r1, [r3, #0]
 800118a:	4a48      	ldr	r2, [pc, #288]	; (80012ac <piezaNueva+0x264>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	441a      	add	r2, r3
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	4413      	add	r3, r2
 8001196:	460a      	mov	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	3301      	adds	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	ddea      	ble.n	800117c <piezaNueva+0x134>
			for (int i = 0; i < 4; i++) {
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	3301      	adds	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	dde1      	ble.n	8001176 <piezaNueva+0x12e>
				}
			}
			break;
 80011b2:	e065      	b.n	8001280 <piezaNueva+0x238>

	case 4:
			for (int i = 0; i < 4; i++) {
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
 80011b8:	e01a      	b.n	80011f0 <piezaNueva+0x1a8>
				for (int j = 0; j < 4; j++) {
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	e011      	b.n	80011e4 <piezaNueva+0x19c>
					piezaActual[i][j] = pieza_I[i][j];
 80011c0:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <piezaNueva+0x274>)
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	441a      	add	r2, r3
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	4413      	add	r3, r2
 80011cc:	7819      	ldrb	r1, [r3, #0]
 80011ce:	4a37      	ldr	r2, [pc, #220]	; (80012ac <piezaNueva+0x264>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	441a      	add	r2, r3
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4413      	add	r3, r2
 80011da:	460a      	mov	r2, r1
 80011dc:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	3301      	adds	r3, #1
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	ddea      	ble.n	80011c0 <piezaNueva+0x178>
			for (int i = 0; i < 4; i++) {
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	dde1      	ble.n	80011ba <piezaNueva+0x172>
				}
			}
			break;
 80011f6:	e043      	b.n	8001280 <piezaNueva+0x238>

	case 5:
			for (int i = 0; i < 4; i++) {
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
 80011fc:	e01a      	b.n	8001234 <piezaNueva+0x1ec>
				for (int j = 0; j < 4; j++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	e011      	b.n	8001228 <piezaNueva+0x1e0>
					piezaActual[i][j] = pieza_L[i][j];
 8001204:	4a2e      	ldr	r2, [pc, #184]	; (80012c0 <piezaNueva+0x278>)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	441a      	add	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4413      	add	r3, r2
 8001210:	7819      	ldrb	r1, [r3, #0]
 8001212:	4a26      	ldr	r2, [pc, #152]	; (80012ac <piezaNueva+0x264>)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	441a      	add	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4413      	add	r3, r2
 800121e:	460a      	mov	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	3301      	adds	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	2b03      	cmp	r3, #3
 800122c:	ddea      	ble.n	8001204 <piezaNueva+0x1bc>
			for (int i = 0; i < 4; i++) {
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2b03      	cmp	r3, #3
 8001238:	dde1      	ble.n	80011fe <piezaNueva+0x1b6>
				}
			}
			break;
 800123a:	e021      	b.n	8001280 <piezaNueva+0x238>

	case 6:
			for (int i = 0; i < 4; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e01a      	b.n	8001278 <piezaNueva+0x230>
				for (int j = 0; j < 4; j++) {
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
 8001246:	e011      	b.n	800126c <piezaNueva+0x224>
					piezaActual[i][j] = pieza_J[i][j];
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <piezaNueva+0x27c>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	441a      	add	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	4413      	add	r3, r2
 8001254:	7819      	ldrb	r1, [r3, #0]
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <piezaNueva+0x264>)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	441a      	add	r2, r3
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	4413      	add	r3, r2
 8001262:	460a      	mov	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
				for (int j = 0; j < 4; j++) {
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	3301      	adds	r3, #1
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b03      	cmp	r3, #3
 8001270:	ddea      	ble.n	8001248 <piezaNueva+0x200>
			for (int i = 0; i < 4; i++) {
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	3301      	adds	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b03      	cmp	r3, #3
 800127c:	dde1      	ble.n	8001242 <piezaNueva+0x1fa>
				}
			}
			break;
 800127e:	bf00      	nop

	}

	ponerPieza(piezaActual, pieceRow, pieceColumn);
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <piezaNueva+0x254>)
 8001282:	f993 3000 	ldrsb.w	r3, [r3]
 8001286:	4a06      	ldr	r2, [pc, #24]	; (80012a0 <piezaNueva+0x258>)
 8001288:	f992 2000 	ldrsb.w	r2, [r2]
 800128c:	4619      	mov	r1, r3
 800128e:	4807      	ldr	r0, [pc, #28]	; (80012ac <piezaNueva+0x264>)
 8001290:	f7ff fe04 	bl	8000e9c <ponerPieza>
}
 8001294:	bf00      	nop
 8001296:	3740      	adds	r7, #64	; 0x40
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	2000031c 	.word	0x2000031c
 80012a0:	2000031d 	.word	0x2000031d
 80012a4:	92492493 	.word	0x92492493
 80012a8:	20000000 	.word	0x20000000
 80012ac:	20000320 	.word	0x20000320
 80012b0:	20000010 	.word	0x20000010
 80012b4:	20000020 	.word	0x20000020
 80012b8:	20000030 	.word	0x20000030
 80012bc:	20000040 	.word	0x20000040
 80012c0:	20000050 	.word	0x20000050
 80012c4:	20000060 	.word	0x20000060

080012c8 <dibujarMatriz>:

// Está función sirve para traducir los valores de la matriz en hexadecimal para poder mandarlos a la mtriz de leds
void dibujarMatriz()
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
	for (uint8_t j = 0; j < 8; j++) {
 80012ce:	2300      	movs	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
 80012d2:	e047      	b.n	8001364 <dibujarMatriz+0x9c>
			  uint8_t numero1 = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73bb      	strb	r3, [r7, #14]
	          for (uint8_t i = 0; i < 8; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	737b      	strb	r3, [r7, #13]
 80012dc:	e036      	b.n	800134c <dibujarMatriz+0x84>
	              numero1 += matriz[i][j] * pow(2, i);
 80012de:	7b7a      	ldrb	r2, [r7, #13]
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	494f      	ldr	r1, [pc, #316]	; (8001420 <dibujarMatriz+0x158>)
 80012e4:	00d2      	lsls	r2, r2, #3
 80012e6:	440a      	add	r2, r1
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f919 	bl	8000524 <__aeabi_i2d>
 80012f2:	4604      	mov	r4, r0
 80012f4:	460d      	mov	r5, r1
 80012f6:	7b7b      	ldrb	r3, [r7, #13]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f903 	bl	8000504 <__aeabi_ui2d>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	ec43 2b11 	vmov	d1, r2, r3
 8001306:	ed9f 0b44 	vldr	d0, [pc, #272]	; 8001418 <dibujarMatriz+0x150>
 800130a:	f004 f87f 	bl	800540c <pow>
 800130e:	ec53 2b10 	vmov	r2, r3, d0
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7ff f96f 	bl	80005f8 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4614      	mov	r4, r2
 8001320:	461d      	mov	r5, r3
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8fd 	bl	8000524 <__aeabi_i2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7fe ffab 	bl	800028c <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fc0b 	bl	8000b58 <__aeabi_d2uiz>
 8001342:	4603      	mov	r3, r0
 8001344:	73bb      	strb	r3, [r7, #14]
	          for (uint8_t i = 0; i < 8; i++) {
 8001346:	7b7b      	ldrb	r3, [r7, #13]
 8001348:	3301      	adds	r3, #1
 800134a:	737b      	strb	r3, [r7, #13]
 800134c:	7b7b      	ldrb	r3, [r7, #13]
 800134e:	2b07      	cmp	r3, #7
 8001350:	d9c5      	bls.n	80012de <dibujarMatriz+0x16>
	          }
	          MAX7219_MatrixSetPixel(0, j, numero1) ;
 8001352:	7bba      	ldrb	r2, [r7, #14]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	4619      	mov	r1, r3
 8001358:	2000      	movs	r0, #0
 800135a:	f001 f89f 	bl	800249c <MAX7219_MatrixSetPixel>
	for (uint8_t j = 0; j < 8; j++) {
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	3301      	adds	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b07      	cmp	r3, #7
 8001368:	d9b4      	bls.n	80012d4 <dibujarMatriz+0xc>
	  }

	for (int j = 0; j < 8; j++) {
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	e049      	b.n	8001404 <dibujarMatriz+0x13c>
		      uint8_t numero2 = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	71fb      	strb	r3, [r7, #7]
	          for (uint8_t i = 0; i < 8; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	71bb      	strb	r3, [r7, #6]
 8001378:	e037      	b.n	80013ea <dibujarMatriz+0x122>
	              numero2 += matriz[i + 8][j] * pow(2, i );
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	3308      	adds	r3, #8
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <dibujarMatriz+0x158>)
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	441a      	add	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	4413      	add	r3, r2
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8ca 	bl	8000524 <__aeabi_i2d>
 8001390:	4604      	mov	r4, r0
 8001392:	460d      	mov	r5, r1
 8001394:	79bb      	ldrb	r3, [r7, #6]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8b4 	bl	8000504 <__aeabi_ui2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b11 	vmov	d1, r2, r3
 80013a4:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8001418 <dibujarMatriz+0x150>
 80013a8:	f004 f830 	bl	800540c <pow>
 80013ac:	ec53 2b10 	vmov	r2, r3, d0
 80013b0:	4620      	mov	r0, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	f7ff f920 	bl	80005f8 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4614      	mov	r4, r2
 80013be:	461d      	mov	r5, r3
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8ae 	bl	8000524 <__aeabi_i2d>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7fe ff5c 	bl	800028c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4610      	mov	r0, r2
 80013da:	4619      	mov	r1, r3
 80013dc:	f7ff fbbc 	bl	8000b58 <__aeabi_d2uiz>
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
	          for (uint8_t i = 0; i < 8; i++) {
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	3301      	adds	r3, #1
 80013e8:	71bb      	strb	r3, [r7, #6]
 80013ea:	79bb      	ldrb	r3, [r7, #6]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	d9c4      	bls.n	800137a <dibujarMatriz+0xb2>
	          }
	          MAX7219_MatrixSetPixel(1, j , numero2) ;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	4619      	mov	r1, r3
 80013f8:	2001      	movs	r0, #1
 80013fa:	f001 f84f 	bl	800249c <MAX7219_MatrixSetPixel>
	for (int j = 0; j < 8; j++) {
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	3301      	adds	r3, #1
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b07      	cmp	r3, #7
 8001408:	ddb2      	ble.n	8001370 <dibujarMatriz+0xa8>
	  }

	  MAX7219_MatrixUpdate();
 800140a:	f001 f861 	bl	80024d0 <MAX7219_MatrixUpdate>
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bdb0      	pop	{r4, r5, r7, pc}
 8001416:	bf00      	nop
 8001418:	00000000 	.word	0x00000000
 800141c:	40000000 	.word	0x40000000
 8001420:	2000029c 	.word	0x2000029c

08001424 <bajarMatriz>:

void bajarMatriz(int8_t row)
{
 8001424:	b490      	push	{r4, r7}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t fila = row; fila > 0; fila--) {
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	73fb      	strb	r3, [r7, #15]
 8001432:	e01b      	b.n	800146c <bajarMatriz+0x48>
	     for (uint8_t columna = 0; columna < 8; columna++) {
 8001434:	2300      	movs	r3, #0
 8001436:	73bb      	strb	r3, [r7, #14]
 8001438:	e012      	b.n	8001460 <bajarMatriz+0x3c>
	            matriz[fila][columna] = matriz[fila - 1][columna];
 800143a:	7bfb      	ldrb	r3, [r7, #15]
 800143c:	1e58      	subs	r0, r3, #1
 800143e:	7bb9      	ldrb	r1, [r7, #14]
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	7bbb      	ldrb	r3, [r7, #14]
 8001444:	4c14      	ldr	r4, [pc, #80]	; (8001498 <bajarMatriz+0x74>)
 8001446:	00c0      	lsls	r0, r0, #3
 8001448:	4420      	add	r0, r4
 800144a:	4401      	add	r1, r0
 800144c:	7808      	ldrb	r0, [r1, #0]
 800144e:	4912      	ldr	r1, [pc, #72]	; (8001498 <bajarMatriz+0x74>)
 8001450:	00d2      	lsls	r2, r2, #3
 8001452:	440a      	add	r2, r1
 8001454:	4413      	add	r3, r2
 8001456:	4602      	mov	r2, r0
 8001458:	701a      	strb	r2, [r3, #0]
	     for (uint8_t columna = 0; columna < 8; columna++) {
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	3301      	adds	r3, #1
 800145e:	73bb      	strb	r3, [r7, #14]
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	2b07      	cmp	r3, #7
 8001464:	d9e9      	bls.n	800143a <bajarMatriz+0x16>
	for (uint8_t fila = row; fila > 0; fila--) {
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3b01      	subs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1e0      	bne.n	8001434 <bajarMatriz+0x10>
	        }
	    }

    for (uint8_t columna = 0; columna < 8; columna++) {
 8001472:	2300      	movs	r3, #0
 8001474:	737b      	strb	r3, [r7, #13]
 8001476:	e006      	b.n	8001486 <bajarMatriz+0x62>
    	 matriz[0][columna] = 0;
 8001478:	7b7b      	ldrb	r3, [r7, #13]
 800147a:	4a07      	ldr	r2, [pc, #28]	; (8001498 <bajarMatriz+0x74>)
 800147c:	2100      	movs	r1, #0
 800147e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t columna = 0; columna < 8; columna++) {
 8001480:	7b7b      	ldrb	r3, [r7, #13]
 8001482:	3301      	adds	r3, #1
 8001484:	737b      	strb	r3, [r7, #13]
 8001486:	7b7b      	ldrb	r3, [r7, #13]
 8001488:	2b07      	cmp	r3, #7
 800148a:	d9f5      	bls.n	8001478 <bajarMatriz+0x54>
	   }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bc90      	pop	{r4, r7}
 8001496:	4770      	bx	lr
 8001498:	2000029c 	.word	0x2000029c

0800149c <dropPiece>:

// Función para hacer caer la pieza de Tetris.
void dropPiece(uint8_t piece[4][4]) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	if(posibilidadBajar(piece, pieceRow, pieceColumn) == false){
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <dropPiece+0x94>)
 80014a6:	f993 3000 	ldrsb.w	r3, [r3]
 80014aa:	4a22      	ldr	r2, [pc, #136]	; (8001534 <dropPiece+0x98>)
 80014ac:	f992 2000 	ldrsb.w	r2, [r2]
 80014b0:	4619      	mov	r1, r3
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f000 f8e0 	bl	8001678 <posibilidadBajar>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f083 0301 	eor.w	r3, r3, #1
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00d      	beq.n	80014e0 <dropPiece+0x44>
		filaCompleta(); // esta función comprueba si hay alguna fila completa y la elimina
 80014c4:	f000 f8b0 	bl	8001628 <filaCompleta>
		if( pieceRow <= -2) gameOver();
 80014c8:	4b19      	ldr	r3, [pc, #100]	; (8001530 <dropPiece+0x94>)
 80014ca:	f993 3000 	ldrsb.w	r3, [r3]
 80014ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d2:	da02      	bge.n	80014da <dropPiece+0x3e>
 80014d4:	f000 fa12 	bl	80018fc <gameOver>
	 pieceRow++;
	 ponerPieza(piece, pieceRow, pieceColumn);
	 dibujarMatriz();
	 HAL_Delay(1000);
	}
}
 80014d8:	e025      	b.n	8001526 <dropPiece+0x8a>
		else piezaNueva();
 80014da:	f7ff fdb5 	bl	8001048 <piezaNueva>
}
 80014de:	e022      	b.n	8001526 <dropPiece+0x8a>
	 eliminarPieza(piece, pieceRow, pieceColumn);
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <dropPiece+0x94>)
 80014e2:	f993 3000 	ldrsb.w	r3, [r3]
 80014e6:	4a13      	ldr	r2, [pc, #76]	; (8001534 <dropPiece+0x98>)
 80014e8:	f992 2000 	ldrsb.w	r2, [r2]
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fd2c 	bl	8000f4c <eliminarPieza>
	 pieceRow++;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <dropPiece+0x94>)
 80014f6:	f993 3000 	ldrsb.w	r3, [r3]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	3301      	adds	r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	b25a      	sxtb	r2, r3
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <dropPiece+0x94>)
 8001504:	701a      	strb	r2, [r3, #0]
	 ponerPieza(piece, pieceRow, pieceColumn);
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <dropPiece+0x94>)
 8001508:	f993 3000 	ldrsb.w	r3, [r3]
 800150c:	4a09      	ldr	r2, [pc, #36]	; (8001534 <dropPiece+0x98>)
 800150e:	f992 2000 	ldrsb.w	r2, [r2]
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fcc1 	bl	8000e9c <ponerPieza>
	 dibujarMatriz();
 800151a:	f7ff fed5 	bl	80012c8 <dibujarMatriz>
	 HAL_Delay(1000);
 800151e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001522:	f001 fa71 	bl	8002a08 <HAL_Delay>
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	2000031c 	.word	0x2000031c
 8001534:	2000031d 	.word	0x2000031d

08001538 <moverIzq>:

// Función para mover la pieza de Tetris a la IZQUIERDA
void moverIzq(uint8_t piece[4][4]) {
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	 if (posibilidadIzq(piece, pieceRow, pieceColumn) == true){
 8001540:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <moverIzq+0x70>)
 8001542:	f993 3000 	ldrsb.w	r3, [r3]
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <moverIzq+0x74>)
 8001548:	f992 2000 	ldrsb.w	r2, [r2]
 800154c:	4619      	mov	r1, r3
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f8f0 	bl	8001734 <posibilidadIzq>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d022      	beq.n	80015a0 <moverIzq+0x68>
	 eliminarPieza(piece, pieceRow, pieceColumn);
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <moverIzq+0x70>)
 800155c:	f993 3000 	ldrsb.w	r3, [r3]
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <moverIzq+0x74>)
 8001562:	f992 2000 	ldrsb.w	r2, [r2]
 8001566:	4619      	mov	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f7ff fcef 	bl	8000f4c <eliminarPieza>
	 pieceColumn--;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <moverIzq+0x74>)
 8001570:	f993 3000 	ldrsb.w	r3, [r3]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	3b01      	subs	r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	b25a      	sxtb	r2, r3
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <moverIzq+0x74>)
 800157e:	701a      	strb	r2, [r3, #0]
	 ponerPieza(piece, pieceRow, pieceColumn);
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <moverIzq+0x70>)
 8001582:	f993 3000 	ldrsb.w	r3, [r3]
 8001586:	4a09      	ldr	r2, [pc, #36]	; (80015ac <moverIzq+0x74>)
 8001588:	f992 2000 	ldrsb.w	r2, [r2]
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fc84 	bl	8000e9c <ponerPieza>
	 dibujarMatriz();
 8001594:	f7ff fe98 	bl	80012c8 <dibujarMatriz>
	 HAL_Delay(1000);
 8001598:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800159c:	f001 fa34 	bl	8002a08 <HAL_Delay>
	 }
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000031c 	.word	0x2000031c
 80015ac:	2000031d 	.word	0x2000031d

080015b0 <moverDcha>:

// Función para mover la pieza de Tetris a la DERECHA
void moverDcha( uint8_t piece[4][4]) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	 if (posibilidadDcha(piece, pieceRow, pieceColumn) == true){
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <moverDcha+0x70>)
 80015ba:	f993 3000 	ldrsb.w	r3, [r3]
 80015be:	4a19      	ldr	r2, [pc, #100]	; (8001624 <moverDcha+0x74>)
 80015c0:	f992 2000 	ldrsb.w	r2, [r2]
 80015c4:	4619      	mov	r1, r3
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f912 	bl	80017f0 <posibilidadDcha>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d022      	beq.n	8001618 <moverDcha+0x68>
	 eliminarPieza(piece, pieceRow, pieceColumn);
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <moverDcha+0x70>)
 80015d4:	f993 3000 	ldrsb.w	r3, [r3]
 80015d8:	4a12      	ldr	r2, [pc, #72]	; (8001624 <moverDcha+0x74>)
 80015da:	f992 2000 	ldrsb.w	r2, [r2]
 80015de:	4619      	mov	r1, r3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fcb3 	bl	8000f4c <eliminarPieza>
	 pieceColumn++;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <moverDcha+0x74>)
 80015e8:	f993 3000 	ldrsb.w	r3, [r3]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b25a      	sxtb	r2, r3
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <moverDcha+0x74>)
 80015f6:	701a      	strb	r2, [r3, #0]
	 ponerPieza(piece, pieceRow, pieceColumn);
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <moverDcha+0x70>)
 80015fa:	f993 3000 	ldrsb.w	r3, [r3]
 80015fe:	4a09      	ldr	r2, [pc, #36]	; (8001624 <moverDcha+0x74>)
 8001600:	f992 2000 	ldrsb.w	r2, [r2]
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fc48 	bl	8000e9c <ponerPieza>
	 dibujarMatriz();
 800160c:	f7ff fe5c 	bl	80012c8 <dibujarMatriz>
	 HAL_Delay(1000);
 8001610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001614:	f001 f9f8 	bl	8002a08 <HAL_Delay>
	 }
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000031c 	.word	0x2000031c
 8001624:	2000031d 	.word	0x2000031d

08001628 <filaCompleta>:

void filaCompleta()
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
	for (int8_t fila = 0; fila < 16; fila++) {
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
 8001632:	e017      	b.n	8001664 <filaCompleta+0x3c>
		if(filaComp(fila) == true){
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f937 	bl	80018ac <filaComp>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d009      	beq.n	8001658 <filaCompleta+0x30>
			eliminarFila(fila);
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fcd7 	bl	8000ffc <eliminarFila>
			bajarMatriz(fila);
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fee6 	bl	8001424 <bajarMatriz>
	for (int8_t fila = 0; fila < 16; fila++) {
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	71fb      	strb	r3, [r7, #7]
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b0f      	cmp	r3, #15
 800166a:	dde3      	ble.n	8001634 <filaCompleta+0xc>
		}
	}
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <posibilidadBajar>:

_Bool posibilidadBajar(uint8_t pieza[4][4], int8_t row, int8_t col) //return if can change position or rotate shape
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	460b      	mov	r3, r1
 8001682:	70fb      	strb	r3, [r7, #3]
 8001684:	4613      	mov	r3, r2
 8001686:	70bb      	strb	r3, [r7, #2]
	for (int8_t fila = 0; fila < 4; fila++) {
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]
 800168c:	e044      	b.n	8001718 <posibilidadBajar+0xa0>
	   for (int8_t columna = 0; columna < 4; columna++) {
 800168e:	2300      	movs	r3, #0
 8001690:	73bb      	strb	r3, [r7, #14]
 8001692:	e037      	b.n	8001704 <posibilidadBajar+0x8c>
	            if (pieza[fila][columna] == 1 && pieza[fila + 1][columna] == 0) {
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	441a      	add	r2, r3
 800169e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d127      	bne.n	80016f8 <posibilidadBajar+0x80>
 80016a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ac:	3301      	adds	r3, #1
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	441a      	add	r2, r3
 80016b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016b8:	5cd3      	ldrb	r3, [r2, r3]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d11c      	bne.n	80016f8 <posibilidadBajar+0x80>
	            	int8_t filaT = fila + row + 1;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	78fb      	ldrb	r3, [r7, #3]
 80016c2:	4413      	add	r3, r2
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	737b      	strb	r3, [r7, #13]
	            	int8_t columnaT = columna + col;
 80016cc:	7bba      	ldrb	r2, [r7, #14]
 80016ce:	78bb      	ldrb	r3, [r7, #2]
 80016d0:	4413      	add	r3, r2
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	733b      	strb	r3, [r7, #12]
	                if (row + 3 == 15 || matriz[filaT][columnaT] == 1) {
 80016d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d00a      	beq.n	80016f4 <posibilidadBajar+0x7c>
 80016de:	f997 200d 	ldrsb.w	r2, [r7, #13]
 80016e2:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80016e6:	4912      	ldr	r1, [pc, #72]	; (8001730 <posibilidadBajar+0xb8>)
 80016e8:	00d2      	lsls	r2, r2, #3
 80016ea:	440a      	add	r2, r1
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <posibilidadBajar+0x80>
	                    return false;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e014      	b.n	8001722 <posibilidadBajar+0xaa>
	   for (int8_t columna = 0; columna < 4; columna++) {
 80016f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	3301      	adds	r3, #1
 8001700:	b2db      	uxtb	r3, r3
 8001702:	73bb      	strb	r3, [r7, #14]
 8001704:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001708:	2b03      	cmp	r3, #3
 800170a:	ddc3      	ble.n	8001694 <posibilidadBajar+0x1c>
	for (int8_t fila = 0; fila < 4; fila++) {
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	3301      	adds	r3, #1
 8001714:	b2db      	uxtb	r3, r3
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171c:	2b03      	cmp	r3, #3
 800171e:	ddb6      	ble.n	800168e <posibilidadBajar+0x16>
	                }
	            }
	        }
	    }
	 return true;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	2000029c 	.word	0x2000029c

08001734 <posibilidadIzq>:


_Bool posibilidadIzq(uint8_t pieza[4][4], int8_t row, int8_t col) //return if can change position or rotate shape
{
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	460b      	mov	r3, r1
 800173e:	70fb      	strb	r3, [r7, #3]
 8001740:	4613      	mov	r3, r2
 8001742:	70bb      	strb	r3, [r7, #2]
	for (int8_t fila = 0; fila < 4; fila++) {
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e044      	b.n	80017d4 <posibilidadIzq+0xa0>
	   for (int8_t columna = 0; columna < 4; columna++) {
 800174a:	2300      	movs	r3, #0
 800174c:	73bb      	strb	r3, [r7, #14]
 800174e:	e037      	b.n	80017c0 <posibilidadIzq+0x8c>
	            if (pieza[fila][columna] == 1 && pieza[fila][columna - 1] == 0){
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	441a      	add	r2, r3
 800175a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800175e:	5cd3      	ldrb	r3, [r2, r3]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d127      	bne.n	80017b4 <posibilidadIzq+0x80>
 8001764:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	441a      	add	r2, r3
 800176e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001772:	3b01      	subs	r3, #1
 8001774:	5cd3      	ldrb	r3, [r2, r3]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11c      	bne.n	80017b4 <posibilidadIzq+0x80>
	            	int8_t filaT = fila + row;
 800177a:	7bfa      	ldrb	r2, [r7, #15]
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	4413      	add	r3, r2
 8001780:	b2db      	uxtb	r3, r3
 8001782:	737b      	strb	r3, [r7, #13]
	            	int8_t columnaT = columna + col - 1;
 8001784:	7bba      	ldrb	r2, [r7, #14]
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4413      	add	r3, r2
 800178a:	b2db      	uxtb	r3, r3
 800178c:	3b01      	subs	r3, #1
 800178e:	b2db      	uxtb	r3, r3
 8001790:	733b      	strb	r3, [r7, #12]
	                if (columnaT < 0 || matriz[filaT][columnaT] == 1) {
 8001792:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	db0a      	blt.n	80017b0 <posibilidadIzq+0x7c>
 800179a:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800179e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80017a2:	4912      	ldr	r1, [pc, #72]	; (80017ec <posibilidadIzq+0xb8>)
 80017a4:	00d2      	lsls	r2, r2, #3
 80017a6:	440a      	add	r2, r1
 80017a8:	4413      	add	r3, r2
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <posibilidadIzq+0x80>
	                    return false;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e014      	b.n	80017de <posibilidadIzq+0xaa>
	   for (int8_t columna = 0; columna < 4; columna++) {
 80017b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	73bb      	strb	r3, [r7, #14]
 80017c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	ddc3      	ble.n	8001750 <posibilidadIzq+0x1c>
	for (int8_t fila = 0; fila < 4; fila++) {
 80017c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	3301      	adds	r3, #1
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	73fb      	strb	r3, [r7, #15]
 80017d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	ddb6      	ble.n	800174a <posibilidadIzq+0x16>
	                }
	            }
	        }
	    }
	 return true;
 80017dc:	2301      	movs	r3, #1
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	2000029c 	.word	0x2000029c

080017f0 <posibilidadDcha>:

_Bool posibilidadDcha(uint8_t pieza[4][4], int8_t row, int8_t col) //return if can change position or rotate shape
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	70fb      	strb	r3, [r7, #3]
 80017fc:	4613      	mov	r3, r2
 80017fe:	70bb      	strb	r3, [r7, #2]
	for (int8_t fila = 0; fila < 4; fila++) {
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	e044      	b.n	8001890 <posibilidadDcha+0xa0>
	   for (int8_t columna = 0; columna < 4; columna++) {
 8001806:	2300      	movs	r3, #0
 8001808:	73bb      	strb	r3, [r7, #14]
 800180a:	e037      	b.n	800187c <posibilidadDcha+0x8c>
	            if (pieza[fila][columna] == 1 && pieza[fila][columna + 1] == 0){
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	441a      	add	r2, r3
 8001816:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800181a:	5cd3      	ldrb	r3, [r2, r3]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d127      	bne.n	8001870 <posibilidadDcha+0x80>
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	441a      	add	r2, r3
 800182a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800182e:	3301      	adds	r3, #1
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d11c      	bne.n	8001870 <posibilidadDcha+0x80>
	            	int8_t filaT = fila + row;
 8001836:	7bfa      	ldrb	r2, [r7, #15]
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	4413      	add	r3, r2
 800183c:	b2db      	uxtb	r3, r3
 800183e:	737b      	strb	r3, [r7, #13]
	            	int8_t columnaT = columna + col + 1;
 8001840:	7bba      	ldrb	r2, [r7, #14]
 8001842:	78bb      	ldrb	r3, [r7, #2]
 8001844:	4413      	add	r3, r2
 8001846:	b2db      	uxtb	r3, r3
 8001848:	3301      	adds	r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	733b      	strb	r3, [r7, #12]
	                if (columnaT >= 8 || matriz[filaT][columnaT] == 1) {
 800184e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001852:	2b07      	cmp	r3, #7
 8001854:	dc0a      	bgt.n	800186c <posibilidadDcha+0x7c>
 8001856:	f997 200d 	ldrsb.w	r2, [r7, #13]
 800185a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800185e:	4912      	ldr	r1, [pc, #72]	; (80018a8 <posibilidadDcha+0xb8>)
 8001860:	00d2      	lsls	r2, r2, #3
 8001862:	440a      	add	r2, r1
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d101      	bne.n	8001870 <posibilidadDcha+0x80>
	                    return false;
 800186c:	2300      	movs	r3, #0
 800186e:	e014      	b.n	800189a <posibilidadDcha+0xaa>
	   for (int8_t columna = 0; columna < 4; columna++) {
 8001870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	3301      	adds	r3, #1
 8001878:	b2db      	uxtb	r3, r3
 800187a:	73bb      	strb	r3, [r7, #14]
 800187c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001880:	2b03      	cmp	r3, #3
 8001882:	ddc3      	ble.n	800180c <posibilidadDcha+0x1c>
	for (int8_t fila = 0; fila < 4; fila++) {
 8001884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001888:	b2db      	uxtb	r3, r3
 800188a:	3301      	adds	r3, #1
 800188c:	b2db      	uxtb	r3, r3
 800188e:	73fb      	strb	r3, [r7, #15]
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001894:	2b03      	cmp	r3, #3
 8001896:	ddb6      	ble.n	8001806 <posibilidadDcha+0x16>
	                }
	            }
	        }
	    }
	 return true;
 8001898:	2301      	movs	r3, #1
}
 800189a:	4618      	mov	r0, r3
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	2000029c 	.word	0x2000029c

080018ac <filaComp>:

// comprobación de si la fila que le metes a la función está completa o no
_Bool filaComp(int8_t row)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	71fb      	strb	r3, [r7, #7]
   for ( int8_t columna = 0; columna < 8; columna++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e012      	b.n	80018e2 <filaComp+0x36>
			   if( matriz[row][columna] == 0) return false;
 80018bc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80018c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c4:	490c      	ldr	r1, [pc, #48]	; (80018f8 <filaComp+0x4c>)
 80018c6:	00d2      	lsls	r2, r2, #3
 80018c8:	440a      	add	r2, r1
 80018ca:	4413      	add	r3, r2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <filaComp+0x2a>
 80018d2:	2300      	movs	r3, #0
 80018d4:	e00a      	b.n	80018ec <filaComp+0x40>
   for ( int8_t columna = 0; columna < 8; columna++) {
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	73fb      	strb	r3, [r7, #15]
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	dde8      	ble.n	80018bc <filaComp+0x10>
   }
	return true;
 80018ea:	2301      	movs	r3, #1
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	2000029c 	.word	0x2000029c

080018fc <gameOver>:

void gameOver()
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 8; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	e025      	b.n	8001954 <gameOver+0x58>
		for (int8_t j = 0; j < 8; j++) {
 8001908:	2300      	movs	r3, #0
 800190a:	71bb      	strb	r3, [r7, #6]
 800190c:	e018      	b.n	8001940 <gameOver+0x44>
			matriz[i][j] = sad_face1[i][j];
 800190e:	f997 0007 	ldrsb.w	r0, [r7, #7]
 8001912:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8001916:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800191a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800191e:	4c2b      	ldr	r4, [pc, #172]	; (80019cc <gameOver+0xd0>)
 8001920:	00c0      	lsls	r0, r0, #3
 8001922:	4420      	add	r0, r4
 8001924:	4401      	add	r1, r0
 8001926:	7808      	ldrb	r0, [r1, #0]
 8001928:	4929      	ldr	r1, [pc, #164]	; (80019d0 <gameOver+0xd4>)
 800192a:	00d2      	lsls	r2, r2, #3
 800192c:	440a      	add	r2, r1
 800192e:	4413      	add	r3, r2
 8001930:	4602      	mov	r2, r0
 8001932:	701a      	strb	r2, [r3, #0]
		for (int8_t j = 0; j < 8; j++) {
 8001934:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001938:	b2db      	uxtb	r3, r3
 800193a:	3301      	adds	r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	71bb      	strb	r3, [r7, #6]
 8001940:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001944:	2b07      	cmp	r3, #7
 8001946:	dde2      	ble.n	800190e <gameOver+0x12>
	for (int8_t i = 0; i < 8; i++) {
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	3301      	adds	r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	71fb      	strb	r3, [r7, #7]
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	2b07      	cmp	r3, #7
 800195a:	ddd5      	ble.n	8001908 <gameOver+0xc>
		}
	}

	for (int8_t i = 8; i < 16; i++) {
 800195c:	2308      	movs	r3, #8
 800195e:	717b      	strb	r3, [r7, #5]
 8001960:	e027      	b.n	80019b2 <gameOver+0xb6>
		for (int8_t j = 0; j < 8; j++) {
 8001962:	2300      	movs	r3, #0
 8001964:	713b      	strb	r3, [r7, #4]
 8001966:	e01a      	b.n	800199e <gameOver+0xa2>
			matriz[i][j] = sad_face2[i-8][j];
 8001968:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800196c:	f1a3 0008 	sub.w	r0, r3, #8
 8001970:	f997 1004 	ldrsb.w	r1, [r7, #4]
 8001974:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8001978:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800197c:	4c15      	ldr	r4, [pc, #84]	; (80019d4 <gameOver+0xd8>)
 800197e:	00c0      	lsls	r0, r0, #3
 8001980:	4420      	add	r0, r4
 8001982:	4401      	add	r1, r0
 8001984:	7808      	ldrb	r0, [r1, #0]
 8001986:	4912      	ldr	r1, [pc, #72]	; (80019d0 <gameOver+0xd4>)
 8001988:	00d2      	lsls	r2, r2, #3
 800198a:	440a      	add	r2, r1
 800198c:	4413      	add	r3, r2
 800198e:	4602      	mov	r2, r0
 8001990:	701a      	strb	r2, [r3, #0]
		for (int8_t j = 0; j < 8; j++) {
 8001992:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3301      	adds	r3, #1
 800199a:	b2db      	uxtb	r3, r3
 800199c:	713b      	strb	r3, [r7, #4]
 800199e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80019a2:	2b07      	cmp	r3, #7
 80019a4:	dde0      	ble.n	8001968 <gameOver+0x6c>
	for (int8_t i = 8; i < 16; i++) {
 80019a6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	717b      	strb	r3, [r7, #5]
 80019b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019b6:	2b0f      	cmp	r3, #15
 80019b8:	ddd3      	ble.n	8001962 <gameOver+0x66>
		}
	}

	dibujarMatriz();
 80019ba:	f7ff fc85 	bl	80012c8 <dibujarMatriz>

	juego = 2;
 80019be:	4b06      	ldr	r3, [pc, #24]	; (80019d8 <gameOver+0xdc>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}
 80019cc:	20000070 	.word	0x20000070
 80019d0:	2000029c 	.word	0x2000029c
 80019d4:	200000b0 	.word	0x200000b0
 80019d8:	20000340 	.word	0x20000340

080019dc <gameInit>:

void gameInit()
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
	for (int8_t i = 0; i < 8; i++) {
 80019e2:	2300      	movs	r3, #0
 80019e4:	71fb      	strb	r3, [r7, #7]
 80019e6:	e025      	b.n	8001a34 <gameInit+0x58>
		for (int8_t j = 0; j < 8; j++) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	71bb      	strb	r3, [r7, #6]
 80019ec:	e018      	b.n	8001a20 <gameInit+0x44>
			matriz[i][j] = happy_face1[i][j];
 80019ee:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80019f2:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80019f6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80019fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019fe:	4c2a      	ldr	r4, [pc, #168]	; (8001aa8 <gameInit+0xcc>)
 8001a00:	00c0      	lsls	r0, r0, #3
 8001a02:	4420      	add	r0, r4
 8001a04:	4401      	add	r1, r0
 8001a06:	7808      	ldrb	r0, [r1, #0]
 8001a08:	4928      	ldr	r1, [pc, #160]	; (8001aac <gameInit+0xd0>)
 8001a0a:	00d2      	lsls	r2, r2, #3
 8001a0c:	440a      	add	r2, r1
 8001a0e:	4413      	add	r3, r2
 8001a10:	4602      	mov	r2, r0
 8001a12:	701a      	strb	r2, [r3, #0]
		for (int8_t j = 0; j < 8; j++) {
 8001a14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	71bb      	strb	r3, [r7, #6]
 8001a20:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a24:	2b07      	cmp	r3, #7
 8001a26:	dde2      	ble.n	80019ee <gameInit+0x12>
	for (int8_t i = 0; i < 8; i++) {
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	3301      	adds	r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	ddd5      	ble.n	80019e8 <gameInit+0xc>
		}
	}

	for (int8_t i = 8; i < 16; i++) {
 8001a3c:	2308      	movs	r3, #8
 8001a3e:	717b      	strb	r3, [r7, #5]
 8001a40:	e027      	b.n	8001a92 <gameInit+0xb6>
		for (int8_t j = 0; j < 8; j++) {
 8001a42:	2300      	movs	r3, #0
 8001a44:	713b      	strb	r3, [r7, #4]
 8001a46:	e01a      	b.n	8001a7e <gameInit+0xa2>
			matriz[i][j] = happy_face2[i-8][j];
 8001a48:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a4c:	f1a3 0008 	sub.w	r0, r3, #8
 8001a50:	f997 1004 	ldrsb.w	r1, [r7, #4]
 8001a54:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8001a58:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a5c:	4c14      	ldr	r4, [pc, #80]	; (8001ab0 <gameInit+0xd4>)
 8001a5e:	00c0      	lsls	r0, r0, #3
 8001a60:	4420      	add	r0, r4
 8001a62:	4401      	add	r1, r0
 8001a64:	7808      	ldrb	r0, [r1, #0]
 8001a66:	4911      	ldr	r1, [pc, #68]	; (8001aac <gameInit+0xd0>)
 8001a68:	00d2      	lsls	r2, r2, #3
 8001a6a:	440a      	add	r2, r1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	4602      	mov	r2, r0
 8001a70:	701a      	strb	r2, [r3, #0]
		for (int8_t j = 0; j < 8; j++) {
 8001a72:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	713b      	strb	r3, [r7, #4]
 8001a7e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001a82:	2b07      	cmp	r3, #7
 8001a84:	dde0      	ble.n	8001a48 <gameInit+0x6c>
	for (int8_t i = 8; i < 16; i++) {
 8001a86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	717b      	strb	r3, [r7, #5]
 8001a92:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a96:	2b0f      	cmp	r3, #15
 8001a98:	ddd3      	ble.n	8001a42 <gameInit+0x66>
		}
	}

	dibujarMatriz();
 8001a9a:	f7ff fc15 	bl	80012c8 <dibujarMatriz>

}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd90      	pop	{r4, r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200000f0 	.word	0x200000f0
 8001aac:	2000029c 	.word	0x2000029c
 8001ab0:	20000130 	.word	0x20000130

08001ab4 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	80fb      	strh	r3, [r7, #6]

  uint16_t pin_e = GPIO_Pin;
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	81fb      	strh	r3, [r7, #14]
  currentMillis = HAL_GetTick();
 8001ac2:	f000 ff95 	bl	80029f0 <HAL_GetTick>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	4a14      	ldr	r2, [pc, #80]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001aca:	6013      	str	r3, [r2, #0]

  if (pin_e == GPIO_PIN_1 && (currentMillis - previousMillis > 50) )
 8001acc:	89fb      	ldrh	r3, [r7, #14]
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d10e      	bne.n	8001af0 <HAL_GPIO_EXTI_Callback+0x3c>
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b32      	cmp	r3, #50	; 0x32
 8001ade:	d907      	bls.n	8001af0 <HAL_GPIO_EXTI_Callback+0x3c>
	 {
	  	mover = 1;// dcha
 8001ae0:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	601a      	str	r2, [r3, #0]
	  	previousMillis = currentMillis;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001aec:	6013      	str	r3, [r2, #0]
	  	return;
 8001aee:	e011      	b.n	8001b14 <HAL_GPIO_EXTI_Callback+0x60>
	 }
  if (pin_e == GPIO_PIN_2 && (currentMillis - previousMillis > 50) )
 8001af0:	89fb      	ldrh	r3, [r7, #14]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d10e      	bne.n	8001b14 <HAL_GPIO_EXTI_Callback+0x60>
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b32      	cmp	r3, #50	; 0x32
 8001b02:	d907      	bls.n	8001b14 <HAL_GPIO_EXTI_Callback+0x60>
	 {
		 mover = 2; // izq
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001b06:	2202      	movs	r2, #2
 8001b08:	601a      	str	r2, [r3, #0]
		 previousMillis = currentMillis;
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_GPIO_EXTI_Callback+0x68>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a04      	ldr	r2, [pc, #16]	; (8001b20 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001b10:	6013      	str	r3, [r2, #0]
		 return;
 8001b12:	bf00      	nop
	 }
}
 8001b14:	3710      	adds	r7, #16
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000033c 	.word	0x2000033c
 8001b20:	20000338 	.word	0x20000338
 8001b24:	20000330 	.word	0x20000330

08001b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2e:	f000 fef9 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b32:	f000 f89d 	bl	8001c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b36:	f000 f98d 	bl	8001e54 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001b3a:	f000 f903 	bl	8001d44 <MX_ADC1_Init>
  MX_SPI2_Init();
 8001b3e:	f000 f953 	bl	8001de8 <MX_SPI2_Init>

  /* USER CODE BEGIN 2 */
  MAX7219_MatrixInit(&hspi2, SPI2_CS_GPIO_Port, SPI2_CS_Pin); //inicialización de los pines de la matriz
 8001b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b46:	4940      	ldr	r1, [pc, #256]	; (8001c48 <main+0x120>)
 8001b48:	4840      	ldr	r0, [pc, #256]	; (8001c4c <main+0x124>)
 8001b4a:	f000 fc43 	bl	80023d4 <MAX7219_MatrixInit>
  MAX7219_MatrixUpdate();
 8001b4e:	f000 fcbf 	bl	80024d0 <MAX7219_MatrixUpdate>
  /* USER CODE END 2 */

  // COSAS DE INICIALIZACIÓN::
   dibujarMatriz();
 8001b52:	f7ff fbb9 	bl	80012c8 <dibujarMatriz>
   pieceRow = -2;
 8001b56:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <main+0x128>)
 8001b58:	22fe      	movs	r2, #254	; 0xfe
 8001b5a:	701a      	strb	r2, [r3, #0]
   pieceColumn = 2;
 8001b5c:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <main+0x12c>)
 8001b5e:	2202      	movs	r2, #2
 8001b60:	701a      	strb	r2, [r3, #0]
   boton_OK = 0;
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <main+0x130>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
   juego = 0;
 8001b68:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <main+0x134>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
   mover = 0;
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <main+0x138>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 4; i++) {
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	e01a      	b.n	8001bb0 <main+0x88>
		for (int j = 0; j < 4; j++) {
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	e011      	b.n	8001ba4 <main+0x7c>
			piezaActual[i][j] = pieza_O[i][j];
 8001b80:	4a38      	ldr	r2, [pc, #224]	; (8001c64 <main+0x13c>)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	441a      	add	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	7819      	ldrb	r1, [r3, #0]
 8001b8e:	4a36      	ldr	r2, [pc, #216]	; (8001c68 <main+0x140>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	441a      	add	r2, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	4413      	add	r3, r2
 8001b9a:	460a      	mov	r2, r1
 8001b9c:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; j++) {
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b03      	cmp	r3, #3
 8001ba8:	ddea      	ble.n	8001b80 <main+0x58>
	for (int i = 0; i < 4; i++) {
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	3301      	adds	r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	dde1      	ble.n	8001b7a <main+0x52>
		}
	}

	srand(HAL_GetTick()); // para el numero random
 8001bb6:	f000 ff1b 	bl	80029f0 <HAL_GetTick>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fbbf 	bl	8004340 <srand>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (juego == 0){
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <main+0x134>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d138      	bne.n	8001c3c <main+0x114>
		  gameInit();
 8001bca:	f7ff ff07 	bl	80019dc <gameInit>
		  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 1){
 8001bce:	2101      	movs	r1, #1
 8001bd0:	4826      	ldr	r0, [pc, #152]	; (8001c6c <main+0x144>)
 8001bd2:	f001 fc45 	bl	8003460 <HAL_GPIO_ReadPin>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d12f      	bne.n	8001c3c <main+0x114>
			  juego = 1;
 8001bdc:	4b1f      	ldr	r3, [pc, #124]	; (8001c5c <main+0x134>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
			  for (int8_t i = 0; i < 16; i++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	71fb      	strb	r3, [r7, #7]
 8001be6:	e00a      	b.n	8001bfe <main+0xd6>
			  		eliminarFila(i);
 8001be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fa05 	bl	8000ffc <eliminarFila>
			  for (int8_t i = 0; i < 16; i++) {
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	71fb      	strb	r3, [r7, #7]
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	2b0f      	cmp	r3, #15
 8001c04:	ddf0      	ble.n	8001be8 <main+0xc0>
			  }
		  }
	  }

	  while(juego==1){
 8001c06:	e019      	b.n	8001c3c <main+0x114>

		  mover = 0;
 8001c08:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <main+0x138>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

		  while(mover==0){
 8001c0e:	e011      	b.n	8001c34 <main+0x10c>
			  dropPiece(piezaActual);
 8001c10:	4815      	ldr	r0, [pc, #84]	; (8001c68 <main+0x140>)
 8001c12:	f7ff fc43 	bl	800149c <dropPiece>


			  if( mover== 1){
 8001c16:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <main+0x138>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d103      	bne.n	8001c26 <main+0xfe>
				  moverDcha(piezaActual);
 8001c1e:	4812      	ldr	r0, [pc, #72]	; (8001c68 <main+0x140>)
 8001c20:	f7ff fcc6 	bl	80015b0 <moverDcha>
 8001c24:	e006      	b.n	8001c34 <main+0x10c>

			  }
			  else if (mover == 2){
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <main+0x138>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d102      	bne.n	8001c34 <main+0x10c>
				  moverIzq(piezaActual);
 8001c2e:	480e      	ldr	r0, [pc, #56]	; (8001c68 <main+0x140>)
 8001c30:	f7ff fc82 	bl	8001538 <moverIzq>
		  while(mover==0){
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <main+0x138>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0e9      	beq.n	8001c10 <main+0xe8>
	  while(juego==1){
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <main+0x134>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d0e1      	beq.n	8001c08 <main+0xe0>
	  if (juego == 0){
 8001c44:	e7bd      	b.n	8001bc2 <main+0x9a>
 8001c46:	bf00      	nop
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	20000244 	.word	0x20000244
 8001c50:	2000031c 	.word	0x2000031c
 8001c54:	2000031d 	.word	0x2000031d
 8001c58:	20000334 	.word	0x20000334
 8001c5c:	20000340 	.word	0x20000340
 8001c60:	20000330 	.word	0x20000330
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000320 	.word	0x20000320
 8001c6c:	40020000 	.word	0x40020000

08001c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b094      	sub	sp, #80	; 0x50
 8001c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c76:	f107 0320 	add.w	r3, r7, #32
 8001c7a:	2230      	movs	r2, #48	; 0x30
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fb56 	bl	8004330 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c84:	f107 030c 	add.w	r3, r7, #12
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	4b28      	ldr	r3, [pc, #160]	; (8001d3c <SystemClock_Config+0xcc>)
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	4a27      	ldr	r2, [pc, #156]	; (8001d3c <SystemClock_Config+0xcc>)
 8001c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca4:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <SystemClock_Config+0xcc>)
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	4b22      	ldr	r3, [pc, #136]	; (8001d40 <SystemClock_Config+0xd0>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a21      	ldr	r2, [pc, #132]	; (8001d40 <SystemClock_Config+0xd0>)
 8001cba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <SystemClock_Config+0xd0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cc8:	607b      	str	r3, [r7, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cd4:	2310      	movs	r3, #16
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ce0:	2308      	movs	r3, #8
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ce4:	23c0      	movs	r3, #192	; 0xc0
 8001ce6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001cec:	2308      	movs	r3, #8
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cf0:	f107 0320 	add.w	r3, r7, #32
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fbfd 	bl	80034f4 <HAL_RCC_OscConfig>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d00:	f000 f966 	bl	8001fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d04:	230f      	movs	r3, #15
 8001d06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d1c:	f107 030c 	add.w	r3, r7, #12
 8001d20:	2103      	movs	r1, #3
 8001d22:	4618      	mov	r0, r3
 8001d24:	f001 fe5e 	bl	80039e4 <HAL_RCC_ClockConfig>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d2e:	f000 f94f 	bl	8001fd0 <Error_Handler>
  }
}
 8001d32:	bf00      	nop
 8001d34:	3750      	adds	r7, #80	; 0x50
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40007000 	.word	0x40007000

08001d44 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d4a:	463b      	mov	r3, r7
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d56:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d58:	4a21      	ldr	r2, [pc, #132]	; (8001de0 <MX_ADC1_Init+0x9c>)
 8001d5a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d62:	4b1e      	ldr	r3, [pc, #120]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001d68:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d84:	4a17      	ldr	r2, [pc, #92]	; (8001de4 <MX_ADC1_Init+0xa0>)
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da2:	480e      	ldr	r0, [pc, #56]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001da4:	f000 fe54 	bl	8002a50 <HAL_ADC_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001dae:	f000 f90f 	bl	8001fd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001db2:	2301      	movs	r3, #1
 8001db4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dbe:	463b      	mov	r3, r7
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <MX_ADC1_Init+0x98>)
 8001dc4:	f000 fe88 	bl	8002ad8 <HAL_ADC_ConfigChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001dce:	f000 f8ff 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200001fc 	.word	0x200001fc
 8001de0:	40012000 	.word	0x40012000
 8001de4:	0f000001 	.word	0x0f000001

08001de8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dec:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001dee:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <MX_SPI2_Init+0x68>)
 8001df0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001df2:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001df4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001df8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e34:	220a      	movs	r2, #10
 8001e36:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI2_Init+0x64>)
 8001e3a:	f001 ffbf 	bl	8003dbc <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e44:	f000 f8c4 	bl	8001fd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000244 	.word	0x20000244
 8001e50:	40003800 	.word	0x40003800

08001e54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08a      	sub	sp, #40	; 0x28
 8001e58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a53      	ldr	r2, [pc, #332]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b4d      	ldr	r3, [pc, #308]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a4c      	ldr	r2, [pc, #304]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60bb      	str	r3, [r7, #8]
 8001ea6:	4b46      	ldr	r3, [pc, #280]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a45      	ldr	r2, [pc, #276]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	607b      	str	r3, [r7, #4]
 8001ec2:	4b3f      	ldr	r3, [pc, #252]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a3e      	ldr	r2, [pc, #248]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	607b      	str	r3, [r7, #4]
 8001ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a37      	ldr	r2, [pc, #220]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b35      	ldr	r3, [pc, #212]	; (8001fc0 <MX_GPIO_Init+0x16c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	603b      	str	r3, [r7, #0]
 8001ef4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001efc:	4831      	ldr	r0, [pc, #196]	; (8001fc4 <MX_GPIO_Init+0x170>)
 8001efe:	f001 fac7 	bl	8003490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	4619      	mov	r1, r3
 8001f16:	482c      	ldr	r0, [pc, #176]	; (8001fc8 <MX_GPIO_Init+0x174>)
 8001f18:	f001 f91e 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001f1c:	2306      	movs	r3, #6
 8001f1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f26:	2302      	movs	r3, #2
 8001f28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f2a:	f107 0314 	add.w	r3, r7, #20
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4825      	ldr	r0, [pc, #148]	; (8001fc8 <MX_GPIO_Init+0x174>)
 8001f32:	f001 f911 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f36:	2308      	movs	r3, #8
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481f      	ldr	r0, [pc, #124]	; (8001fc8 <MX_GPIO_Init+0x174>)
 8001f4c:	f001 f904 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8001f50:	2311      	movs	r3, #17
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	481a      	ldr	r0, [pc, #104]	; (8001fcc <MX_GPIO_Init+0x178>)
 8001f64:	f001 f8f8 	bl	8003158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4810      	ldr	r0, [pc, #64]	; (8001fc4 <MX_GPIO_Init+0x170>)
 8001f82:	f001 f8e9 	bl	8003158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2007      	movs	r0, #7
 8001f8c:	f001 f8ad 	bl	80030ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001f90:	2007      	movs	r0, #7
 8001f92:	f001 f8c6 	bl	8003122 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2008      	movs	r0, #8
 8001f9c:	f001 f8a5 	bl	80030ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fa0:	2008      	movs	r0, #8
 8001fa2:	f001 f8be 	bl	8003122 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2100      	movs	r1, #0
 8001faa:	2009      	movs	r0, #9
 8001fac:	f001 f89d 	bl	80030ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001fb0:	2009      	movs	r0, #9
 8001fb2:	f001 f8b6 	bl	8003122 <HAL_NVIC_EnableIRQ>

}
 8001fb6:	bf00      	nop
 8001fb8:	3728      	adds	r7, #40	; 0x28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	40020c00 	.word	0x40020c00
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd4:	b672      	cpsid	i
}
 8001fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <Error_Handler+0x8>
	...

08001fdc <MAX7219_Init>:
static bool SPI_Tx(uint8_t data);
static void DelayInit(void);
static void DelayUS(uint32_t);

void MAX7219_Init(SPI_HandleTypeDef* spi, GPIO_TypeDef* ss_port, uint16_t ss_pin)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	80fb      	strh	r3, [r7, #6]
	Max7219_SPI = spi;
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <MAX7219_Init+0x30>)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6013      	str	r3, [r2, #0]
	Max7219_SS_Port = ss_port;
 8001ff0:	4a07      	ldr	r2, [pc, #28]	; (8002010 <MAX7219_Init+0x34>)
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	6013      	str	r3, [r2, #0]
	Max7219_SS_Pin = ss_pin;
 8001ff6:	4a07      	ldr	r2, [pc, #28]	; (8002014 <MAX7219_Init+0x38>)
 8001ff8:	88fb      	ldrh	r3, [r7, #6]
 8001ffa:	8013      	strh	r3, [r2, #0]

	/* Us delay */
	DelayInit();
 8001ffc:	f000 f998 	bl	8002330 <DelayInit>

	/* Deselect SS */
	SS_Deselect();
 8002000:	f000 f968 	bl	80022d4 <SS_Deselect>
}
 8002004:	bf00      	nop
 8002006:	3710      	adds	r7, #16
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000344 	.word	0x20000344
 8002010:	20000348 	.word	0x20000348
 8002014:	2000034c 	.word	0x2000034c

08002018 <MAX7219_Write>:

bool MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	460b      	mov	r3, r1
 8002024:	71bb      	strb	r3, [r7, #6]
 8002026:	4613      	mov	r3, r2
 8002028:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d901      	bls.n	8002034 <MAX7219_Write+0x1c>
 8002030:	2300      	movs	r3, #0
 8002032:	e05b      	b.n	80020ec <MAX7219_Write+0xd4>

	SS_Select();
 8002034:	f000 f93a 	bl	80022ac <SS_Select>

	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e018      	b.n	8002070 <MAX7219_Write+0x58>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 800203e:	2000      	movs	r0, #0
 8002040:	f000 f95c 	bl	80022fc <SPI_Tx>
 8002044:	4603      	mov	r3, r0
 8002046:	f083 0301 	eor.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MAX7219_Write+0x3c>
 8002050:	2300      	movs	r3, #0
 8002052:	e04b      	b.n	80020ec <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 8002054:	2000      	movs	r0, #0
 8002056:	f000 f951 	bl	80022fc <SPI_Tx>
 800205a:	4603      	mov	r3, r0
 800205c:	f083 0301 	eor.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MAX7219_Write+0x52>
 8002066:	2300      	movs	r3, #0
 8002068:	e040      	b.n	80020ec <MAX7219_Write+0xd4>
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	3301      	adds	r3, #1
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b02      	cmp	r3, #2
 8002074:	dde3      	ble.n	800203e <MAX7219_Write+0x26>
	}

	/* Write register */
	if(!SPI_Tx(reg)) return false;
 8002076:	79bb      	ldrb	r3, [r7, #6]
 8002078:	4618      	mov	r0, r3
 800207a:	f000 f93f 	bl	80022fc <SPI_Tx>
 800207e:	4603      	mov	r3, r0
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MAX7219_Write+0x76>
 800208a:	2300      	movs	r3, #0
 800208c:	e02e      	b.n	80020ec <MAX7219_Write+0xd4>
	if(!SPI_Tx(data)) return false;
 800208e:	797b      	ldrb	r3, [r7, #5]
 8002090:	4618      	mov	r0, r3
 8002092:	f000 f933 	bl	80022fc <SPI_Tx>
 8002096:	4603      	mov	r3, r0
 8002098:	f083 0301 	eor.w	r3, r3, #1
 800209c:	b2db      	uxtb	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MAX7219_Write+0x8e>
 80020a2:	2300      	movs	r3, #0
 80020a4:	e022      	b.n	80020ec <MAX7219_Write+0xd4>

	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	e018      	b.n	80020de <MAX7219_Write+0xc6>
	{
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Reg */
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f925 	bl	80022fc <SPI_Tx>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f083 0301 	eor.w	r3, r3, #1
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MAX7219_Write+0xaa>
 80020be:	2300      	movs	r3, #0
 80020c0:	e014      	b.n	80020ec <MAX7219_Write+0xd4>
		if(!SPI_Tx(MAX7219_REG_NOOP)) return false;		/* Data */
 80020c2:	2000      	movs	r0, #0
 80020c4:	f000 f91a 	bl	80022fc <SPI_Tx>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MAX7219_Write+0xc0>
 80020d4:	2300      	movs	r3, #0
 80020d6:	e009      	b.n	80020ec <MAX7219_Write+0xd4>
	for(int i = 0; i < index; i++)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	3301      	adds	r3, #1
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	68ba      	ldr	r2, [r7, #8]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	dbe2      	blt.n	80020ac <MAX7219_Write+0x94>
	}

	SS_Deselect();
 80020e6:	f000 f8f5 	bl	80022d4 <SS_Deselect>

	return true;
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <MAX7219_Digit>:

bool MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	4603      	mov	r3, r0
 80020fc:	71fb      	strb	r3, [r7, #7]
 80020fe:	460b      	mov	r3, r1
 8002100:	71bb      	strb	r3, [r7, #6]
 8002102:	4613      	mov	r3, r2
 8002104:	717b      	strb	r3, [r7, #5]
	if(index >= MAX7219_IC_NUM) return false;
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	2b03      	cmp	r3, #3
 800210a:	d901      	bls.n	8002110 <MAX7219_Digit+0x1c>
 800210c:	2300      	movs	r3, #0
 800210e:	e015      	b.n	800213c <MAX7219_Digit+0x48>
	if(digit > 0x07) return false;
 8002110:	79bb      	ldrb	r3, [r7, #6]
 8002112:	2b07      	cmp	r3, #7
 8002114:	d901      	bls.n	800211a <MAX7219_Digit+0x26>
 8002116:	2300      	movs	r3, #0
 8002118:	e010      	b.n	800213c <MAX7219_Digit+0x48>

	if(!MAX7219_Write(index, digit+1, value)) return false;
 800211a:	79bb      	ldrb	r3, [r7, #6]
 800211c:	3301      	adds	r3, #1
 800211e:	b2d9      	uxtb	r1, r3
 8002120:	797a      	ldrb	r2, [r7, #5]
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff77 	bl	8002018 <MAX7219_Write>
 800212a:	4603      	mov	r3, r0
 800212c:	f083 0301 	eor.w	r3, r3, #1
 8002130:	b2db      	uxtb	r3, r3
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MAX7219_Digit+0x46>
 8002136:	2300      	movs	r3, #0
 8002138:	e000      	b.n	800213c <MAX7219_Digit+0x48>

	return true;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}

08002144 <MAX7219_Decode>:

bool MAX7219_Decode(uint8_t index, uint8_t value)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	460a      	mov	r2, r1
 800214e:	71fb      	strb	r3, [r7, #7]
 8002150:	4613      	mov	r3, r2
 8002152:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	2b03      	cmp	r3, #3
 8002158:	d901      	bls.n	800215e <MAX7219_Decode+0x1a>
 800215a:	2300      	movs	r3, #0
 800215c:	e00e      	b.n	800217c <MAX7219_Decode+0x38>

	if(!MAX7219_Write(index, MAX7219_REG_DECODE, value)) return false;
 800215e:	79ba      	ldrb	r2, [r7, #6]
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2109      	movs	r1, #9
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff57 	bl	8002018 <MAX7219_Write>
 800216a:	4603      	mov	r3, r0
 800216c:	f083 0301 	eor.w	r3, r3, #1
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MAX7219_Decode+0x36>
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <MAX7219_Decode+0x38>

	return true;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <MAX7219_Intensity>:

bool MAX7219_Intensity(uint8_t index, uint8_t value)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	460a      	mov	r2, r1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	4613      	mov	r3, r2
 8002192:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d901      	bls.n	800219e <MAX7219_Intensity+0x1a>
 800219a:	2300      	movs	r3, #0
 800219c:	e013      	b.n	80021c6 <MAX7219_Intensity+0x42>
	if(value > 0x0F) value = 0x0F;
 800219e:	79bb      	ldrb	r3, [r7, #6]
 80021a0:	2b0f      	cmp	r3, #15
 80021a2:	d901      	bls.n	80021a8 <MAX7219_Intensity+0x24>
 80021a4:	230f      	movs	r3, #15
 80021a6:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_INTENSITY, value)) return false;
 80021a8:	79ba      	ldrb	r2, [r7, #6]
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	210a      	movs	r1, #10
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff ff32 	bl	8002018 <MAX7219_Write>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MAX7219_Intensity+0x40>
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <MAX7219_Intensity+0x42>

	return true;
 80021c4:	2301      	movs	r3, #1
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <MAX7219_ScanLimit>:

bool MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	4603      	mov	r3, r0
 80021d6:	460a      	mov	r2, r1
 80021d8:	71fb      	strb	r3, [r7, #7]
 80021da:	4613      	mov	r3, r2
 80021dc:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d901      	bls.n	80021e8 <MAX7219_ScanLimit+0x1a>
 80021e4:	2300      	movs	r3, #0
 80021e6:	e013      	b.n	8002210 <MAX7219_ScanLimit+0x42>
	if(value > 0x07) value = 0x07;
 80021e8:	79bb      	ldrb	r3, [r7, #6]
 80021ea:	2b07      	cmp	r3, #7
 80021ec:	d901      	bls.n	80021f2 <MAX7219_ScanLimit+0x24>
 80021ee:	2307      	movs	r3, #7
 80021f0:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value)) return false;
 80021f2:	79ba      	ldrb	r2, [r7, #6]
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	210b      	movs	r1, #11
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff ff0d 	bl	8002018 <MAX7219_Write>
 80021fe:	4603      	mov	r3, r0
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MAX7219_ScanLimit+0x40>
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <MAX7219_ScanLimit+0x42>

	return true;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <MAX7219_ShutDown>:

bool MAX7219_ShutDown(uint8_t index, uint8_t value)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	460a      	mov	r2, r1
 8002222:	71fb      	strb	r3, [r7, #7]
 8002224:	4613      	mov	r3, r2
 8002226:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002228:	79fb      	ldrb	r3, [r7, #7]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d901      	bls.n	8002232 <MAX7219_ShutDown+0x1a>
 800222e:	2300      	movs	r3, #0
 8002230:	e013      	b.n	800225a <MAX7219_ShutDown+0x42>
	if(value > 0x01) value = 0x01;
 8002232:	79bb      	ldrb	r3, [r7, #6]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d901      	bls.n	800223c <MAX7219_ShutDown+0x24>
 8002238:	2301      	movs	r3, #1
 800223a:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value)) return false;
 800223c:	79ba      	ldrb	r2, [r7, #6]
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	210c      	movs	r1, #12
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fee8 	bl	8002018 <MAX7219_Write>
 8002248:	4603      	mov	r3, r0
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MAX7219_ShutDown+0x40>
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <MAX7219_ShutDown+0x42>

	return true;
 8002258:	2301      	movs	r3, #1
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <MAX7219_Test>:

bool MAX7219_Test(uint8_t index, uint8_t value)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	460a      	mov	r2, r1
 800226c:	71fb      	strb	r3, [r7, #7]
 800226e:	4613      	mov	r3, r2
 8002270:	71bb      	strb	r3, [r7, #6]
	if(index >= MAX7219_IC_NUM) return false;
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d901      	bls.n	800227c <MAX7219_Test+0x1a>
 8002278:	2300      	movs	r3, #0
 800227a:	e013      	b.n	80022a4 <MAX7219_Test+0x42>
	if(value > 0x01) value = 0x01;
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d901      	bls.n	8002286 <MAX7219_Test+0x24>
 8002282:	2301      	movs	r3, #1
 8002284:	71bb      	strb	r3, [r7, #6]

	if(!MAX7219_Write(index, MAX7219_REG_TEST, value)) return false;
 8002286:	79ba      	ldrb	r2, [r7, #6]
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	210f      	movs	r1, #15
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fec3 	bl	8002018 <MAX7219_Write>
 8002292:	4603      	mov	r3, r0
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MAX7219_Test+0x40>
 800229e:	2300      	movs	r3, #0
 80022a0:	e000      	b.n	80022a4 <MAX7219_Test+0x42>

	return true;
 80022a2:	2301      	movs	r3, #1
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <SS_Select>:

static void SS_Select()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_RESET);
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <SS_Select+0x20>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a06      	ldr	r2, [pc, #24]	; (80022d0 <SS_Select+0x24>)
 80022b6:	8811      	ldrh	r1, [r2, #0]
 80022b8:	2200      	movs	r2, #0
 80022ba:	4618      	mov	r0, r3
 80022bc:	f001 f8e8 	bl	8003490 <HAL_GPIO_WritePin>
	DelayUS(1);
 80022c0:	2001      	movs	r0, #1
 80022c2:	f000 f85f 	bl	8002384 <DelayUS>
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000348 	.word	0x20000348
 80022d0:	2000034c 	.word	0x2000034c

080022d4 <SS_Deselect>:

static void SS_Deselect()
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Max7219_SS_Port, Max7219_SS_Pin, GPIO_PIN_SET);
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <SS_Deselect+0x20>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a06      	ldr	r2, [pc, #24]	; (80022f8 <SS_Deselect+0x24>)
 80022de:	8811      	ldrh	r1, [r2, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 f8d4 	bl	8003490 <HAL_GPIO_WritePin>
	DelayUS(1);
 80022e8:	2001      	movs	r0, #1
 80022ea:	f000 f84b 	bl	8002384 <DelayUS>
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000348 	.word	0x20000348
 80022f8:	2000034c 	.word	0x2000034c

080022fc <SPI_Tx>:

static bool SPI_Tx(uint8_t data)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
	if(HAL_SPI_Transmit(Max7219_SPI, &data, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <SPI_Tx+0x30>)
 8002308:	6818      	ldr	r0, [r3, #0]
 800230a:	1df9      	adds	r1, r7, #7
 800230c:	f04f 33ff 	mov.w	r3, #4294967295
 8002310:	2201      	movs	r2, #1
 8002312:	f001 fddc 	bl	8003ece <HAL_SPI_Transmit>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <SPI_Tx+0x24>
 800231c:	2300      	movs	r3, #0
 800231e:	e000      	b.n	8002322 <SPI_Tx+0x26>
	return true;
 8002320:	2301      	movs	r3, #1
}
 8002322:	4618      	mov	r0, r3
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000344 	.word	0x20000344

08002330 <DelayInit>:

static void DelayInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8002334:	4b11      	ldr	r3, [pc, #68]	; (800237c <DelayInit+0x4c>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	4a10      	ldr	r2, [pc, #64]	; (800237c <DelayInit+0x4c>)
 800233a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800233e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <DelayInit+0x4c>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <DelayInit+0x4c>)
 8002346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800234c:	4b0c      	ldr	r3, [pc, #48]	; (8002380 <DelayInit+0x50>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0b      	ldr	r2, [pc, #44]	; (8002380 <DelayInit+0x50>)
 8002352:	f023 0301 	bic.w	r3, r3, #1
 8002356:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <DelayInit+0x50>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <DelayInit+0x50>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <DelayInit+0x50>)
 8002366:	2200      	movs	r2, #0
 8002368:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800236a:	bf00      	nop
  __ASM volatile ("NOP");
 800236c:	bf00      	nop
  __ASM volatile ("NOP");
 800236e:	bf00      	nop
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000edf0 	.word	0xe000edf0
 8002380:	e0001000 	.word	0xe0001000

08002384 <DelayUS>:

static void DelayUS(uint32_t us) {
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800238c:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <DelayUS+0x44>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <DelayUS+0x48>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9a      	lsrs	r2, r3, #18
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <DelayUS+0x4c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <DelayUS+0x4c>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d8f6      	bhi.n	80023a6 <DelayUS+0x22>
}
 80023b8:	bf00      	nop
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20000170 	.word	0x20000170
 80023cc:	431bde83 	.word	0x431bde83
 80023d0:	e0001000 	.word	0xe0001000

080023d4 <MAX7219_MatrixInit>:
};

volatile uint8_t FrameBuffer[MAX7219_IC_NUM][8];

void MAX7219_MatrixInit(SPI_HandleTypeDef* spi, GPIO_TypeDef* cs_port, uint16_t cs_pin)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
	MAX7219_Init(spi, cs_port, cs_pin);
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	461a      	mov	r2, r3
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f7ff fdf7 	bl	8001fdc <MAX7219_Init>

	for(int i = 0; i < MAX7219_IC_NUM; i++)
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
 80023f2:	e02a      	b.n	800244a <MAX7219_MatrixInit+0x76>
	{
		MAX7219_MatrixClear(i);
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f82f 	bl	800245c <MAX7219_MatrixClear>
		MAX7219_ShutDown(i, 1);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2101      	movs	r1, #1
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff07 	bl	8002218 <MAX7219_ShutDown>
		MAX7219_Test(i, 0);
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff26 	bl	8002262 <MAX7219_Test>
		MAX7219_Decode(i, 0);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fe91 	bl	8002144 <MAX7219_Decode>
		MAX7219_Intensity(i, 1);
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2101      	movs	r1, #1
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff feab 	bl	8002184 <MAX7219_Intensity>
		MAX7219_ScanLimit(i, 7);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2107      	movs	r1, #7
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff feca 	bl	80021ce <MAX7219_ScanLimit>
		MAX7219_MatrixClear(i);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f80c 	bl	800245c <MAX7219_MatrixClear>
	for(int i = 0; i < MAX7219_IC_NUM; i++)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	3301      	adds	r3, #1
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b03      	cmp	r3, #3
 800244e:	ddd1      	ble.n	80023f4 <MAX7219_MatrixInit+0x20>
	}
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
	...

0800245c <MAX7219_MatrixClear>:

void MAX7219_MatrixClear(uint8_t index)
{
 800245c:	b480      	push	{r7}
 800245e:	b085      	sub	sp, #20
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
	for(int i =0; i < 8; i++)
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	e00a      	b.n	8002482 <MAX7219_MatrixClear+0x26>
	{
		FrameBuffer[index][i] = 0;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <MAX7219_MatrixClear+0x3c>)
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	441a      	add	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
	for(int i =0; i < 8; i++)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b07      	cmp	r3, #7
 8002486:	ddf1      	ble.n	800246c <MAX7219_MatrixClear+0x10>
	}
}
 8002488:	bf00      	nop
 800248a:	bf00      	nop
 800248c:	3714      	adds	r7, #20
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000350 	.word	0x20000350

0800249c <MAX7219_MatrixSetPixel>:
		rows = rows >> 8;
	}
}

void MAX7219_MatrixSetPixel(uint8_t index, uint8_t digit, uint8_t row)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
 80024a6:	460b      	mov	r3, r1
 80024a8:	71bb      	strb	r3, [r7, #6]
 80024aa:	4613      	mov	r3, r2
 80024ac:	717b      	strb	r3, [r7, #5]
	FrameBuffer[index][digit] = row;
 80024ae:	79fa      	ldrb	r2, [r7, #7]
 80024b0:	79bb      	ldrb	r3, [r7, #6]
 80024b2:	4906      	ldr	r1, [pc, #24]	; (80024cc <MAX7219_MatrixSetPixel+0x30>)
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	440a      	add	r2, r1
 80024b8:	4413      	add	r3, r2
 80024ba:	797a      	ldrb	r2, [r7, #5]
 80024bc:	701a      	strb	r2, [r3, #0]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000350 	.word	0x20000350

080024d0 <MAX7219_MatrixUpdate>:
		FrameBuffer[3][i] |= lsbD0;
	}
}

bool MAX7219_MatrixUpdate()
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	e024      	b.n	8002526 <MAX7219_MatrixUpdate+0x56>
	{
		for(int digit = 0; digit < 8; digit++)
 80024dc:	2300      	movs	r3, #0
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	e01b      	b.n	800251a <MAX7219_MatrixUpdate+0x4a>
		{
			uint8_t row = FrameBuffer[index][digit];
 80024e2:	4a15      	ldr	r2, [pc, #84]	; (8002538 <MAX7219_MatrixUpdate+0x68>)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	441a      	add	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	4413      	add	r3, r2
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	71fb      	strb	r3, [r7, #7]
			if(!MAX7219_Digit(index, digit, row)) return false;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	b2d1      	uxtb	r1, r2
 80024fa:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fdf8 	bl	80020f4 <MAX7219_Digit>
 8002504:	4603      	mov	r3, r0
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MAX7219_MatrixUpdate+0x44>
 8002510:	2300      	movs	r3, #0
 8002512:	e00c      	b.n	800252e <MAX7219_MatrixUpdate+0x5e>
		for(int digit = 0; digit < 8; digit++)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	3301      	adds	r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b07      	cmp	r3, #7
 800251e:	dde0      	ble.n	80024e2 <MAX7219_MatrixUpdate+0x12>
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3301      	adds	r3, #1
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b03      	cmp	r3, #3
 800252a:	ddd7      	ble.n	80024dc <MAX7219_MatrixUpdate+0xc>
		}
	}

	return true;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000350 	.word	0x20000350

0800253c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	4b10      	ldr	r3, [pc, #64]	; (8002588 <HAL_MspInit+0x4c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800254a:	4a0f      	ldr	r2, [pc, #60]	; (8002588 <HAL_MspInit+0x4c>)
 800254c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002550:	6453      	str	r3, [r2, #68]	; 0x44
 8002552:	4b0d      	ldr	r3, [pc, #52]	; (8002588 <HAL_MspInit+0x4c>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	603b      	str	r3, [r7, #0]
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <HAL_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a08      	ldr	r2, [pc, #32]	; (8002588 <HAL_MspInit+0x4c>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_MspInit+0x4c>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800257a:	2007      	movs	r0, #7
 800257c:	f000 fdaa 	bl	80030d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002580:	bf00      	nop
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	40023800 	.word	0x40023800

0800258c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08a      	sub	sp, #40	; 0x28
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002594:	f107 0314 	add.w	r3, r7, #20
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	60da      	str	r2, [r3, #12]
 80025a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a17      	ldr	r2, [pc, #92]	; (8002608 <HAL_ADC_MspInit+0x7c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d127      	bne.n	80025fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_ADC_MspInit+0x80>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	4a15      	ldr	r2, [pc, #84]	; (800260c <HAL_ADC_MspInit+0x80>)
 80025b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025bc:	6453      	str	r3, [r2, #68]	; 0x44
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_ADC_MspInit+0x80>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	613b      	str	r3, [r7, #16]
 80025c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_ADC_MspInit+0x80>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a0e      	ldr	r2, [pc, #56]	; (800260c <HAL_ADC_MspInit+0x80>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b0c      	ldr	r3, [pc, #48]	; (800260c <HAL_ADC_MspInit+0x80>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80025e6:	2302      	movs	r3, #2
 80025e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ea:	2303      	movs	r3, #3
 80025ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f2:	f107 0314 	add.w	r3, r7, #20
 80025f6:	4619      	mov	r1, r3
 80025f8:	4805      	ldr	r0, [pc, #20]	; (8002610 <HAL_ADC_MspInit+0x84>)
 80025fa:	f000 fdad 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025fe:	bf00      	nop
 8002600:	3728      	adds	r7, #40	; 0x28
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	40012000 	.word	0x40012000
 800260c:	40023800 	.word	0x40023800
 8002610:	40020000 	.word	0x40020000

08002614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08a      	sub	sp, #40	; 0x28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a19      	ldr	r2, [pc, #100]	; (8002698 <HAL_SPI_MspInit+0x84>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d12c      	bne.n	8002690 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002636:	2300      	movs	r3, #0
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_SPI_MspInit+0x88>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4a17      	ldr	r2, [pc, #92]	; (800269c <HAL_SPI_MspInit+0x88>)
 8002640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002644:	6413      	str	r3, [r2, #64]	; 0x40
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_SPI_MspInit+0x88>)
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <HAL_SPI_MspInit+0x88>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	4a10      	ldr	r2, [pc, #64]	; (800269c <HAL_SPI_MspInit+0x88>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	6313      	str	r3, [r2, #48]	; 0x30
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_SPI_MspInit+0x88>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	60fb      	str	r3, [r7, #12]
 800266c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800266e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002674:	2302      	movs	r3, #2
 8002676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002680:	2305      	movs	r3, #5
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	4805      	ldr	r0, [pc, #20]	; (80026a0 <HAL_SPI_MspInit+0x8c>)
 800268c:	f000 fd64 	bl	8003158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40003800 	.word	0x40003800
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020400 	.word	0x40020400

080026a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80026a8:	e7fe      	b.n	80026a8 <NMI_Handler+0x4>

080026aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026aa:	b480      	push	{r7}
 80026ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026ae:	e7fe      	b.n	80026ae <HardFault_Handler+0x4>

080026b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b4:	e7fe      	b.n	80026b4 <MemManage_Handler+0x4>

080026b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026ba:	e7fe      	b.n	80026ba <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	e7fe      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026c2:	b480      	push	{r7}
 80026c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026c6:	bf00      	nop
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026d4:	bf00      	nop
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026de:	b480      	push	{r7}
 80026e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026e2:	bf00      	nop
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026f0:	f000 f96a 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026f4:	bf00      	nop
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80026fc:	2002      	movs	r0, #2
 80026fe:	f000 fee1 	bl	80034c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002702:	bf00      	nop
 8002704:	bd80      	pop	{r7, pc}

08002706 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800270a:	2004      	movs	r0, #4
 800270c:	f000 feda 	bl	80034c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}

08002714 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002718:	2008      	movs	r0, #8
 800271a:	f000 fed3 	bl	80034c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	bd80      	pop	{r7, pc}

08002722 <_getpid>:
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
 8002726:	2301      	movs	r3, #1
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <_kill>:
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
 800273c:	f001 fdce 	bl	80042dc <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	2216      	movs	r2, #22
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <_exit>:
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	f04f 31ff 	mov.w	r1, #4294967295
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffe7 	bl	8002732 <_kill>
 8002764:	e7fe      	b.n	8002764 <_exit+0x12>

08002766 <_read>:
 8002766:	b580      	push	{r7, lr}
 8002768:	b086      	sub	sp, #24
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	e00a      	b.n	800278e <_read+0x28>
 8002778:	f3af 8000 	nop.w
 800277c:	4601      	mov	r1, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	60ba      	str	r2, [r7, #8]
 8002784:	b2ca      	uxtb	r2, r1
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3301      	adds	r3, #1
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	429a      	cmp	r2, r3
 8002794:	dbf0      	blt.n	8002778 <_read+0x12>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_write>:
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e009      	b.n	80027c6 <_write+0x26>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	1c5a      	adds	r2, r3, #1
 80027b6:	60ba      	str	r2, [r7, #8]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f3af 8000 	nop.w
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	3301      	adds	r3, #1
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	dbf1      	blt.n	80027b2 <_write+0x12>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4618      	mov	r0, r3
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <_close>:
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	f04f 33ff 	mov.w	r3, #4294967295
 80027e4:	4618      	mov	r0, r3
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <_fstat>:
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	2300      	movs	r3, #0
 8002804:	4618      	mov	r0, r3
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <_isatty>:
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	2301      	movs	r3, #1
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr

08002826 <_lseek>:
 8002826:	b480      	push	{r7}
 8002828:	b085      	sub	sp, #20
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	2300      	movs	r3, #0
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_sbrk>:
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
 8002870:	f001 fd34 	bl	80042dc <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	f04f 33ff 	mov.w	r3, #4294967295
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20020000 	.word	0x20020000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	20000370 	.word	0x20000370
 80028a8:	20000388 	.word	0x20000388

080028ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:
 80028d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002908 <LoopFillZerobss+0x12>
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <LoopFillZerobss+0x16>)
 80028d6:	490e      	ldr	r1, [pc, #56]	; (8002910 <LoopFillZerobss+0x1a>)
 80028d8:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <LoopFillZerobss+0x1e>)
 80028da:	2300      	movs	r3, #0
 80028dc:	e002      	b.n	80028e4 <LoopCopyDataInit>

080028de <CopyDataInit>:
 80028de:	58d4      	ldr	r4, [r2, r3]
 80028e0:	50c4      	str	r4, [r0, r3]
 80028e2:	3304      	adds	r3, #4

080028e4 <LoopCopyDataInit>:
 80028e4:	18c4      	adds	r4, r0, r3
 80028e6:	428c      	cmp	r4, r1
 80028e8:	d3f9      	bcc.n	80028de <CopyDataInit>
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <LoopFillZerobss+0x22>)
 80028ec:	4c0b      	ldr	r4, [pc, #44]	; (800291c <LoopFillZerobss+0x26>)
 80028ee:	2300      	movs	r3, #0
 80028f0:	e001      	b.n	80028f6 <LoopFillZerobss>

080028f2 <FillZerobss>:
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	3204      	adds	r2, #4

080028f6 <LoopFillZerobss>:
 80028f6:	42a2      	cmp	r2, r4
 80028f8:	d3fb      	bcc.n	80028f2 <FillZerobss>
 80028fa:	f7ff ffd7 	bl	80028ac <SystemInit>
 80028fe:	f001 fcf3 	bl	80042e8 <__libc_init_array>
 8002902:	f7ff f911 	bl	8001b28 <main>
 8002906:	4770      	bx	lr
 8002908:	20020000 	.word	0x20020000
 800290c:	20000000 	.word	0x20000000
 8002910:	200001e0 	.word	0x200001e0
 8002914:	080063f8 	.word	0x080063f8
 8002918:	200001e0 	.word	0x200001e0
 800291c:	20000388 	.word	0x20000388

08002920 <ADC_IRQHandler>:
 8002920:	e7fe      	b.n	8002920 <ADC_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <HAL_Init+0x40>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a0d      	ldr	r2, [pc, #52]	; (8002964 <HAL_Init+0x40>)
 800292e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002932:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002934:	4b0b      	ldr	r3, [pc, #44]	; (8002964 <HAL_Init+0x40>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_Init+0x40>)
 800293a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800293e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_Init+0x40>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_Init+0x40>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 fbc1 	bl	80030d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	2000      	movs	r0, #0
 8002954:	f000 f808 	bl	8002968 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff fdf0 	bl	800253c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40023c00 	.word	0x40023c00

08002968 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002970:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_InitTick+0x54>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_InitTick+0x58>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fbd9 	bl	800313e <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f000 fba1 	bl	80030ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	; (80029c4 <HAL_InitTick+0x5c>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000170 	.word	0x20000170
 80029c0:	20000178 	.word	0x20000178
 80029c4:	20000174 	.word	0x20000174

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	; (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	; (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	; (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	20000178 	.word	0x20000178
 80029ec:	20000374 	.word	0x20000374

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	20000374 	.word	0x20000374

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000178 	.word	0x20000178

08002a50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e033      	b.n	8002ace <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fd8c 	bl	800258c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d118      	bne.n	8002ac0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a96:	f023 0302 	bic.w	r3, r3, #2
 8002a9a:	f043 0202 	orr.w	r2, r3, #2
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f94a 	bl	8002d3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	f023 0303 	bic.w	r3, r3, #3
 8002ab6:	f043 0201 	orr.w	r2, r3, #1
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
 8002abe:	e001      	b.n	8002ac4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1c>
 8002af0:	2302      	movs	r3, #2
 8002af2:	e113      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x244>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d925      	bls.n	8002b50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68d9      	ldr	r1, [r3, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	3b1e      	subs	r3, #30
 8002b1a:	2207      	movs	r2, #7
 8002b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b20:	43da      	mvns	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	400a      	ands	r2, r1
 8002b28:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68d9      	ldr	r1, [r3, #12]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4403      	add	r3, r0
 8002b42:	3b1e      	subs	r3, #30
 8002b44:	409a      	lsls	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	e022      	b.n	8002b96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6919      	ldr	r1, [r3, #16]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	2207      	movs	r2, #7
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	400a      	ands	r2, r1
 8002b72:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6919      	ldr	r1, [r3, #16]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4618      	mov	r0, r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4403      	add	r3, r0
 8002b8c:	409a      	lsls	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b06      	cmp	r3, #6
 8002b9c:	d824      	bhi.n	8002be8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685a      	ldr	r2, [r3, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	3b05      	subs	r3, #5
 8002bb0:	221f      	movs	r2, #31
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	4618      	mov	r0, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b05      	subs	r3, #5
 8002bda:	fa00 f203 	lsl.w	r2, r0, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	635a      	str	r2, [r3, #52]	; 0x34
 8002be6:	e04c      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b0c      	cmp	r3, #12
 8002bee:	d824      	bhi.n	8002c3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	3b23      	subs	r3, #35	; 0x23
 8002c02:	221f      	movs	r2, #31
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	400a      	ands	r2, r1
 8002c10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	4618      	mov	r0, r3
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	3b23      	subs	r3, #35	; 0x23
 8002c2c:	fa00 f203 	lsl.w	r2, r0, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	631a      	str	r2, [r3, #48]	; 0x30
 8002c38:	e023      	b.n	8002c82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b41      	subs	r3, #65	; 0x41
 8002c4c:	221f      	movs	r2, #31
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43da      	mvns	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	400a      	ands	r2, r1
 8002c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	3b41      	subs	r3, #65	; 0x41
 8002c76:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c82:	4b29      	ldr	r3, [pc, #164]	; (8002d28 <HAL_ADC_ConfigChannel+0x250>)
 8002c84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a28      	ldr	r2, [pc, #160]	; (8002d2c <HAL_ADC_ConfigChannel+0x254>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d10f      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d8>
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b12      	cmp	r3, #18
 8002c96:	d10b      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	; (8002d2c <HAL_ADC_ConfigChannel+0x254>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d12b      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x23a>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a1c      	ldr	r2, [pc, #112]	; (8002d30 <HAL_ADC_ConfigChannel+0x258>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <HAL_ADC_ConfigChannel+0x1f4>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b11      	cmp	r3, #17
 8002cca:	d122      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a11      	ldr	r2, [pc, #68]	; (8002d30 <HAL_ADC_ConfigChannel+0x258>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d111      	bne.n	8002d12 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <HAL_ADC_ConfigChannel+0x25c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a11      	ldr	r2, [pc, #68]	; (8002d38 <HAL_ADC_ConfigChannel+0x260>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	0c9a      	lsrs	r2, r3, #18
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d04:	e002      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f9      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	40012300 	.word	0x40012300
 8002d2c:	40012000 	.word	0x40012000
 8002d30:	10000012 	.word	0x10000012
 8002d34:	20000170 	.word	0x20000170
 8002d38:	431bde83 	.word	0x431bde83

08002d3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d44:	4b79      	ldr	r3, [pc, #484]	; (8002f2c <ADC_Init+0x1f0>)
 8002d46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	021a      	lsls	r2, r3, #8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6899      	ldr	r1, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	430a      	orrs	r2, r1
 8002dc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dce:	4a58      	ldr	r2, [pc, #352]	; (8002f30 <ADC_Init+0x1f4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d022      	beq.n	8002e1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002de2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6899      	ldr	r1, [r3, #8]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	609a      	str	r2, [r3, #8]
 8002e18:	e00f      	b.n	8002e3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002e38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0202 	bic.w	r2, r2, #2
 8002e48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7e1b      	ldrb	r3, [r3, #24]
 8002e54:	005a      	lsls	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e92:	3b01      	subs	r3, #1
 8002e94:	035a      	lsls	r2, r3, #13
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	e007      	b.n	8002eb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69db      	ldr	r3, [r3, #28]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	051a      	lsls	r2, r3, #20
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ee4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ef2:	025a      	lsls	r2, r3, #9
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6899      	ldr	r1, [r3, #8]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	029a      	lsls	r2, r3, #10
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40012300 	.word	0x40012300
 8002f30:	0f000001 	.word	0x0f000001

08002f34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4a:	68ba      	ldr	r2, [r7, #8]
 8002f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f50:	4013      	ands	r3, r2
 8002f52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f66:	4a04      	ldr	r2, [pc, #16]	; (8002f78 <__NVIC_SetPriorityGrouping+0x44>)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	60d3      	str	r3, [r2, #12]
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f80:	4b04      	ldr	r3, [pc, #16]	; (8002f94 <__NVIC_GetPriorityGrouping+0x18>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	0a1b      	lsrs	r3, r3, #8
 8002f86:	f003 0307 	and.w	r3, r3, #7
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	db0b      	blt.n	8002fc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002faa:	79fb      	ldrb	r3, [r7, #7]
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	4907      	ldr	r1, [pc, #28]	; (8002fd0 <__NVIC_EnableIRQ+0x38>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	095b      	lsrs	r3, r3, #5
 8002fb8:	2001      	movs	r0, #1
 8002fba:	fa00 f202 	lsl.w	r2, r0, r2
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000e100 	.word	0xe000e100

08002fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	db0a      	blt.n	8002ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	490c      	ldr	r1, [pc, #48]	; (8003020 <__NVIC_SetPriority+0x4c>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	0112      	lsls	r2, r2, #4
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ffc:	e00a      	b.n	8003014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	4908      	ldr	r1, [pc, #32]	; (8003024 <__NVIC_SetPriority+0x50>)
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	f003 030f 	and.w	r3, r3, #15
 800300a:	3b04      	subs	r3, #4
 800300c:	0112      	lsls	r2, r2, #4
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	440b      	add	r3, r1
 8003012:	761a      	strb	r2, [r3, #24]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	e000e100 	.word	0xe000e100
 8003024:	e000ed00 	.word	0xe000ed00

08003028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	; 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f1c3 0307 	rsb	r3, r3, #7
 8003042:	2b04      	cmp	r3, #4
 8003044:	bf28      	it	cs
 8003046:	2304      	movcs	r3, #4
 8003048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	3304      	adds	r3, #4
 800304e:	2b06      	cmp	r3, #6
 8003050:	d902      	bls.n	8003058 <NVIC_EncodePriority+0x30>
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3b03      	subs	r3, #3
 8003056:	e000      	b.n	800305a <NVIC_EncodePriority+0x32>
 8003058:	2300      	movs	r3, #0
 800305a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800305c:	f04f 32ff 	mov.w	r2, #4294967295
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43da      	mvns	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	401a      	ands	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003070:	f04f 31ff 	mov.w	r1, #4294967295
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	43d9      	mvns	r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003080:	4313      	orrs	r3, r2
         );
}
 8003082:	4618      	mov	r0, r3
 8003084:	3724      	adds	r7, #36	; 0x24
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
	...

08003090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030a0:	d301      	bcc.n	80030a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030a2:	2301      	movs	r3, #1
 80030a4:	e00f      	b.n	80030c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030a6:	4a0a      	ldr	r2, [pc, #40]	; (80030d0 <SysTick_Config+0x40>)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3b01      	subs	r3, #1
 80030ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030ae:	210f      	movs	r1, #15
 80030b0:	f04f 30ff 	mov.w	r0, #4294967295
 80030b4:	f7ff ff8e 	bl	8002fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <SysTick_Config+0x40>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <SysTick_Config+0x40>)
 80030c0:	2207      	movs	r2, #7
 80030c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	e000e010 	.word	0xe000e010

080030d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f7ff ff29 	bl	8002f34 <__NVIC_SetPriorityGrouping>
}
 80030e2:	bf00      	nop
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b086      	sub	sp, #24
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	4603      	mov	r3, r0
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030fc:	f7ff ff3e 	bl	8002f7c <__NVIC_GetPriorityGrouping>
 8003100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	6978      	ldr	r0, [r7, #20]
 8003108:	f7ff ff8e 	bl	8003028 <NVIC_EncodePriority>
 800310c:	4602      	mov	r2, r0
 800310e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003112:	4611      	mov	r1, r2
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff ff5d 	bl	8002fd4 <__NVIC_SetPriority>
}
 800311a:	bf00      	nop
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b082      	sub	sp, #8
 8003126:	af00      	add	r7, sp, #0
 8003128:	4603      	mov	r3, r0
 800312a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff ff31 	bl	8002f98 <__NVIC_EnableIRQ>
}
 8003136:	bf00      	nop
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7ff ffa2 	bl	8003090 <SysTick_Config>
 800314c:	4603      	mov	r3, r0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
	...

08003158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800316e:	2300      	movs	r3, #0
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e159      	b.n	8003428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003174:	2201      	movs	r2, #1
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4013      	ands	r3, r2
 8003186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	429a      	cmp	r2, r3
 800318e:	f040 8148 	bne.w	8003422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d005      	beq.n	80031aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d130      	bne.n	800320c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	2203      	movs	r2, #3
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e0:	2201      	movs	r2, #1
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	4013      	ands	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 0201 	and.w	r2, r3, #1
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4313      	orrs	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0303 	and.w	r3, r3, #3
 8003214:	2b03      	cmp	r3, #3
 8003216:	d017      	beq.n	8003248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2203      	movs	r2, #3
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d123      	bne.n	800329c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	08da      	lsrs	r2, r3, #3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3208      	adds	r2, #8
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	220f      	movs	r2, #15
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	08da      	lsrs	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	69b9      	ldr	r1, [r7, #24]
 8003298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 80a2 	beq.w	8003422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	4b57      	ldr	r3, [pc, #348]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a56      	ldr	r2, [pc, #344]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 80032e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b54      	ldr	r3, [pc, #336]	; (8003440 <HAL_GPIO_Init+0x2e8>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032fa:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_GPIO_Init+0x2ec>)
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	089b      	lsrs	r3, r3, #2
 8003300:	3302      	adds	r3, #2
 8003302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	220f      	movs	r2, #15
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a49      	ldr	r2, [pc, #292]	; (8003448 <HAL_GPIO_Init+0x2f0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0x202>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a48      	ldr	r2, [pc, #288]	; (800344c <HAL_GPIO_Init+0x2f4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x1fe>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a47      	ldr	r2, [pc, #284]	; (8003450 <HAL_GPIO_Init+0x2f8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00d      	beq.n	8003352 <HAL_GPIO_Init+0x1fa>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a46      	ldr	r2, [pc, #280]	; (8003454 <HAL_GPIO_Init+0x2fc>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x1f6>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a45      	ldr	r2, [pc, #276]	; (8003458 <HAL_GPIO_Init+0x300>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_GPIO_Init+0x1f2>
 8003346:	2304      	movs	r3, #4
 8003348:	e008      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334a:	2307      	movs	r3, #7
 800334c:	e006      	b.n	800335c <HAL_GPIO_Init+0x204>
 800334e:	2303      	movs	r3, #3
 8003350:	e004      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003352:	2302      	movs	r3, #2
 8003354:	e002      	b.n	800335c <HAL_GPIO_Init+0x204>
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <HAL_GPIO_Init+0x204>
 800335a:	2300      	movs	r3, #0
 800335c:	69fa      	ldr	r2, [r7, #28]
 800335e:	f002 0203 	and.w	r2, r2, #3
 8003362:	0092      	lsls	r2, r2, #2
 8003364:	4093      	lsls	r3, r2
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800336c:	4935      	ldr	r1, [pc, #212]	; (8003444 <HAL_GPIO_Init+0x2ec>)
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	089b      	lsrs	r3, r3, #2
 8003372:	3302      	adds	r3, #2
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337a:	4b38      	ldr	r3, [pc, #224]	; (800345c <HAL_GPIO_Init+0x304>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	43db      	mvns	r3, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4013      	ands	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800339e:	4a2f      	ldr	r2, [pc, #188]	; (800345c <HAL_GPIO_Init+0x304>)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a4:	4b2d      	ldr	r3, [pc, #180]	; (800345c <HAL_GPIO_Init+0x304>)
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033c8:	4a24      	ldr	r2, [pc, #144]	; (800345c <HAL_GPIO_Init+0x304>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033ce:	4b23      	ldr	r3, [pc, #140]	; (800345c <HAL_GPIO_Init+0x304>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <HAL_GPIO_Init+0x304>)
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_GPIO_Init+0x304>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	43db      	mvns	r3, r3
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	4013      	ands	r3, r2
 8003406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800341c:	4a0f      	ldr	r2, [pc, #60]	; (800345c <HAL_GPIO_Init+0x304>)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	3301      	adds	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	f67f aea2 	bls.w	8003174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003430:	bf00      	nop
 8003432:	bf00      	nop
 8003434:	3724      	adds	r7, #36	; 0x24
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800
 8003444:	40013800 	.word	0x40013800
 8003448:	40020000 	.word	0x40020000
 800344c:	40020400 	.word	0x40020400
 8003450:	40020800 	.word	0x40020800
 8003454:	40020c00 	.word	0x40020c00
 8003458:	40021000 	.word	0x40021000
 800345c:	40013c00 	.word	0x40013c00

08003460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	887b      	ldrh	r3, [r7, #2]
 8003472:	4013      	ands	r3, r2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d002      	beq.n	800347e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003478:	2301      	movs	r3, #1
 800347a:	73fb      	strb	r3, [r7, #15]
 800347c:	e001      	b.n	8003482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003482:	7bfb      	ldrb	r3, [r7, #15]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3714      	adds	r7, #20
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	807b      	strh	r3, [r7, #2]
 800349c:	4613      	mov	r3, r2
 800349e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034a0:	787b      	ldrb	r3, [r7, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034a6:	887a      	ldrh	r2, [r7, #2]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034ac:	e003      	b.n	80034b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ae:	887b      	ldrh	r3, [r7, #2]
 80034b0:	041a      	lsls	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	619a      	str	r2, [r3, #24]
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	4603      	mov	r3, r0
 80034cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d006      	beq.n	80034e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034da:	4a05      	ldr	r2, [pc, #20]	; (80034f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034e0:	88fb      	ldrh	r3, [r7, #6]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe fae6 	bl	8001ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40013c00 	.word	0x40013c00

080034f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e267      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d075      	beq.n	80035fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d00c      	beq.n	8003538 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351e:	4b85      	ldr	r3, [pc, #532]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003526:	2b08      	cmp	r3, #8
 8003528:	d112      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800352a:	4b82      	ldr	r3, [pc, #520]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003536:	d10b      	bne.n	8003550 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	4b7e      	ldr	r3, [pc, #504]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05b      	beq.n	80035fc <HAL_RCC_OscConfig+0x108>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d157      	bne.n	80035fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e242      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d106      	bne.n	8003568 <HAL_RCC_OscConfig+0x74>
 800355a:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a75      	ldr	r2, [pc, #468]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0x98>
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a6f      	ldr	r2, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6d      	ldr	r3, [pc, #436]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6c      	ldr	r2, [pc, #432]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xb0>
 800358c:	4b69      	ldr	r3, [pc, #420]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a68      	ldr	r2, [pc, #416]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b66      	ldr	r3, [pc, #408]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a65      	ldr	r2, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7ff fa20 	bl	80029f0 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b4:	f7ff fa1c 	bl	80029f0 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e207      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b5b      	ldr	r3, [pc, #364]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xc0>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7ff fa0c 	bl	80029f0 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035dc:	f7ff fa08 	bl	80029f0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1f3      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	4b51      	ldr	r3, [pc, #324]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0xe8>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003616:	4b47      	ldr	r3, [pc, #284]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003622:	4b44      	ldr	r3, [pc, #272]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c7      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4937      	ldr	r1, [pc, #220]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b34      	ldr	r3, [pc, #208]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366a:	f7ff f9c1 	bl	80029f0 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003672:	f7ff f9bd 	bl	80029f0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1a8      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2b      	ldr	r3, [pc, #172]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b28      	ldr	r3, [pc, #160]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4925      	ldr	r1, [pc, #148]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x244>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ac:	f7ff f9a0 	bl	80029f0 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b4:	f7ff f99c 	bl	80029f0 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e187      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d036      	beq.n	800374c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <HAL_RCC_OscConfig+0x248>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7ff f980 	bl	80029f0 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f4:	f7ff f97c 	bl	80029f0 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e167      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_OscConfig+0x240>)
 8003708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x200>
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <HAL_RCC_OscConfig+0x248>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371a:	f7ff f969 	bl	80029f0 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003720:	e00e      	b.n	8003740 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003722:	f7ff f965 	bl	80029f0 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d907      	bls.n	8003740 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e150      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003734:	40023800 	.word	0x40023800
 8003738:	42470000 	.word	0x42470000
 800373c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003740:	4b88      	ldr	r3, [pc, #544]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003744:	f003 0302 	and.w	r3, r3, #2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ea      	bne.n	8003722 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8097 	beq.w	8003888 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375e:	4b81      	ldr	r3, [pc, #516]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10f      	bne.n	800378a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a7c      	ldr	r2, [pc, #496]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003786:	2301      	movs	r3, #1
 8003788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b77      	ldr	r3, [pc, #476]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d118      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b74      	ldr	r3, [pc, #464]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a73      	ldr	r2, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7ff f925 	bl	80029f0 <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7ff f921 	bl	80029f0 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e10c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b6a      	ldr	r3, [pc, #424]	; (8003968 <HAL_RCC_OscConfig+0x474>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d106      	bne.n	80037de <HAL_RCC_OscConfig+0x2ea>
 80037d0:	4b64      	ldr	r3, [pc, #400]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a63      	ldr	r2, [pc, #396]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
 80037dc:	e01c      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b05      	cmp	r3, #5
 80037e4:	d10c      	bne.n	8003800 <HAL_RCC_OscConfig+0x30c>
 80037e6:	4b5f      	ldr	r3, [pc, #380]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a5e      	ldr	r2, [pc, #376]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
 80037f2:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a5b      	ldr	r2, [pc, #364]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e00b      	b.n	8003818 <HAL_RCC_OscConfig+0x324>
 8003800:	4b58      	ldr	r3, [pc, #352]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6713      	str	r3, [r2, #112]	; 0x70
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800380e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003810:	4a54      	ldr	r2, [pc, #336]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003812:	f023 0304 	bic.w	r3, r3, #4
 8003816:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d015      	beq.n	800384c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003820:	f7ff f8e6 	bl	80029f0 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003826:	e00a      	b.n	800383e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003828:	f7ff f8e2 	bl	80029f0 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	f241 3288 	movw	r2, #5000	; 0x1388
 8003836:	4293      	cmp	r3, r2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e0cb      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383e:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ee      	beq.n	8003828 <HAL_RCC_OscConfig+0x334>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384c:	f7ff f8d0 	bl	80029f0 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003852:	e00a      	b.n	800386a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003854:	f7ff f8cc 	bl	80029f0 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e0b5      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386e:	f003 0302 	and.w	r3, r3, #2
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1ee      	bne.n	8003854 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387c:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	4a38      	ldr	r2, [pc, #224]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003882:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003886:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80a1 	beq.w	80039d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003892:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b08      	cmp	r3, #8
 800389c:	d05c      	beq.n	8003958 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d141      	bne.n	800392a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a6:	4b31      	ldr	r3, [pc, #196]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ac:	f7ff f8a0 	bl	80029f0 <HAL_GetTick>
 80038b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b4:	f7ff f89c 	bl	80029f0 <HAL_GetTick>
 80038b8:	4602      	mov	r2, r0
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	1ad3      	subs	r3, r2, r3
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e087      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1f0      	bne.n	80038b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	69da      	ldr	r2, [r3, #28]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	019b      	lsls	r3, r3, #6
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e8:	085b      	lsrs	r3, r3, #1
 80038ea:	3b01      	subs	r3, #1
 80038ec:	041b      	lsls	r3, r3, #16
 80038ee:	431a      	orrs	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f4:	061b      	lsls	r3, r3, #24
 80038f6:	491b      	ldr	r1, [pc, #108]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x478>)
 80038fe:	2201      	movs	r2, #1
 8003900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003902:	f7ff f875 	bl	80029f0 <HAL_GetTick>
 8003906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003908:	e008      	b.n	800391c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800390a:	f7ff f871 	bl	80029f0 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	2b02      	cmp	r3, #2
 8003916:	d901      	bls.n	800391c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e05c      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800391c:	4b11      	ldr	r3, [pc, #68]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0f0      	beq.n	800390a <HAL_RCC_OscConfig+0x416>
 8003928:	e054      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <HAL_RCC_OscConfig+0x478>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7ff f85e 	bl	80029f0 <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003938:	f7ff f85a 	bl	80029f0 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e045      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <HAL_RCC_OscConfig+0x470>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1f0      	bne.n	8003938 <HAL_RCC_OscConfig+0x444>
 8003956:	e03d      	b.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d107      	bne.n	8003970 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e038      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
 8003964:	40023800 	.word	0x40023800
 8003968:	40007000 	.word	0x40007000
 800396c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x4ec>)
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d028      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d121      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d11a      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039a0:	4013      	ands	r3, r2
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d111      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	3b01      	subs	r3, #1
 80039ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039bc:	429a      	cmp	r2, r3
 80039be:	d107      	bne.n	80039d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3718      	adds	r7, #24
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800

080039e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0cc      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b68      	ldr	r3, [pc, #416]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0307 	and.w	r3, r3, #7
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d90c      	bls.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b65      	ldr	r3, [pc, #404]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b63      	ldr	r3, [pc, #396]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e0b8      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d020      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a38:	4b59      	ldr	r3, [pc, #356]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	4a58      	ldr	r2, [pc, #352]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d005      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a50:	4b53      	ldr	r3, [pc, #332]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4a52      	ldr	r2, [pc, #328]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a5c:	4b50      	ldr	r3, [pc, #320]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	494d      	ldr	r1, [pc, #308]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d044      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d107      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d119      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e07f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa2:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e067      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ac2:	4b37      	ldr	r3, [pc, #220]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f023 0203 	bic.w	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4934      	ldr	r1, [pc, #208]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad4:	f7fe ff8c 	bl	80029f0 <HAL_GetTick>
 8003ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	e00a      	b.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003adc:	f7fe ff88 	bl	80029f0 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e04f      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 020c 	and.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d1eb      	bne.n	8003adc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b04:	4b25      	ldr	r3, [pc, #148]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d20c      	bcs.n	8003b2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b12:	4b22      	ldr	r3, [pc, #136]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d001      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e032      	b.n	8003b92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0304 	and.w	r3, r3, #4
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d008      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b38:	4b19      	ldr	r3, [pc, #100]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	4916      	ldr	r1, [pc, #88]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0308 	and.w	r3, r3, #8
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	490e      	ldr	r1, [pc, #56]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b6a:	f000 f821 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	091b      	lsrs	r3, r3, #4
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	490a      	ldr	r1, [pc, #40]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c0>)
 8003b7c:	5ccb      	ldrb	r3, [r1, r3]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	4a09      	ldr	r2, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c4>)
 8003b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b86:	4b09      	ldr	r3, [pc, #36]	; (8003bac <HAL_RCC_ClockConfig+0x1c8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe feec 	bl	8002968 <HAL_InitTick>

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40023c00 	.word	0x40023c00
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	08006260 	.word	0x08006260
 8003ba8:	20000170 	.word	0x20000170
 8003bac:	20000174 	.word	0x20000174

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b094      	sub	sp, #80	; 0x50
 8003bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	647b      	str	r3, [r7, #68]	; 0x44
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc8:	4b79      	ldr	r3, [pc, #484]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 030c 	and.w	r3, r3, #12
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d00d      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bd4:	2b08      	cmp	r3, #8
 8003bd6:	f200 80e1 	bhi.w	8003d9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bde:	2b04      	cmp	r3, #4
 8003be0:	d003      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0x3a>
 8003be2:	e0db      	b.n	8003d9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4b73      	ldr	r3, [pc, #460]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003be6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003be8:	e0db      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bee:	e0d8      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4b6f      	ldr	r3, [pc, #444]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4b6d      	ldr	r3, [pc, #436]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d063      	beq.n	8003cce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c18:	633b      	str	r3, [r7, #48]	; 0x30
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c22:	4622      	mov	r2, r4
 8003c24:	462b      	mov	r3, r5
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	0159      	lsls	r1, r3, #5
 8003c30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c34:	0150      	lsls	r0, r2, #5
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	1a51      	subs	r1, r2, r1
 8003c3e:	6139      	str	r1, [r7, #16]
 8003c40:	4629      	mov	r1, r5
 8003c42:	eb63 0301 	sbc.w	r3, r3, r1
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c54:	4659      	mov	r1, fp
 8003c56:	018b      	lsls	r3, r1, #6
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c5e:	4651      	mov	r1, sl
 8003c60:	018a      	lsls	r2, r1, #6
 8003c62:	4651      	mov	r1, sl
 8003c64:	ebb2 0801 	subs.w	r8, r2, r1
 8003c68:	4659      	mov	r1, fp
 8003c6a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c82:	4690      	mov	r8, r2
 8003c84:	4699      	mov	r9, r3
 8003c86:	4623      	mov	r3, r4
 8003c88:	eb18 0303 	adds.w	r3, r8, r3
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	462b      	mov	r3, r5
 8003c90:	eb49 0303 	adc.w	r3, r9, r3
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	024b      	lsls	r3, r1, #9
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cac:	4621      	mov	r1, r4
 8003cae:	024a      	lsls	r2, r1, #9
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cc0:	f7fc ff6a 	bl	8000b98 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ccc:	e058      	b.n	8003d80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	4611      	mov	r1, r2
 8003cda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce8:	4642      	mov	r2, r8
 8003cea:	464b      	mov	r3, r9
 8003cec:	f04f 0000 	mov.w	r0, #0
 8003cf0:	f04f 0100 	mov.w	r1, #0
 8003cf4:	0159      	lsls	r1, r3, #5
 8003cf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfa:	0150      	lsls	r0, r2, #5
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4641      	mov	r1, r8
 8003d02:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d06:	4649      	mov	r1, r9
 8003d08:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d0c:	f04f 0200 	mov.w	r2, #0
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d20:	ebb2 040a 	subs.w	r4, r2, sl
 8003d24:	eb63 050b 	sbc.w	r5, r3, fp
 8003d28:	f04f 0200 	mov.w	r2, #0
 8003d2c:	f04f 0300 	mov.w	r3, #0
 8003d30:	00eb      	lsls	r3, r5, #3
 8003d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d36:	00e2      	lsls	r2, r4, #3
 8003d38:	4614      	mov	r4, r2
 8003d3a:	461d      	mov	r5, r3
 8003d3c:	4643      	mov	r3, r8
 8003d3e:	18e3      	adds	r3, r4, r3
 8003d40:	603b      	str	r3, [r7, #0]
 8003d42:	464b      	mov	r3, r9
 8003d44:	eb45 0303 	adc.w	r3, r5, r3
 8003d48:	607b      	str	r3, [r7, #4]
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d56:	4629      	mov	r1, r5
 8003d58:	028b      	lsls	r3, r1, #10
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d60:	4621      	mov	r1, r4
 8003d62:	028a      	lsls	r2, r1, #10
 8003d64:	4610      	mov	r0, r2
 8003d66:	4619      	mov	r1, r3
 8003d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	61bb      	str	r3, [r7, #24]
 8003d6e:	61fa      	str	r2, [r7, #28]
 8003d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d74:	f7fc ff10 	bl	8000b98 <__aeabi_uldivmod>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0c1b      	lsrs	r3, r3, #16
 8003d86:	f003 0303 	and.w	r3, r3, #3
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003d90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d9a:	e002      	b.n	8003da2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d9c:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003da0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3750      	adds	r7, #80	; 0x50
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	007a1200 	.word	0x007a1200

08003dbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07b      	b.n	8003ec6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d108      	bne.n	8003de8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dde:	d009      	beq.n	8003df4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	61da      	str	r2, [r3, #28]
 8003de6:	e005      	b.n	8003df4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fe fc00 	bl	8002614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e78:	ea42 0103 	orr.w	r1, r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	f003 0104 	and.w	r1, r3, #4
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0210 	and.w	r2, r3, #16
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ece:	b580      	push	{r7, lr}
 8003ed0:	b088      	sub	sp, #32
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	603b      	str	r3, [r7, #0]
 8003eda:	4613      	mov	r3, r2
 8003edc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_SPI_Transmit+0x22>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e126      	b.n	800413e <HAL_SPI_Transmit+0x270>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ef8:	f7fe fd7a 	bl	80029f0 <HAL_GetTick>
 8003efc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003efe:	88fb      	ldrh	r3, [r7, #6]
 8003f00:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f12:	e10b      	b.n	800412c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_SPI_Transmit+0x52>
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f24:	e102      	b.n	800412c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2203      	movs	r2, #3
 8003f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	88fa      	ldrh	r2, [r7, #6]
 8003f44:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2200      	movs	r2, #0
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6c:	d10f      	bne.n	8003f8e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f8c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d007      	beq.n	8003fac <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003faa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb4:	d14b      	bne.n	800404e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d002      	beq.n	8003fc4 <HAL_SPI_Transmit+0xf6>
 8003fbe:	8afb      	ldrh	r3, [r7, #22]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d13e      	bne.n	8004042 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	881a      	ldrh	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	1c9a      	adds	r2, r3, #2
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003fe8:	e02b      	b.n	8004042 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d112      	bne.n	800401e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	881a      	ldrh	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004008:	1c9a      	adds	r2, r3, #2
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	86da      	strh	r2, [r3, #54]	; 0x36
 800401c:	e011      	b.n	8004042 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800401e:	f7fe fce7 	bl	80029f0 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d803      	bhi.n	8004036 <HAL_SPI_Transmit+0x168>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d102      	bne.n	800403c <HAL_SPI_Transmit+0x16e>
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d102      	bne.n	8004042 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004040:	e074      	b.n	800412c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1ce      	bne.n	8003fea <HAL_SPI_Transmit+0x11c>
 800404c:	e04c      	b.n	80040e8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_SPI_Transmit+0x18e>
 8004056:	8afb      	ldrh	r3, [r7, #22]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d140      	bne.n	80040de <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004082:	e02c      	b.n	80040de <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b02      	cmp	r3, #2
 8004090:	d113      	bne.n	80040ba <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	7812      	ldrb	r2, [r2, #0]
 800409e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040b8:	e011      	b.n	80040de <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ba:	f7fe fc99 	bl	80029f0 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d803      	bhi.n	80040d2 <HAL_SPI_Transmit+0x204>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d102      	bne.n	80040d8 <HAL_SPI_Transmit+0x20a>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040dc:	e026      	b.n	800412c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1cd      	bne.n	8004084 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	6839      	ldr	r1, [r7, #0]
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8b3 	bl	8004258 <SPI_EndRxTxTransaction>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d002      	beq.n	80040fe <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d10a      	bne.n	800411c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004106:	2300      	movs	r3, #0
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	613b      	str	r3, [r7, #16]
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e000      	b.n	800412c <HAL_SPI_Transmit+0x25e>
  }

error:
 800412a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800413c:	7ffb      	ldrb	r3, [r7, #31]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af00      	add	r7, sp, #0
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	60b9      	str	r1, [r7, #8]
 8004152:	603b      	str	r3, [r7, #0]
 8004154:	4613      	mov	r3, r2
 8004156:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004158:	f7fe fc4a 	bl	80029f0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	683a      	ldr	r2, [r7, #0]
 8004164:	4413      	add	r3, r2
 8004166:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004168:	f7fe fc42 	bl	80029f0 <HAL_GetTick>
 800416c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	015b      	lsls	r3, r3, #5
 8004174:	0d1b      	lsrs	r3, r3, #20
 8004176:	69fa      	ldr	r2, [r7, #28]
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800417e:	e054      	b.n	800422a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004186:	d050      	beq.n	800422a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004188:	f7fe fc32 	bl	80029f0 <HAL_GetTick>
 800418c:	4602      	mov	r2, r0
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	69fa      	ldr	r2, [r7, #28]
 8004194:	429a      	cmp	r2, r3
 8004196:	d902      	bls.n	800419e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d13d      	bne.n	800421a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80041ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041b6:	d111      	bne.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c0:	d004      	beq.n	80041cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ca:	d107      	bne.n	80041dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041e4:	d10f      	bne.n	8004206 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e017      	b.n	800424a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	3b01      	subs	r3, #1
 8004228:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4013      	ands	r3, r2
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	429a      	cmp	r2, r3
 8004238:	bf0c      	ite	eq
 800423a:	2301      	moveq	r3, #1
 800423c:	2300      	movne	r3, #0
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	429a      	cmp	r2, r3
 8004246:	d19b      	bne.n	8004180 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3720      	adds	r7, #32
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000170 	.word	0x20000170

08004258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <SPI_EndRxTxTransaction+0x7c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <SPI_EndRxTxTransaction+0x80>)
 800426a:	fba2 2303 	umull	r2, r3, r2, r3
 800426e:	0d5b      	lsrs	r3, r3, #21
 8004270:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004282:	d112      	bne.n	80042aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	9300      	str	r3, [sp, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2200      	movs	r2, #0
 800428c:	2180      	movs	r1, #128	; 0x80
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f7ff ff5a 	bl	8004148 <SPI_WaitFlagStateUntilTimeout>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d016      	beq.n	80042c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429e:	f043 0220 	orr.w	r2, r3, #32
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e00f      	b.n	80042ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b80      	cmp	r3, #128	; 0x80
 80042c2:	d0f2      	beq.n	80042aa <SPI_EndRxTxTransaction+0x52>
 80042c4:	e000      	b.n	80042c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80042c6:	bf00      	nop
  }

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000170 	.word	0x20000170
 80042d8:	165e9f81 	.word	0x165e9f81

080042dc <__errno>:
 80042dc:	4b01      	ldr	r3, [pc, #4]	; (80042e4 <__errno+0x8>)
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000017c 	.word	0x2000017c

080042e8 <__libc_init_array>:
 80042e8:	b570      	push	{r4, r5, r6, lr}
 80042ea:	4d0d      	ldr	r5, [pc, #52]	; (8004320 <__libc_init_array+0x38>)
 80042ec:	4c0d      	ldr	r4, [pc, #52]	; (8004324 <__libc_init_array+0x3c>)
 80042ee:	1b64      	subs	r4, r4, r5
 80042f0:	10a4      	asrs	r4, r4, #2
 80042f2:	2600      	movs	r6, #0
 80042f4:	42a6      	cmp	r6, r4
 80042f6:	d109      	bne.n	800430c <__libc_init_array+0x24>
 80042f8:	4d0b      	ldr	r5, [pc, #44]	; (8004328 <__libc_init_array+0x40>)
 80042fa:	4c0c      	ldr	r4, [pc, #48]	; (800432c <__libc_init_array+0x44>)
 80042fc:	f001 ffa2 	bl	8006244 <_init>
 8004300:	1b64      	subs	r4, r4, r5
 8004302:	10a4      	asrs	r4, r4, #2
 8004304:	2600      	movs	r6, #0
 8004306:	42a6      	cmp	r6, r4
 8004308:	d105      	bne.n	8004316 <__libc_init_array+0x2e>
 800430a:	bd70      	pop	{r4, r5, r6, pc}
 800430c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004310:	4798      	blx	r3
 8004312:	3601      	adds	r6, #1
 8004314:	e7ee      	b.n	80042f4 <__libc_init_array+0xc>
 8004316:	f855 3b04 	ldr.w	r3, [r5], #4
 800431a:	4798      	blx	r3
 800431c:	3601      	adds	r6, #1
 800431e:	e7f2      	b.n	8004306 <__libc_init_array+0x1e>
 8004320:	080063f0 	.word	0x080063f0
 8004324:	080063f0 	.word	0x080063f0
 8004328:	080063f0 	.word	0x080063f0
 800432c:	080063f4 	.word	0x080063f4

08004330 <memset>:
 8004330:	4402      	add	r2, r0
 8004332:	4603      	mov	r3, r0
 8004334:	4293      	cmp	r3, r2
 8004336:	d100      	bne.n	800433a <memset+0xa>
 8004338:	4770      	bx	lr
 800433a:	f803 1b01 	strb.w	r1, [r3], #1
 800433e:	e7f9      	b.n	8004334 <memset+0x4>

08004340 <srand>:
 8004340:	b538      	push	{r3, r4, r5, lr}
 8004342:	4b10      	ldr	r3, [pc, #64]	; (8004384 <srand+0x44>)
 8004344:	681d      	ldr	r5, [r3, #0]
 8004346:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004348:	4604      	mov	r4, r0
 800434a:	b9b3      	cbnz	r3, 800437a <srand+0x3a>
 800434c:	2018      	movs	r0, #24
 800434e:	f000 f893 	bl	8004478 <malloc>
 8004352:	4602      	mov	r2, r0
 8004354:	63a8      	str	r0, [r5, #56]	; 0x38
 8004356:	b920      	cbnz	r0, 8004362 <srand+0x22>
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <srand+0x48>)
 800435a:	480c      	ldr	r0, [pc, #48]	; (800438c <srand+0x4c>)
 800435c:	2142      	movs	r1, #66	; 0x42
 800435e:	f000 f85b 	bl	8004418 <__assert_func>
 8004362:	490b      	ldr	r1, [pc, #44]	; (8004390 <srand+0x50>)
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <srand+0x54>)
 8004366:	e9c0 1300 	strd	r1, r3, [r0]
 800436a:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <srand+0x58>)
 800436c:	6083      	str	r3, [r0, #8]
 800436e:	230b      	movs	r3, #11
 8004370:	8183      	strh	r3, [r0, #12]
 8004372:	2100      	movs	r1, #0
 8004374:	2001      	movs	r0, #1
 8004376:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800437a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800437c:	2200      	movs	r2, #0
 800437e:	611c      	str	r4, [r3, #16]
 8004380:	615a      	str	r2, [r3, #20]
 8004382:	bd38      	pop	{r3, r4, r5, pc}
 8004384:	2000017c 	.word	0x2000017c
 8004388:	08006274 	.word	0x08006274
 800438c:	0800628b 	.word	0x0800628b
 8004390:	abcd330e 	.word	0xabcd330e
 8004394:	e66d1234 	.word	0xe66d1234
 8004398:	0005deec 	.word	0x0005deec

0800439c <rand>:
 800439c:	4b16      	ldr	r3, [pc, #88]	; (80043f8 <rand+0x5c>)
 800439e:	b510      	push	{r4, lr}
 80043a0:	681c      	ldr	r4, [r3, #0]
 80043a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80043a4:	b9b3      	cbnz	r3, 80043d4 <rand+0x38>
 80043a6:	2018      	movs	r0, #24
 80043a8:	f000 f866 	bl	8004478 <malloc>
 80043ac:	63a0      	str	r0, [r4, #56]	; 0x38
 80043ae:	b928      	cbnz	r0, 80043bc <rand+0x20>
 80043b0:	4602      	mov	r2, r0
 80043b2:	4b12      	ldr	r3, [pc, #72]	; (80043fc <rand+0x60>)
 80043b4:	4812      	ldr	r0, [pc, #72]	; (8004400 <rand+0x64>)
 80043b6:	214e      	movs	r1, #78	; 0x4e
 80043b8:	f000 f82e 	bl	8004418 <__assert_func>
 80043bc:	4a11      	ldr	r2, [pc, #68]	; (8004404 <rand+0x68>)
 80043be:	4b12      	ldr	r3, [pc, #72]	; (8004408 <rand+0x6c>)
 80043c0:	e9c0 2300 	strd	r2, r3, [r0]
 80043c4:	4b11      	ldr	r3, [pc, #68]	; (800440c <rand+0x70>)
 80043c6:	6083      	str	r3, [r0, #8]
 80043c8:	230b      	movs	r3, #11
 80043ca:	8183      	strh	r3, [r0, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	2300      	movs	r3, #0
 80043d0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80043d4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80043d6:	4a0e      	ldr	r2, [pc, #56]	; (8004410 <rand+0x74>)
 80043d8:	6920      	ldr	r0, [r4, #16]
 80043da:	6963      	ldr	r3, [r4, #20]
 80043dc:	490d      	ldr	r1, [pc, #52]	; (8004414 <rand+0x78>)
 80043de:	4342      	muls	r2, r0
 80043e0:	fb01 2203 	mla	r2, r1, r3, r2
 80043e4:	fba0 0101 	umull	r0, r1, r0, r1
 80043e8:	1c43      	adds	r3, r0, #1
 80043ea:	eb42 0001 	adc.w	r0, r2, r1
 80043ee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80043f2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80043f6:	bd10      	pop	{r4, pc}
 80043f8:	2000017c 	.word	0x2000017c
 80043fc:	08006274 	.word	0x08006274
 8004400:	0800628b 	.word	0x0800628b
 8004404:	abcd330e 	.word	0xabcd330e
 8004408:	e66d1234 	.word	0xe66d1234
 800440c:	0005deec 	.word	0x0005deec
 8004410:	5851f42d 	.word	0x5851f42d
 8004414:	4c957f2d 	.word	0x4c957f2d

08004418 <__assert_func>:
 8004418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800441a:	4614      	mov	r4, r2
 800441c:	461a      	mov	r2, r3
 800441e:	4b09      	ldr	r3, [pc, #36]	; (8004444 <__assert_func+0x2c>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4605      	mov	r5, r0
 8004424:	68d8      	ldr	r0, [r3, #12]
 8004426:	b14c      	cbz	r4, 800443c <__assert_func+0x24>
 8004428:	4b07      	ldr	r3, [pc, #28]	; (8004448 <__assert_func+0x30>)
 800442a:	9100      	str	r1, [sp, #0]
 800442c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004430:	4906      	ldr	r1, [pc, #24]	; (800444c <__assert_func+0x34>)
 8004432:	462b      	mov	r3, r5
 8004434:	f000 f80e 	bl	8004454 <fiprintf>
 8004438:	f000 fcc4 	bl	8004dc4 <abort>
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <__assert_func+0x38>)
 800443e:	461c      	mov	r4, r3
 8004440:	e7f3      	b.n	800442a <__assert_func+0x12>
 8004442:	bf00      	nop
 8004444:	2000017c 	.word	0x2000017c
 8004448:	080062e6 	.word	0x080062e6
 800444c:	080062f3 	.word	0x080062f3
 8004450:	08006321 	.word	0x08006321

08004454 <fiprintf>:
 8004454:	b40e      	push	{r1, r2, r3}
 8004456:	b503      	push	{r0, r1, lr}
 8004458:	4601      	mov	r1, r0
 800445a:	ab03      	add	r3, sp, #12
 800445c:	4805      	ldr	r0, [pc, #20]	; (8004474 <fiprintf+0x20>)
 800445e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004462:	6800      	ldr	r0, [r0, #0]
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	f000 f919 	bl	800469c <_vfiprintf_r>
 800446a:	b002      	add	sp, #8
 800446c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004470:	b003      	add	sp, #12
 8004472:	4770      	bx	lr
 8004474:	2000017c 	.word	0x2000017c

08004478 <malloc>:
 8004478:	4b02      	ldr	r3, [pc, #8]	; (8004484 <malloc+0xc>)
 800447a:	4601      	mov	r1, r0
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f000 b86f 	b.w	8004560 <_malloc_r>
 8004482:	bf00      	nop
 8004484:	2000017c 	.word	0x2000017c

08004488 <_free_r>:
 8004488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800448a:	2900      	cmp	r1, #0
 800448c:	d044      	beq.n	8004518 <_free_r+0x90>
 800448e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004492:	9001      	str	r0, [sp, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f1a1 0404 	sub.w	r4, r1, #4
 800449a:	bfb8      	it	lt
 800449c:	18e4      	addlt	r4, r4, r3
 800449e:	f000 feb9 	bl	8005214 <__malloc_lock>
 80044a2:	4a1e      	ldr	r2, [pc, #120]	; (800451c <_free_r+0x94>)
 80044a4:	9801      	ldr	r0, [sp, #4]
 80044a6:	6813      	ldr	r3, [r2, #0]
 80044a8:	b933      	cbnz	r3, 80044b8 <_free_r+0x30>
 80044aa:	6063      	str	r3, [r4, #4]
 80044ac:	6014      	str	r4, [r2, #0]
 80044ae:	b003      	add	sp, #12
 80044b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044b4:	f000 beb4 	b.w	8005220 <__malloc_unlock>
 80044b8:	42a3      	cmp	r3, r4
 80044ba:	d908      	bls.n	80044ce <_free_r+0x46>
 80044bc:	6825      	ldr	r5, [r4, #0]
 80044be:	1961      	adds	r1, r4, r5
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf01      	itttt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	1949      	addeq	r1, r1, r5
 80044ca:	6021      	streq	r1, [r4, #0]
 80044cc:	e7ed      	b.n	80044aa <_free_r+0x22>
 80044ce:	461a      	mov	r2, r3
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	b10b      	cbz	r3, 80044d8 <_free_r+0x50>
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	d9fa      	bls.n	80044ce <_free_r+0x46>
 80044d8:	6811      	ldr	r1, [r2, #0]
 80044da:	1855      	adds	r5, r2, r1
 80044dc:	42a5      	cmp	r5, r4
 80044de:	d10b      	bne.n	80044f8 <_free_r+0x70>
 80044e0:	6824      	ldr	r4, [r4, #0]
 80044e2:	4421      	add	r1, r4
 80044e4:	1854      	adds	r4, r2, r1
 80044e6:	42a3      	cmp	r3, r4
 80044e8:	6011      	str	r1, [r2, #0]
 80044ea:	d1e0      	bne.n	80044ae <_free_r+0x26>
 80044ec:	681c      	ldr	r4, [r3, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	6053      	str	r3, [r2, #4]
 80044f2:	4421      	add	r1, r4
 80044f4:	6011      	str	r1, [r2, #0]
 80044f6:	e7da      	b.n	80044ae <_free_r+0x26>
 80044f8:	d902      	bls.n	8004500 <_free_r+0x78>
 80044fa:	230c      	movs	r3, #12
 80044fc:	6003      	str	r3, [r0, #0]
 80044fe:	e7d6      	b.n	80044ae <_free_r+0x26>
 8004500:	6825      	ldr	r5, [r4, #0]
 8004502:	1961      	adds	r1, r4, r5
 8004504:	428b      	cmp	r3, r1
 8004506:	bf04      	itt	eq
 8004508:	6819      	ldreq	r1, [r3, #0]
 800450a:	685b      	ldreq	r3, [r3, #4]
 800450c:	6063      	str	r3, [r4, #4]
 800450e:	bf04      	itt	eq
 8004510:	1949      	addeq	r1, r1, r5
 8004512:	6021      	streq	r1, [r4, #0]
 8004514:	6054      	str	r4, [r2, #4]
 8004516:	e7ca      	b.n	80044ae <_free_r+0x26>
 8004518:	b003      	add	sp, #12
 800451a:	bd30      	pop	{r4, r5, pc}
 800451c:	20000378 	.word	0x20000378

08004520 <sbrk_aligned>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4e0e      	ldr	r6, [pc, #56]	; (800455c <sbrk_aligned+0x3c>)
 8004524:	460c      	mov	r4, r1
 8004526:	6831      	ldr	r1, [r6, #0]
 8004528:	4605      	mov	r5, r0
 800452a:	b911      	cbnz	r1, 8004532 <sbrk_aligned+0x12>
 800452c:	f000 fb7a 	bl	8004c24 <_sbrk_r>
 8004530:	6030      	str	r0, [r6, #0]
 8004532:	4621      	mov	r1, r4
 8004534:	4628      	mov	r0, r5
 8004536:	f000 fb75 	bl	8004c24 <_sbrk_r>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	d00a      	beq.n	8004554 <sbrk_aligned+0x34>
 800453e:	1cc4      	adds	r4, r0, #3
 8004540:	f024 0403 	bic.w	r4, r4, #3
 8004544:	42a0      	cmp	r0, r4
 8004546:	d007      	beq.n	8004558 <sbrk_aligned+0x38>
 8004548:	1a21      	subs	r1, r4, r0
 800454a:	4628      	mov	r0, r5
 800454c:	f000 fb6a 	bl	8004c24 <_sbrk_r>
 8004550:	3001      	adds	r0, #1
 8004552:	d101      	bne.n	8004558 <sbrk_aligned+0x38>
 8004554:	f04f 34ff 	mov.w	r4, #4294967295
 8004558:	4620      	mov	r0, r4
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	2000037c 	.word	0x2000037c

08004560 <_malloc_r>:
 8004560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004564:	1ccd      	adds	r5, r1, #3
 8004566:	f025 0503 	bic.w	r5, r5, #3
 800456a:	3508      	adds	r5, #8
 800456c:	2d0c      	cmp	r5, #12
 800456e:	bf38      	it	cc
 8004570:	250c      	movcc	r5, #12
 8004572:	2d00      	cmp	r5, #0
 8004574:	4607      	mov	r7, r0
 8004576:	db01      	blt.n	800457c <_malloc_r+0x1c>
 8004578:	42a9      	cmp	r1, r5
 800457a:	d905      	bls.n	8004588 <_malloc_r+0x28>
 800457c:	230c      	movs	r3, #12
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	2600      	movs	r6, #0
 8004582:	4630      	mov	r0, r6
 8004584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004588:	4e2e      	ldr	r6, [pc, #184]	; (8004644 <_malloc_r+0xe4>)
 800458a:	f000 fe43 	bl	8005214 <__malloc_lock>
 800458e:	6833      	ldr	r3, [r6, #0]
 8004590:	461c      	mov	r4, r3
 8004592:	bb34      	cbnz	r4, 80045e2 <_malloc_r+0x82>
 8004594:	4629      	mov	r1, r5
 8004596:	4638      	mov	r0, r7
 8004598:	f7ff ffc2 	bl	8004520 <sbrk_aligned>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	4604      	mov	r4, r0
 80045a0:	d14d      	bne.n	800463e <_malloc_r+0xde>
 80045a2:	6834      	ldr	r4, [r6, #0]
 80045a4:	4626      	mov	r6, r4
 80045a6:	2e00      	cmp	r6, #0
 80045a8:	d140      	bne.n	800462c <_malloc_r+0xcc>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	4631      	mov	r1, r6
 80045ae:	4638      	mov	r0, r7
 80045b0:	eb04 0803 	add.w	r8, r4, r3
 80045b4:	f000 fb36 	bl	8004c24 <_sbrk_r>
 80045b8:	4580      	cmp	r8, r0
 80045ba:	d13a      	bne.n	8004632 <_malloc_r+0xd2>
 80045bc:	6821      	ldr	r1, [r4, #0]
 80045be:	3503      	adds	r5, #3
 80045c0:	1a6d      	subs	r5, r5, r1
 80045c2:	f025 0503 	bic.w	r5, r5, #3
 80045c6:	3508      	adds	r5, #8
 80045c8:	2d0c      	cmp	r5, #12
 80045ca:	bf38      	it	cc
 80045cc:	250c      	movcc	r5, #12
 80045ce:	4629      	mov	r1, r5
 80045d0:	4638      	mov	r0, r7
 80045d2:	f7ff ffa5 	bl	8004520 <sbrk_aligned>
 80045d6:	3001      	adds	r0, #1
 80045d8:	d02b      	beq.n	8004632 <_malloc_r+0xd2>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	442b      	add	r3, r5
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	e00e      	b.n	8004600 <_malloc_r+0xa0>
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	1b52      	subs	r2, r2, r5
 80045e6:	d41e      	bmi.n	8004626 <_malloc_r+0xc6>
 80045e8:	2a0b      	cmp	r2, #11
 80045ea:	d916      	bls.n	800461a <_malloc_r+0xba>
 80045ec:	1961      	adds	r1, r4, r5
 80045ee:	42a3      	cmp	r3, r4
 80045f0:	6025      	str	r5, [r4, #0]
 80045f2:	bf18      	it	ne
 80045f4:	6059      	strne	r1, [r3, #4]
 80045f6:	6863      	ldr	r3, [r4, #4]
 80045f8:	bf08      	it	eq
 80045fa:	6031      	streq	r1, [r6, #0]
 80045fc:	5162      	str	r2, [r4, r5]
 80045fe:	604b      	str	r3, [r1, #4]
 8004600:	4638      	mov	r0, r7
 8004602:	f104 060b 	add.w	r6, r4, #11
 8004606:	f000 fe0b 	bl	8005220 <__malloc_unlock>
 800460a:	f026 0607 	bic.w	r6, r6, #7
 800460e:	1d23      	adds	r3, r4, #4
 8004610:	1af2      	subs	r2, r6, r3
 8004612:	d0b6      	beq.n	8004582 <_malloc_r+0x22>
 8004614:	1b9b      	subs	r3, r3, r6
 8004616:	50a3      	str	r3, [r4, r2]
 8004618:	e7b3      	b.n	8004582 <_malloc_r+0x22>
 800461a:	6862      	ldr	r2, [r4, #4]
 800461c:	42a3      	cmp	r3, r4
 800461e:	bf0c      	ite	eq
 8004620:	6032      	streq	r2, [r6, #0]
 8004622:	605a      	strne	r2, [r3, #4]
 8004624:	e7ec      	b.n	8004600 <_malloc_r+0xa0>
 8004626:	4623      	mov	r3, r4
 8004628:	6864      	ldr	r4, [r4, #4]
 800462a:	e7b2      	b.n	8004592 <_malloc_r+0x32>
 800462c:	4634      	mov	r4, r6
 800462e:	6876      	ldr	r6, [r6, #4]
 8004630:	e7b9      	b.n	80045a6 <_malloc_r+0x46>
 8004632:	230c      	movs	r3, #12
 8004634:	603b      	str	r3, [r7, #0]
 8004636:	4638      	mov	r0, r7
 8004638:	f000 fdf2 	bl	8005220 <__malloc_unlock>
 800463c:	e7a1      	b.n	8004582 <_malloc_r+0x22>
 800463e:	6025      	str	r5, [r4, #0]
 8004640:	e7de      	b.n	8004600 <_malloc_r+0xa0>
 8004642:	bf00      	nop
 8004644:	20000378 	.word	0x20000378

08004648 <__sfputc_r>:
 8004648:	6893      	ldr	r3, [r2, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	b410      	push	{r4}
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	da08      	bge.n	8004666 <__sfputc_r+0x1e>
 8004654:	6994      	ldr	r4, [r2, #24]
 8004656:	42a3      	cmp	r3, r4
 8004658:	db01      	blt.n	800465e <__sfputc_r+0x16>
 800465a:	290a      	cmp	r1, #10
 800465c:	d103      	bne.n	8004666 <__sfputc_r+0x1e>
 800465e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004662:	f000 baef 	b.w	8004c44 <__swbuf_r>
 8004666:	6813      	ldr	r3, [r2, #0]
 8004668:	1c58      	adds	r0, r3, #1
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	7019      	strb	r1, [r3, #0]
 800466e:	4608      	mov	r0, r1
 8004670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004674:	4770      	bx	lr

08004676 <__sfputs_r>:
 8004676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004678:	4606      	mov	r6, r0
 800467a:	460f      	mov	r7, r1
 800467c:	4614      	mov	r4, r2
 800467e:	18d5      	adds	r5, r2, r3
 8004680:	42ac      	cmp	r4, r5
 8004682:	d101      	bne.n	8004688 <__sfputs_r+0x12>
 8004684:	2000      	movs	r0, #0
 8004686:	e007      	b.n	8004698 <__sfputs_r+0x22>
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	463a      	mov	r2, r7
 800468e:	4630      	mov	r0, r6
 8004690:	f7ff ffda 	bl	8004648 <__sfputc_r>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d1f3      	bne.n	8004680 <__sfputs_r+0xa>
 8004698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800469c <_vfiprintf_r>:
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	460d      	mov	r5, r1
 80046a2:	b09d      	sub	sp, #116	; 0x74
 80046a4:	4614      	mov	r4, r2
 80046a6:	4698      	mov	r8, r3
 80046a8:	4606      	mov	r6, r0
 80046aa:	b118      	cbz	r0, 80046b4 <_vfiprintf_r+0x18>
 80046ac:	6983      	ldr	r3, [r0, #24]
 80046ae:	b90b      	cbnz	r3, 80046b4 <_vfiprintf_r+0x18>
 80046b0:	f000 fcaa 	bl	8005008 <__sinit>
 80046b4:	4b89      	ldr	r3, [pc, #548]	; (80048dc <_vfiprintf_r+0x240>)
 80046b6:	429d      	cmp	r5, r3
 80046b8:	d11b      	bne.n	80046f2 <_vfiprintf_r+0x56>
 80046ba:	6875      	ldr	r5, [r6, #4]
 80046bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046be:	07d9      	lsls	r1, r3, #31
 80046c0:	d405      	bmi.n	80046ce <_vfiprintf_r+0x32>
 80046c2:	89ab      	ldrh	r3, [r5, #12]
 80046c4:	059a      	lsls	r2, r3, #22
 80046c6:	d402      	bmi.n	80046ce <_vfiprintf_r+0x32>
 80046c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046ca:	f000 fd3b 	bl	8005144 <__retarget_lock_acquire_recursive>
 80046ce:	89ab      	ldrh	r3, [r5, #12]
 80046d0:	071b      	lsls	r3, r3, #28
 80046d2:	d501      	bpl.n	80046d8 <_vfiprintf_r+0x3c>
 80046d4:	692b      	ldr	r3, [r5, #16]
 80046d6:	b9eb      	cbnz	r3, 8004714 <_vfiprintf_r+0x78>
 80046d8:	4629      	mov	r1, r5
 80046da:	4630      	mov	r0, r6
 80046dc:	f000 fb04 	bl	8004ce8 <__swsetup_r>
 80046e0:	b1c0      	cbz	r0, 8004714 <_vfiprintf_r+0x78>
 80046e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046e4:	07dc      	lsls	r4, r3, #31
 80046e6:	d50e      	bpl.n	8004706 <_vfiprintf_r+0x6a>
 80046e8:	f04f 30ff 	mov.w	r0, #4294967295
 80046ec:	b01d      	add	sp, #116	; 0x74
 80046ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046f2:	4b7b      	ldr	r3, [pc, #492]	; (80048e0 <_vfiprintf_r+0x244>)
 80046f4:	429d      	cmp	r5, r3
 80046f6:	d101      	bne.n	80046fc <_vfiprintf_r+0x60>
 80046f8:	68b5      	ldr	r5, [r6, #8]
 80046fa:	e7df      	b.n	80046bc <_vfiprintf_r+0x20>
 80046fc:	4b79      	ldr	r3, [pc, #484]	; (80048e4 <_vfiprintf_r+0x248>)
 80046fe:	429d      	cmp	r5, r3
 8004700:	bf08      	it	eq
 8004702:	68f5      	ldreq	r5, [r6, #12]
 8004704:	e7da      	b.n	80046bc <_vfiprintf_r+0x20>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	0598      	lsls	r0, r3, #22
 800470a:	d4ed      	bmi.n	80046e8 <_vfiprintf_r+0x4c>
 800470c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800470e:	f000 fd1a 	bl	8005146 <__retarget_lock_release_recursive>
 8004712:	e7e9      	b.n	80046e8 <_vfiprintf_r+0x4c>
 8004714:	2300      	movs	r3, #0
 8004716:	9309      	str	r3, [sp, #36]	; 0x24
 8004718:	2320      	movs	r3, #32
 800471a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800471e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004722:	2330      	movs	r3, #48	; 0x30
 8004724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80048e8 <_vfiprintf_r+0x24c>
 8004728:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800472c:	f04f 0901 	mov.w	r9, #1
 8004730:	4623      	mov	r3, r4
 8004732:	469a      	mov	sl, r3
 8004734:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004738:	b10a      	cbz	r2, 800473e <_vfiprintf_r+0xa2>
 800473a:	2a25      	cmp	r2, #37	; 0x25
 800473c:	d1f9      	bne.n	8004732 <_vfiprintf_r+0x96>
 800473e:	ebba 0b04 	subs.w	fp, sl, r4
 8004742:	d00b      	beq.n	800475c <_vfiprintf_r+0xc0>
 8004744:	465b      	mov	r3, fp
 8004746:	4622      	mov	r2, r4
 8004748:	4629      	mov	r1, r5
 800474a:	4630      	mov	r0, r6
 800474c:	f7ff ff93 	bl	8004676 <__sfputs_r>
 8004750:	3001      	adds	r0, #1
 8004752:	f000 80aa 	beq.w	80048aa <_vfiprintf_r+0x20e>
 8004756:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004758:	445a      	add	r2, fp
 800475a:	9209      	str	r2, [sp, #36]	; 0x24
 800475c:	f89a 3000 	ldrb.w	r3, [sl]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80a2 	beq.w	80048aa <_vfiprintf_r+0x20e>
 8004766:	2300      	movs	r3, #0
 8004768:	f04f 32ff 	mov.w	r2, #4294967295
 800476c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004770:	f10a 0a01 	add.w	sl, sl, #1
 8004774:	9304      	str	r3, [sp, #16]
 8004776:	9307      	str	r3, [sp, #28]
 8004778:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800477c:	931a      	str	r3, [sp, #104]	; 0x68
 800477e:	4654      	mov	r4, sl
 8004780:	2205      	movs	r2, #5
 8004782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004786:	4858      	ldr	r0, [pc, #352]	; (80048e8 <_vfiprintf_r+0x24c>)
 8004788:	f7fb fd2a 	bl	80001e0 <memchr>
 800478c:	9a04      	ldr	r2, [sp, #16]
 800478e:	b9d8      	cbnz	r0, 80047c8 <_vfiprintf_r+0x12c>
 8004790:	06d1      	lsls	r1, r2, #27
 8004792:	bf44      	itt	mi
 8004794:	2320      	movmi	r3, #32
 8004796:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800479a:	0713      	lsls	r3, r2, #28
 800479c:	bf44      	itt	mi
 800479e:	232b      	movmi	r3, #43	; 0x2b
 80047a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047a4:	f89a 3000 	ldrb.w	r3, [sl]
 80047a8:	2b2a      	cmp	r3, #42	; 0x2a
 80047aa:	d015      	beq.n	80047d8 <_vfiprintf_r+0x13c>
 80047ac:	9a07      	ldr	r2, [sp, #28]
 80047ae:	4654      	mov	r4, sl
 80047b0:	2000      	movs	r0, #0
 80047b2:	f04f 0c0a 	mov.w	ip, #10
 80047b6:	4621      	mov	r1, r4
 80047b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047bc:	3b30      	subs	r3, #48	; 0x30
 80047be:	2b09      	cmp	r3, #9
 80047c0:	d94e      	bls.n	8004860 <_vfiprintf_r+0x1c4>
 80047c2:	b1b0      	cbz	r0, 80047f2 <_vfiprintf_r+0x156>
 80047c4:	9207      	str	r2, [sp, #28]
 80047c6:	e014      	b.n	80047f2 <_vfiprintf_r+0x156>
 80047c8:	eba0 0308 	sub.w	r3, r0, r8
 80047cc:	fa09 f303 	lsl.w	r3, r9, r3
 80047d0:	4313      	orrs	r3, r2
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	46a2      	mov	sl, r4
 80047d6:	e7d2      	b.n	800477e <_vfiprintf_r+0xe2>
 80047d8:	9b03      	ldr	r3, [sp, #12]
 80047da:	1d19      	adds	r1, r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	9103      	str	r1, [sp, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bfbb      	ittet	lt
 80047e4:	425b      	neglt	r3, r3
 80047e6:	f042 0202 	orrlt.w	r2, r2, #2
 80047ea:	9307      	strge	r3, [sp, #28]
 80047ec:	9307      	strlt	r3, [sp, #28]
 80047ee:	bfb8      	it	lt
 80047f0:	9204      	strlt	r2, [sp, #16]
 80047f2:	7823      	ldrb	r3, [r4, #0]
 80047f4:	2b2e      	cmp	r3, #46	; 0x2e
 80047f6:	d10c      	bne.n	8004812 <_vfiprintf_r+0x176>
 80047f8:	7863      	ldrb	r3, [r4, #1]
 80047fa:	2b2a      	cmp	r3, #42	; 0x2a
 80047fc:	d135      	bne.n	800486a <_vfiprintf_r+0x1ce>
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	9203      	str	r2, [sp, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	bfb8      	it	lt
 800480a:	f04f 33ff 	movlt.w	r3, #4294967295
 800480e:	3402      	adds	r4, #2
 8004810:	9305      	str	r3, [sp, #20]
 8004812:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80048f8 <_vfiprintf_r+0x25c>
 8004816:	7821      	ldrb	r1, [r4, #0]
 8004818:	2203      	movs	r2, #3
 800481a:	4650      	mov	r0, sl
 800481c:	f7fb fce0 	bl	80001e0 <memchr>
 8004820:	b140      	cbz	r0, 8004834 <_vfiprintf_r+0x198>
 8004822:	2340      	movs	r3, #64	; 0x40
 8004824:	eba0 000a 	sub.w	r0, r0, sl
 8004828:	fa03 f000 	lsl.w	r0, r3, r0
 800482c:	9b04      	ldr	r3, [sp, #16]
 800482e:	4303      	orrs	r3, r0
 8004830:	3401      	adds	r4, #1
 8004832:	9304      	str	r3, [sp, #16]
 8004834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004838:	482c      	ldr	r0, [pc, #176]	; (80048ec <_vfiprintf_r+0x250>)
 800483a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800483e:	2206      	movs	r2, #6
 8004840:	f7fb fcce 	bl	80001e0 <memchr>
 8004844:	2800      	cmp	r0, #0
 8004846:	d03f      	beq.n	80048c8 <_vfiprintf_r+0x22c>
 8004848:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <_vfiprintf_r+0x254>)
 800484a:	bb1b      	cbnz	r3, 8004894 <_vfiprintf_r+0x1f8>
 800484c:	9b03      	ldr	r3, [sp, #12]
 800484e:	3307      	adds	r3, #7
 8004850:	f023 0307 	bic.w	r3, r3, #7
 8004854:	3308      	adds	r3, #8
 8004856:	9303      	str	r3, [sp, #12]
 8004858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800485a:	443b      	add	r3, r7
 800485c:	9309      	str	r3, [sp, #36]	; 0x24
 800485e:	e767      	b.n	8004730 <_vfiprintf_r+0x94>
 8004860:	fb0c 3202 	mla	r2, ip, r2, r3
 8004864:	460c      	mov	r4, r1
 8004866:	2001      	movs	r0, #1
 8004868:	e7a5      	b.n	80047b6 <_vfiprintf_r+0x11a>
 800486a:	2300      	movs	r3, #0
 800486c:	3401      	adds	r4, #1
 800486e:	9305      	str	r3, [sp, #20]
 8004870:	4619      	mov	r1, r3
 8004872:	f04f 0c0a 	mov.w	ip, #10
 8004876:	4620      	mov	r0, r4
 8004878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800487c:	3a30      	subs	r2, #48	; 0x30
 800487e:	2a09      	cmp	r2, #9
 8004880:	d903      	bls.n	800488a <_vfiprintf_r+0x1ee>
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0c5      	beq.n	8004812 <_vfiprintf_r+0x176>
 8004886:	9105      	str	r1, [sp, #20]
 8004888:	e7c3      	b.n	8004812 <_vfiprintf_r+0x176>
 800488a:	fb0c 2101 	mla	r1, ip, r1, r2
 800488e:	4604      	mov	r4, r0
 8004890:	2301      	movs	r3, #1
 8004892:	e7f0      	b.n	8004876 <_vfiprintf_r+0x1da>
 8004894:	ab03      	add	r3, sp, #12
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	462a      	mov	r2, r5
 800489a:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <_vfiprintf_r+0x258>)
 800489c:	a904      	add	r1, sp, #16
 800489e:	4630      	mov	r0, r6
 80048a0:	f3af 8000 	nop.w
 80048a4:	4607      	mov	r7, r0
 80048a6:	1c78      	adds	r0, r7, #1
 80048a8:	d1d6      	bne.n	8004858 <_vfiprintf_r+0x1bc>
 80048aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048ac:	07d9      	lsls	r1, r3, #31
 80048ae:	d405      	bmi.n	80048bc <_vfiprintf_r+0x220>
 80048b0:	89ab      	ldrh	r3, [r5, #12]
 80048b2:	059a      	lsls	r2, r3, #22
 80048b4:	d402      	bmi.n	80048bc <_vfiprintf_r+0x220>
 80048b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80048b8:	f000 fc45 	bl	8005146 <__retarget_lock_release_recursive>
 80048bc:	89ab      	ldrh	r3, [r5, #12]
 80048be:	065b      	lsls	r3, r3, #25
 80048c0:	f53f af12 	bmi.w	80046e8 <_vfiprintf_r+0x4c>
 80048c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048c6:	e711      	b.n	80046ec <_vfiprintf_r+0x50>
 80048c8:	ab03      	add	r3, sp, #12
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	462a      	mov	r2, r5
 80048ce:	4b09      	ldr	r3, [pc, #36]	; (80048f4 <_vfiprintf_r+0x258>)
 80048d0:	a904      	add	r1, sp, #16
 80048d2:	4630      	mov	r0, r6
 80048d4:	f000 f880 	bl	80049d8 <_printf_i>
 80048d8:	e7e4      	b.n	80048a4 <_vfiprintf_r+0x208>
 80048da:	bf00      	nop
 80048dc:	08006378 	.word	0x08006378
 80048e0:	08006398 	.word	0x08006398
 80048e4:	08006358 	.word	0x08006358
 80048e8:	08006322 	.word	0x08006322
 80048ec:	0800632c 	.word	0x0800632c
 80048f0:	00000000 	.word	0x00000000
 80048f4:	08004677 	.word	0x08004677
 80048f8:	08006328 	.word	0x08006328

080048fc <_printf_common>:
 80048fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004900:	4616      	mov	r6, r2
 8004902:	4699      	mov	r9, r3
 8004904:	688a      	ldr	r2, [r1, #8]
 8004906:	690b      	ldr	r3, [r1, #16]
 8004908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800490c:	4293      	cmp	r3, r2
 800490e:	bfb8      	it	lt
 8004910:	4613      	movlt	r3, r2
 8004912:	6033      	str	r3, [r6, #0]
 8004914:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004918:	4607      	mov	r7, r0
 800491a:	460c      	mov	r4, r1
 800491c:	b10a      	cbz	r2, 8004922 <_printf_common+0x26>
 800491e:	3301      	adds	r3, #1
 8004920:	6033      	str	r3, [r6, #0]
 8004922:	6823      	ldr	r3, [r4, #0]
 8004924:	0699      	lsls	r1, r3, #26
 8004926:	bf42      	ittt	mi
 8004928:	6833      	ldrmi	r3, [r6, #0]
 800492a:	3302      	addmi	r3, #2
 800492c:	6033      	strmi	r3, [r6, #0]
 800492e:	6825      	ldr	r5, [r4, #0]
 8004930:	f015 0506 	ands.w	r5, r5, #6
 8004934:	d106      	bne.n	8004944 <_printf_common+0x48>
 8004936:	f104 0a19 	add.w	sl, r4, #25
 800493a:	68e3      	ldr	r3, [r4, #12]
 800493c:	6832      	ldr	r2, [r6, #0]
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	42ab      	cmp	r3, r5
 8004942:	dc26      	bgt.n	8004992 <_printf_common+0x96>
 8004944:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004948:	1e13      	subs	r3, r2, #0
 800494a:	6822      	ldr	r2, [r4, #0]
 800494c:	bf18      	it	ne
 800494e:	2301      	movne	r3, #1
 8004950:	0692      	lsls	r2, r2, #26
 8004952:	d42b      	bmi.n	80049ac <_printf_common+0xb0>
 8004954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	47c0      	blx	r8
 800495e:	3001      	adds	r0, #1
 8004960:	d01e      	beq.n	80049a0 <_printf_common+0xa4>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	68e5      	ldr	r5, [r4, #12]
 8004966:	6832      	ldr	r2, [r6, #0]
 8004968:	f003 0306 	and.w	r3, r3, #6
 800496c:	2b04      	cmp	r3, #4
 800496e:	bf08      	it	eq
 8004970:	1aad      	subeq	r5, r5, r2
 8004972:	68a3      	ldr	r3, [r4, #8]
 8004974:	6922      	ldr	r2, [r4, #16]
 8004976:	bf0c      	ite	eq
 8004978:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800497c:	2500      	movne	r5, #0
 800497e:	4293      	cmp	r3, r2
 8004980:	bfc4      	itt	gt
 8004982:	1a9b      	subgt	r3, r3, r2
 8004984:	18ed      	addgt	r5, r5, r3
 8004986:	2600      	movs	r6, #0
 8004988:	341a      	adds	r4, #26
 800498a:	42b5      	cmp	r5, r6
 800498c:	d11a      	bne.n	80049c4 <_printf_common+0xc8>
 800498e:	2000      	movs	r0, #0
 8004990:	e008      	b.n	80049a4 <_printf_common+0xa8>
 8004992:	2301      	movs	r3, #1
 8004994:	4652      	mov	r2, sl
 8004996:	4649      	mov	r1, r9
 8004998:	4638      	mov	r0, r7
 800499a:	47c0      	blx	r8
 800499c:	3001      	adds	r0, #1
 800499e:	d103      	bne.n	80049a8 <_printf_common+0xac>
 80049a0:	f04f 30ff 	mov.w	r0, #4294967295
 80049a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a8:	3501      	adds	r5, #1
 80049aa:	e7c6      	b.n	800493a <_printf_common+0x3e>
 80049ac:	18e1      	adds	r1, r4, r3
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	2030      	movs	r0, #48	; 0x30
 80049b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049b6:	4422      	add	r2, r4
 80049b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049c0:	3302      	adds	r3, #2
 80049c2:	e7c7      	b.n	8004954 <_printf_common+0x58>
 80049c4:	2301      	movs	r3, #1
 80049c6:	4622      	mov	r2, r4
 80049c8:	4649      	mov	r1, r9
 80049ca:	4638      	mov	r0, r7
 80049cc:	47c0      	blx	r8
 80049ce:	3001      	adds	r0, #1
 80049d0:	d0e6      	beq.n	80049a0 <_printf_common+0xa4>
 80049d2:	3601      	adds	r6, #1
 80049d4:	e7d9      	b.n	800498a <_printf_common+0x8e>
	...

080049d8 <_printf_i>:
 80049d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049dc:	7e0f      	ldrb	r7, [r1, #24]
 80049de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049e0:	2f78      	cmp	r7, #120	; 0x78
 80049e2:	4691      	mov	r9, r2
 80049e4:	4680      	mov	r8, r0
 80049e6:	460c      	mov	r4, r1
 80049e8:	469a      	mov	sl, r3
 80049ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049ee:	d807      	bhi.n	8004a00 <_printf_i+0x28>
 80049f0:	2f62      	cmp	r7, #98	; 0x62
 80049f2:	d80a      	bhi.n	8004a0a <_printf_i+0x32>
 80049f4:	2f00      	cmp	r7, #0
 80049f6:	f000 80d8 	beq.w	8004baa <_printf_i+0x1d2>
 80049fa:	2f58      	cmp	r7, #88	; 0x58
 80049fc:	f000 80a3 	beq.w	8004b46 <_printf_i+0x16e>
 8004a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a08:	e03a      	b.n	8004a80 <_printf_i+0xa8>
 8004a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a0e:	2b15      	cmp	r3, #21
 8004a10:	d8f6      	bhi.n	8004a00 <_printf_i+0x28>
 8004a12:	a101      	add	r1, pc, #4	; (adr r1, 8004a18 <_printf_i+0x40>)
 8004a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a18:	08004a71 	.word	0x08004a71
 8004a1c:	08004a85 	.word	0x08004a85
 8004a20:	08004a01 	.word	0x08004a01
 8004a24:	08004a01 	.word	0x08004a01
 8004a28:	08004a01 	.word	0x08004a01
 8004a2c:	08004a01 	.word	0x08004a01
 8004a30:	08004a85 	.word	0x08004a85
 8004a34:	08004a01 	.word	0x08004a01
 8004a38:	08004a01 	.word	0x08004a01
 8004a3c:	08004a01 	.word	0x08004a01
 8004a40:	08004a01 	.word	0x08004a01
 8004a44:	08004b91 	.word	0x08004b91
 8004a48:	08004ab5 	.word	0x08004ab5
 8004a4c:	08004b73 	.word	0x08004b73
 8004a50:	08004a01 	.word	0x08004a01
 8004a54:	08004a01 	.word	0x08004a01
 8004a58:	08004bb3 	.word	0x08004bb3
 8004a5c:	08004a01 	.word	0x08004a01
 8004a60:	08004ab5 	.word	0x08004ab5
 8004a64:	08004a01 	.word	0x08004a01
 8004a68:	08004a01 	.word	0x08004a01
 8004a6c:	08004b7b 	.word	0x08004b7b
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	1d1a      	adds	r2, r3, #4
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	602a      	str	r2, [r5, #0]
 8004a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a80:	2301      	movs	r3, #1
 8004a82:	e0a3      	b.n	8004bcc <_printf_i+0x1f4>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	6829      	ldr	r1, [r5, #0]
 8004a88:	0606      	lsls	r6, r0, #24
 8004a8a:	f101 0304 	add.w	r3, r1, #4
 8004a8e:	d50a      	bpl.n	8004aa6 <_printf_i+0xce>
 8004a90:	680e      	ldr	r6, [r1, #0]
 8004a92:	602b      	str	r3, [r5, #0]
 8004a94:	2e00      	cmp	r6, #0
 8004a96:	da03      	bge.n	8004aa0 <_printf_i+0xc8>
 8004a98:	232d      	movs	r3, #45	; 0x2d
 8004a9a:	4276      	negs	r6, r6
 8004a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa0:	485e      	ldr	r0, [pc, #376]	; (8004c1c <_printf_i+0x244>)
 8004aa2:	230a      	movs	r3, #10
 8004aa4:	e019      	b.n	8004ada <_printf_i+0x102>
 8004aa6:	680e      	ldr	r6, [r1, #0]
 8004aa8:	602b      	str	r3, [r5, #0]
 8004aaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004aae:	bf18      	it	ne
 8004ab0:	b236      	sxthne	r6, r6
 8004ab2:	e7ef      	b.n	8004a94 <_printf_i+0xbc>
 8004ab4:	682b      	ldr	r3, [r5, #0]
 8004ab6:	6820      	ldr	r0, [r4, #0]
 8004ab8:	1d19      	adds	r1, r3, #4
 8004aba:	6029      	str	r1, [r5, #0]
 8004abc:	0601      	lsls	r1, r0, #24
 8004abe:	d501      	bpl.n	8004ac4 <_printf_i+0xec>
 8004ac0:	681e      	ldr	r6, [r3, #0]
 8004ac2:	e002      	b.n	8004aca <_printf_i+0xf2>
 8004ac4:	0646      	lsls	r6, r0, #25
 8004ac6:	d5fb      	bpl.n	8004ac0 <_printf_i+0xe8>
 8004ac8:	881e      	ldrh	r6, [r3, #0]
 8004aca:	4854      	ldr	r0, [pc, #336]	; (8004c1c <_printf_i+0x244>)
 8004acc:	2f6f      	cmp	r7, #111	; 0x6f
 8004ace:	bf0c      	ite	eq
 8004ad0:	2308      	moveq	r3, #8
 8004ad2:	230a      	movne	r3, #10
 8004ad4:	2100      	movs	r1, #0
 8004ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ada:	6865      	ldr	r5, [r4, #4]
 8004adc:	60a5      	str	r5, [r4, #8]
 8004ade:	2d00      	cmp	r5, #0
 8004ae0:	bfa2      	ittt	ge
 8004ae2:	6821      	ldrge	r1, [r4, #0]
 8004ae4:	f021 0104 	bicge.w	r1, r1, #4
 8004ae8:	6021      	strge	r1, [r4, #0]
 8004aea:	b90e      	cbnz	r6, 8004af0 <_printf_i+0x118>
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	d04d      	beq.n	8004b8c <_printf_i+0x1b4>
 8004af0:	4615      	mov	r5, r2
 8004af2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004af6:	fb03 6711 	mls	r7, r3, r1, r6
 8004afa:	5dc7      	ldrb	r7, [r0, r7]
 8004afc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004b00:	4637      	mov	r7, r6
 8004b02:	42bb      	cmp	r3, r7
 8004b04:	460e      	mov	r6, r1
 8004b06:	d9f4      	bls.n	8004af2 <_printf_i+0x11a>
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d10b      	bne.n	8004b24 <_printf_i+0x14c>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	07de      	lsls	r6, r3, #31
 8004b10:	d508      	bpl.n	8004b24 <_printf_i+0x14c>
 8004b12:	6923      	ldr	r3, [r4, #16]
 8004b14:	6861      	ldr	r1, [r4, #4]
 8004b16:	4299      	cmp	r1, r3
 8004b18:	bfde      	ittt	le
 8004b1a:	2330      	movle	r3, #48	; 0x30
 8004b1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004b24:	1b52      	subs	r2, r2, r5
 8004b26:	6122      	str	r2, [r4, #16]
 8004b28:	f8cd a000 	str.w	sl, [sp]
 8004b2c:	464b      	mov	r3, r9
 8004b2e:	aa03      	add	r2, sp, #12
 8004b30:	4621      	mov	r1, r4
 8004b32:	4640      	mov	r0, r8
 8004b34:	f7ff fee2 	bl	80048fc <_printf_common>
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d14c      	bne.n	8004bd6 <_printf_i+0x1fe>
 8004b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b40:	b004      	add	sp, #16
 8004b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b46:	4835      	ldr	r0, [pc, #212]	; (8004c1c <_printf_i+0x244>)
 8004b48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004b4c:	6829      	ldr	r1, [r5, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b54:	6029      	str	r1, [r5, #0]
 8004b56:	061d      	lsls	r5, r3, #24
 8004b58:	d514      	bpl.n	8004b84 <_printf_i+0x1ac>
 8004b5a:	07df      	lsls	r7, r3, #31
 8004b5c:	bf44      	itt	mi
 8004b5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004b62:	6023      	strmi	r3, [r4, #0]
 8004b64:	b91e      	cbnz	r6, 8004b6e <_printf_i+0x196>
 8004b66:	6823      	ldr	r3, [r4, #0]
 8004b68:	f023 0320 	bic.w	r3, r3, #32
 8004b6c:	6023      	str	r3, [r4, #0]
 8004b6e:	2310      	movs	r3, #16
 8004b70:	e7b0      	b.n	8004ad4 <_printf_i+0xfc>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	f043 0320 	orr.w	r3, r3, #32
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	2378      	movs	r3, #120	; 0x78
 8004b7c:	4828      	ldr	r0, [pc, #160]	; (8004c20 <_printf_i+0x248>)
 8004b7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b82:	e7e3      	b.n	8004b4c <_printf_i+0x174>
 8004b84:	0659      	lsls	r1, r3, #25
 8004b86:	bf48      	it	mi
 8004b88:	b2b6      	uxthmi	r6, r6
 8004b8a:	e7e6      	b.n	8004b5a <_printf_i+0x182>
 8004b8c:	4615      	mov	r5, r2
 8004b8e:	e7bb      	b.n	8004b08 <_printf_i+0x130>
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	6826      	ldr	r6, [r4, #0]
 8004b94:	6961      	ldr	r1, [r4, #20]
 8004b96:	1d18      	adds	r0, r3, #4
 8004b98:	6028      	str	r0, [r5, #0]
 8004b9a:	0635      	lsls	r5, r6, #24
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	d501      	bpl.n	8004ba4 <_printf_i+0x1cc>
 8004ba0:	6019      	str	r1, [r3, #0]
 8004ba2:	e002      	b.n	8004baa <_printf_i+0x1d2>
 8004ba4:	0670      	lsls	r0, r6, #25
 8004ba6:	d5fb      	bpl.n	8004ba0 <_printf_i+0x1c8>
 8004ba8:	8019      	strh	r1, [r3, #0]
 8004baa:	2300      	movs	r3, #0
 8004bac:	6123      	str	r3, [r4, #16]
 8004bae:	4615      	mov	r5, r2
 8004bb0:	e7ba      	b.n	8004b28 <_printf_i+0x150>
 8004bb2:	682b      	ldr	r3, [r5, #0]
 8004bb4:	1d1a      	adds	r2, r3, #4
 8004bb6:	602a      	str	r2, [r5, #0]
 8004bb8:	681d      	ldr	r5, [r3, #0]
 8004bba:	6862      	ldr	r2, [r4, #4]
 8004bbc:	2100      	movs	r1, #0
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f7fb fb0e 	bl	80001e0 <memchr>
 8004bc4:	b108      	cbz	r0, 8004bca <_printf_i+0x1f2>
 8004bc6:	1b40      	subs	r0, r0, r5
 8004bc8:	6060      	str	r0, [r4, #4]
 8004bca:	6863      	ldr	r3, [r4, #4]
 8004bcc:	6123      	str	r3, [r4, #16]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bd4:	e7a8      	b.n	8004b28 <_printf_i+0x150>
 8004bd6:	6923      	ldr	r3, [r4, #16]
 8004bd8:	462a      	mov	r2, r5
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4640      	mov	r0, r8
 8004bde:	47d0      	blx	sl
 8004be0:	3001      	adds	r0, #1
 8004be2:	d0ab      	beq.n	8004b3c <_printf_i+0x164>
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	079b      	lsls	r3, r3, #30
 8004be8:	d413      	bmi.n	8004c12 <_printf_i+0x23a>
 8004bea:	68e0      	ldr	r0, [r4, #12]
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	4298      	cmp	r0, r3
 8004bf0:	bfb8      	it	lt
 8004bf2:	4618      	movlt	r0, r3
 8004bf4:	e7a4      	b.n	8004b40 <_printf_i+0x168>
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	4632      	mov	r2, r6
 8004bfa:	4649      	mov	r1, r9
 8004bfc:	4640      	mov	r0, r8
 8004bfe:	47d0      	blx	sl
 8004c00:	3001      	adds	r0, #1
 8004c02:	d09b      	beq.n	8004b3c <_printf_i+0x164>
 8004c04:	3501      	adds	r5, #1
 8004c06:	68e3      	ldr	r3, [r4, #12]
 8004c08:	9903      	ldr	r1, [sp, #12]
 8004c0a:	1a5b      	subs	r3, r3, r1
 8004c0c:	42ab      	cmp	r3, r5
 8004c0e:	dcf2      	bgt.n	8004bf6 <_printf_i+0x21e>
 8004c10:	e7eb      	b.n	8004bea <_printf_i+0x212>
 8004c12:	2500      	movs	r5, #0
 8004c14:	f104 0619 	add.w	r6, r4, #25
 8004c18:	e7f5      	b.n	8004c06 <_printf_i+0x22e>
 8004c1a:	bf00      	nop
 8004c1c:	08006333 	.word	0x08006333
 8004c20:	08006344 	.word	0x08006344

08004c24 <_sbrk_r>:
 8004c24:	b538      	push	{r3, r4, r5, lr}
 8004c26:	4d06      	ldr	r5, [pc, #24]	; (8004c40 <_sbrk_r+0x1c>)
 8004c28:	2300      	movs	r3, #0
 8004c2a:	4604      	mov	r4, r0
 8004c2c:	4608      	mov	r0, r1
 8004c2e:	602b      	str	r3, [r5, #0]
 8004c30:	f7fd fe06 	bl	8002840 <_sbrk>
 8004c34:	1c43      	adds	r3, r0, #1
 8004c36:	d102      	bne.n	8004c3e <_sbrk_r+0x1a>
 8004c38:	682b      	ldr	r3, [r5, #0]
 8004c3a:	b103      	cbz	r3, 8004c3e <_sbrk_r+0x1a>
 8004c3c:	6023      	str	r3, [r4, #0]
 8004c3e:	bd38      	pop	{r3, r4, r5, pc}
 8004c40:	20000384 	.word	0x20000384

08004c44 <__swbuf_r>:
 8004c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c46:	460e      	mov	r6, r1
 8004c48:	4614      	mov	r4, r2
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	b118      	cbz	r0, 8004c56 <__swbuf_r+0x12>
 8004c4e:	6983      	ldr	r3, [r0, #24]
 8004c50:	b90b      	cbnz	r3, 8004c56 <__swbuf_r+0x12>
 8004c52:	f000 f9d9 	bl	8005008 <__sinit>
 8004c56:	4b21      	ldr	r3, [pc, #132]	; (8004cdc <__swbuf_r+0x98>)
 8004c58:	429c      	cmp	r4, r3
 8004c5a:	d12b      	bne.n	8004cb4 <__swbuf_r+0x70>
 8004c5c:	686c      	ldr	r4, [r5, #4]
 8004c5e:	69a3      	ldr	r3, [r4, #24]
 8004c60:	60a3      	str	r3, [r4, #8]
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	071a      	lsls	r2, r3, #28
 8004c66:	d52f      	bpl.n	8004cc8 <__swbuf_r+0x84>
 8004c68:	6923      	ldr	r3, [r4, #16]
 8004c6a:	b36b      	cbz	r3, 8004cc8 <__swbuf_r+0x84>
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	6820      	ldr	r0, [r4, #0]
 8004c70:	1ac0      	subs	r0, r0, r3
 8004c72:	6963      	ldr	r3, [r4, #20]
 8004c74:	b2f6      	uxtb	r6, r6
 8004c76:	4283      	cmp	r3, r0
 8004c78:	4637      	mov	r7, r6
 8004c7a:	dc04      	bgt.n	8004c86 <__swbuf_r+0x42>
 8004c7c:	4621      	mov	r1, r4
 8004c7e:	4628      	mov	r0, r5
 8004c80:	f000 f92e 	bl	8004ee0 <_fflush_r>
 8004c84:	bb30      	cbnz	r0, 8004cd4 <__swbuf_r+0x90>
 8004c86:	68a3      	ldr	r3, [r4, #8]
 8004c88:	3b01      	subs	r3, #1
 8004c8a:	60a3      	str	r3, [r4, #8]
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	6022      	str	r2, [r4, #0]
 8004c92:	701e      	strb	r6, [r3, #0]
 8004c94:	6963      	ldr	r3, [r4, #20]
 8004c96:	3001      	adds	r0, #1
 8004c98:	4283      	cmp	r3, r0
 8004c9a:	d004      	beq.n	8004ca6 <__swbuf_r+0x62>
 8004c9c:	89a3      	ldrh	r3, [r4, #12]
 8004c9e:	07db      	lsls	r3, r3, #31
 8004ca0:	d506      	bpl.n	8004cb0 <__swbuf_r+0x6c>
 8004ca2:	2e0a      	cmp	r6, #10
 8004ca4:	d104      	bne.n	8004cb0 <__swbuf_r+0x6c>
 8004ca6:	4621      	mov	r1, r4
 8004ca8:	4628      	mov	r0, r5
 8004caa:	f000 f919 	bl	8004ee0 <_fflush_r>
 8004cae:	b988      	cbnz	r0, 8004cd4 <__swbuf_r+0x90>
 8004cb0:	4638      	mov	r0, r7
 8004cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cb4:	4b0a      	ldr	r3, [pc, #40]	; (8004ce0 <__swbuf_r+0x9c>)
 8004cb6:	429c      	cmp	r4, r3
 8004cb8:	d101      	bne.n	8004cbe <__swbuf_r+0x7a>
 8004cba:	68ac      	ldr	r4, [r5, #8]
 8004cbc:	e7cf      	b.n	8004c5e <__swbuf_r+0x1a>
 8004cbe:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <__swbuf_r+0xa0>)
 8004cc0:	429c      	cmp	r4, r3
 8004cc2:	bf08      	it	eq
 8004cc4:	68ec      	ldreq	r4, [r5, #12]
 8004cc6:	e7ca      	b.n	8004c5e <__swbuf_r+0x1a>
 8004cc8:	4621      	mov	r1, r4
 8004cca:	4628      	mov	r0, r5
 8004ccc:	f000 f80c 	bl	8004ce8 <__swsetup_r>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d0cb      	beq.n	8004c6c <__swbuf_r+0x28>
 8004cd4:	f04f 37ff 	mov.w	r7, #4294967295
 8004cd8:	e7ea      	b.n	8004cb0 <__swbuf_r+0x6c>
 8004cda:	bf00      	nop
 8004cdc:	08006378 	.word	0x08006378
 8004ce0:	08006398 	.word	0x08006398
 8004ce4:	08006358 	.word	0x08006358

08004ce8 <__swsetup_r>:
 8004ce8:	4b32      	ldr	r3, [pc, #200]	; (8004db4 <__swsetup_r+0xcc>)
 8004cea:	b570      	push	{r4, r5, r6, lr}
 8004cec:	681d      	ldr	r5, [r3, #0]
 8004cee:	4606      	mov	r6, r0
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	b125      	cbz	r5, 8004cfe <__swsetup_r+0x16>
 8004cf4:	69ab      	ldr	r3, [r5, #24]
 8004cf6:	b913      	cbnz	r3, 8004cfe <__swsetup_r+0x16>
 8004cf8:	4628      	mov	r0, r5
 8004cfa:	f000 f985 	bl	8005008 <__sinit>
 8004cfe:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <__swsetup_r+0xd0>)
 8004d00:	429c      	cmp	r4, r3
 8004d02:	d10f      	bne.n	8004d24 <__swsetup_r+0x3c>
 8004d04:	686c      	ldr	r4, [r5, #4]
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d0c:	0719      	lsls	r1, r3, #28
 8004d0e:	d42c      	bmi.n	8004d6a <__swsetup_r+0x82>
 8004d10:	06dd      	lsls	r5, r3, #27
 8004d12:	d411      	bmi.n	8004d38 <__swsetup_r+0x50>
 8004d14:	2309      	movs	r3, #9
 8004d16:	6033      	str	r3, [r6, #0]
 8004d18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d1c:	81a3      	strh	r3, [r4, #12]
 8004d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d22:	e03e      	b.n	8004da2 <__swsetup_r+0xba>
 8004d24:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <__swsetup_r+0xd4>)
 8004d26:	429c      	cmp	r4, r3
 8004d28:	d101      	bne.n	8004d2e <__swsetup_r+0x46>
 8004d2a:	68ac      	ldr	r4, [r5, #8]
 8004d2c:	e7eb      	b.n	8004d06 <__swsetup_r+0x1e>
 8004d2e:	4b24      	ldr	r3, [pc, #144]	; (8004dc0 <__swsetup_r+0xd8>)
 8004d30:	429c      	cmp	r4, r3
 8004d32:	bf08      	it	eq
 8004d34:	68ec      	ldreq	r4, [r5, #12]
 8004d36:	e7e6      	b.n	8004d06 <__swsetup_r+0x1e>
 8004d38:	0758      	lsls	r0, r3, #29
 8004d3a:	d512      	bpl.n	8004d62 <__swsetup_r+0x7a>
 8004d3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d3e:	b141      	cbz	r1, 8004d52 <__swsetup_r+0x6a>
 8004d40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d44:	4299      	cmp	r1, r3
 8004d46:	d002      	beq.n	8004d4e <__swsetup_r+0x66>
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7ff fb9d 	bl	8004488 <_free_r>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	6363      	str	r3, [r4, #52]	; 0x34
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6063      	str	r3, [r4, #4]
 8004d5e:	6923      	ldr	r3, [r4, #16]
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	89a3      	ldrh	r3, [r4, #12]
 8004d64:	f043 0308 	orr.w	r3, r3, #8
 8004d68:	81a3      	strh	r3, [r4, #12]
 8004d6a:	6923      	ldr	r3, [r4, #16]
 8004d6c:	b94b      	cbnz	r3, 8004d82 <__swsetup_r+0x9a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d003      	beq.n	8004d82 <__swsetup_r+0x9a>
 8004d7a:	4621      	mov	r1, r4
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 fa09 	bl	8005194 <__smakebuf_r>
 8004d82:	89a0      	ldrh	r0, [r4, #12]
 8004d84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d88:	f010 0301 	ands.w	r3, r0, #1
 8004d8c:	d00a      	beq.n	8004da4 <__swsetup_r+0xbc>
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60a3      	str	r3, [r4, #8]
 8004d92:	6963      	ldr	r3, [r4, #20]
 8004d94:	425b      	negs	r3, r3
 8004d96:	61a3      	str	r3, [r4, #24]
 8004d98:	6923      	ldr	r3, [r4, #16]
 8004d9a:	b943      	cbnz	r3, 8004dae <__swsetup_r+0xc6>
 8004d9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004da0:	d1ba      	bne.n	8004d18 <__swsetup_r+0x30>
 8004da2:	bd70      	pop	{r4, r5, r6, pc}
 8004da4:	0781      	lsls	r1, r0, #30
 8004da6:	bf58      	it	pl
 8004da8:	6963      	ldrpl	r3, [r4, #20]
 8004daa:	60a3      	str	r3, [r4, #8]
 8004dac:	e7f4      	b.n	8004d98 <__swsetup_r+0xb0>
 8004dae:	2000      	movs	r0, #0
 8004db0:	e7f7      	b.n	8004da2 <__swsetup_r+0xba>
 8004db2:	bf00      	nop
 8004db4:	2000017c 	.word	0x2000017c
 8004db8:	08006378 	.word	0x08006378
 8004dbc:	08006398 	.word	0x08006398
 8004dc0:	08006358 	.word	0x08006358

08004dc4 <abort>:
 8004dc4:	b508      	push	{r3, lr}
 8004dc6:	2006      	movs	r0, #6
 8004dc8:	f000 fa58 	bl	800527c <raise>
 8004dcc:	2001      	movs	r0, #1
 8004dce:	f7fd fcc0 	bl	8002752 <_exit>
	...

08004dd4 <__sflush_r>:
 8004dd4:	898a      	ldrh	r2, [r1, #12]
 8004dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dda:	4605      	mov	r5, r0
 8004ddc:	0710      	lsls	r0, r2, #28
 8004dde:	460c      	mov	r4, r1
 8004de0:	d458      	bmi.n	8004e94 <__sflush_r+0xc0>
 8004de2:	684b      	ldr	r3, [r1, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	dc05      	bgt.n	8004df4 <__sflush_r+0x20>
 8004de8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	dc02      	bgt.n	8004df4 <__sflush_r+0x20>
 8004dee:	2000      	movs	r0, #0
 8004df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004df6:	2e00      	cmp	r6, #0
 8004df8:	d0f9      	beq.n	8004dee <__sflush_r+0x1a>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e00:	682f      	ldr	r7, [r5, #0]
 8004e02:	602b      	str	r3, [r5, #0]
 8004e04:	d032      	beq.n	8004e6c <__sflush_r+0x98>
 8004e06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e08:	89a3      	ldrh	r3, [r4, #12]
 8004e0a:	075a      	lsls	r2, r3, #29
 8004e0c:	d505      	bpl.n	8004e1a <__sflush_r+0x46>
 8004e0e:	6863      	ldr	r3, [r4, #4]
 8004e10:	1ac0      	subs	r0, r0, r3
 8004e12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e14:	b10b      	cbz	r3, 8004e1a <__sflush_r+0x46>
 8004e16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e18:	1ac0      	subs	r0, r0, r3
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e20:	6a21      	ldr	r1, [r4, #32]
 8004e22:	4628      	mov	r0, r5
 8004e24:	47b0      	blx	r6
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	89a3      	ldrh	r3, [r4, #12]
 8004e2a:	d106      	bne.n	8004e3a <__sflush_r+0x66>
 8004e2c:	6829      	ldr	r1, [r5, #0]
 8004e2e:	291d      	cmp	r1, #29
 8004e30:	d82c      	bhi.n	8004e8c <__sflush_r+0xb8>
 8004e32:	4a2a      	ldr	r2, [pc, #168]	; (8004edc <__sflush_r+0x108>)
 8004e34:	40ca      	lsrs	r2, r1
 8004e36:	07d6      	lsls	r6, r2, #31
 8004e38:	d528      	bpl.n	8004e8c <__sflush_r+0xb8>
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	6062      	str	r2, [r4, #4]
 8004e3e:	04d9      	lsls	r1, r3, #19
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	6022      	str	r2, [r4, #0]
 8004e44:	d504      	bpl.n	8004e50 <__sflush_r+0x7c>
 8004e46:	1c42      	adds	r2, r0, #1
 8004e48:	d101      	bne.n	8004e4e <__sflush_r+0x7a>
 8004e4a:	682b      	ldr	r3, [r5, #0]
 8004e4c:	b903      	cbnz	r3, 8004e50 <__sflush_r+0x7c>
 8004e4e:	6560      	str	r0, [r4, #84]	; 0x54
 8004e50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e52:	602f      	str	r7, [r5, #0]
 8004e54:	2900      	cmp	r1, #0
 8004e56:	d0ca      	beq.n	8004dee <__sflush_r+0x1a>
 8004e58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e5c:	4299      	cmp	r1, r3
 8004e5e:	d002      	beq.n	8004e66 <__sflush_r+0x92>
 8004e60:	4628      	mov	r0, r5
 8004e62:	f7ff fb11 	bl	8004488 <_free_r>
 8004e66:	2000      	movs	r0, #0
 8004e68:	6360      	str	r0, [r4, #52]	; 0x34
 8004e6a:	e7c1      	b.n	8004df0 <__sflush_r+0x1c>
 8004e6c:	6a21      	ldr	r1, [r4, #32]
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4628      	mov	r0, r5
 8004e72:	47b0      	blx	r6
 8004e74:	1c41      	adds	r1, r0, #1
 8004e76:	d1c7      	bne.n	8004e08 <__sflush_r+0x34>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0c4      	beq.n	8004e08 <__sflush_r+0x34>
 8004e7e:	2b1d      	cmp	r3, #29
 8004e80:	d001      	beq.n	8004e86 <__sflush_r+0xb2>
 8004e82:	2b16      	cmp	r3, #22
 8004e84:	d101      	bne.n	8004e8a <__sflush_r+0xb6>
 8004e86:	602f      	str	r7, [r5, #0]
 8004e88:	e7b1      	b.n	8004dee <__sflush_r+0x1a>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e90:	81a3      	strh	r3, [r4, #12]
 8004e92:	e7ad      	b.n	8004df0 <__sflush_r+0x1c>
 8004e94:	690f      	ldr	r7, [r1, #16]
 8004e96:	2f00      	cmp	r7, #0
 8004e98:	d0a9      	beq.n	8004dee <__sflush_r+0x1a>
 8004e9a:	0793      	lsls	r3, r2, #30
 8004e9c:	680e      	ldr	r6, [r1, #0]
 8004e9e:	bf08      	it	eq
 8004ea0:	694b      	ldreq	r3, [r1, #20]
 8004ea2:	600f      	str	r7, [r1, #0]
 8004ea4:	bf18      	it	ne
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	eba6 0807 	sub.w	r8, r6, r7
 8004eac:	608b      	str	r3, [r1, #8]
 8004eae:	f1b8 0f00 	cmp.w	r8, #0
 8004eb2:	dd9c      	ble.n	8004dee <__sflush_r+0x1a>
 8004eb4:	6a21      	ldr	r1, [r4, #32]
 8004eb6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004eb8:	4643      	mov	r3, r8
 8004eba:	463a      	mov	r2, r7
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b0      	blx	r6
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	dc06      	bgt.n	8004ed2 <__sflush_r+0xfe>
 8004ec4:	89a3      	ldrh	r3, [r4, #12]
 8004ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004eca:	81a3      	strh	r3, [r4, #12]
 8004ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed0:	e78e      	b.n	8004df0 <__sflush_r+0x1c>
 8004ed2:	4407      	add	r7, r0
 8004ed4:	eba8 0800 	sub.w	r8, r8, r0
 8004ed8:	e7e9      	b.n	8004eae <__sflush_r+0xda>
 8004eda:	bf00      	nop
 8004edc:	20400001 	.word	0x20400001

08004ee0 <_fflush_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	690b      	ldr	r3, [r1, #16]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	460c      	mov	r4, r1
 8004ee8:	b913      	cbnz	r3, 8004ef0 <_fflush_r+0x10>
 8004eea:	2500      	movs	r5, #0
 8004eec:	4628      	mov	r0, r5
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	b118      	cbz	r0, 8004efa <_fflush_r+0x1a>
 8004ef2:	6983      	ldr	r3, [r0, #24]
 8004ef4:	b90b      	cbnz	r3, 8004efa <_fflush_r+0x1a>
 8004ef6:	f000 f887 	bl	8005008 <__sinit>
 8004efa:	4b14      	ldr	r3, [pc, #80]	; (8004f4c <_fflush_r+0x6c>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	d11b      	bne.n	8004f38 <_fflush_r+0x58>
 8004f00:	686c      	ldr	r4, [r5, #4]
 8004f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0ef      	beq.n	8004eea <_fflush_r+0xa>
 8004f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f0c:	07d0      	lsls	r0, r2, #31
 8004f0e:	d404      	bmi.n	8004f1a <_fflush_r+0x3a>
 8004f10:	0599      	lsls	r1, r3, #22
 8004f12:	d402      	bmi.n	8004f1a <_fflush_r+0x3a>
 8004f14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f16:	f000 f915 	bl	8005144 <__retarget_lock_acquire_recursive>
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	f7ff ff59 	bl	8004dd4 <__sflush_r>
 8004f22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f24:	07da      	lsls	r2, r3, #31
 8004f26:	4605      	mov	r5, r0
 8004f28:	d4e0      	bmi.n	8004eec <_fflush_r+0xc>
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	059b      	lsls	r3, r3, #22
 8004f2e:	d4dd      	bmi.n	8004eec <_fflush_r+0xc>
 8004f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f32:	f000 f908 	bl	8005146 <__retarget_lock_release_recursive>
 8004f36:	e7d9      	b.n	8004eec <_fflush_r+0xc>
 8004f38:	4b05      	ldr	r3, [pc, #20]	; (8004f50 <_fflush_r+0x70>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	d101      	bne.n	8004f42 <_fflush_r+0x62>
 8004f3e:	68ac      	ldr	r4, [r5, #8]
 8004f40:	e7df      	b.n	8004f02 <_fflush_r+0x22>
 8004f42:	4b04      	ldr	r3, [pc, #16]	; (8004f54 <_fflush_r+0x74>)
 8004f44:	429c      	cmp	r4, r3
 8004f46:	bf08      	it	eq
 8004f48:	68ec      	ldreq	r4, [r5, #12]
 8004f4a:	e7da      	b.n	8004f02 <_fflush_r+0x22>
 8004f4c:	08006378 	.word	0x08006378
 8004f50:	08006398 	.word	0x08006398
 8004f54:	08006358 	.word	0x08006358

08004f58 <std>:
 8004f58:	2300      	movs	r3, #0
 8004f5a:	b510      	push	{r4, lr}
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f66:	6083      	str	r3, [r0, #8]
 8004f68:	8181      	strh	r1, [r0, #12]
 8004f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8004f6c:	81c2      	strh	r2, [r0, #14]
 8004f6e:	6183      	str	r3, [r0, #24]
 8004f70:	4619      	mov	r1, r3
 8004f72:	2208      	movs	r2, #8
 8004f74:	305c      	adds	r0, #92	; 0x5c
 8004f76:	f7ff f9db 	bl	8004330 <memset>
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <std+0x38>)
 8004f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004f7e:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <std+0x3c>)
 8004f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f82:	4b05      	ldr	r3, [pc, #20]	; (8004f98 <std+0x40>)
 8004f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f86:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <std+0x44>)
 8004f88:	6224      	str	r4, [r4, #32]
 8004f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004f8c:	bd10      	pop	{r4, pc}
 8004f8e:	bf00      	nop
 8004f90:	080052b5 	.word	0x080052b5
 8004f94:	080052d7 	.word	0x080052d7
 8004f98:	0800530f 	.word	0x0800530f
 8004f9c:	08005333 	.word	0x08005333

08004fa0 <_cleanup_r>:
 8004fa0:	4901      	ldr	r1, [pc, #4]	; (8004fa8 <_cleanup_r+0x8>)
 8004fa2:	f000 b8af 	b.w	8005104 <_fwalk_reent>
 8004fa6:	bf00      	nop
 8004fa8:	08004ee1 	.word	0x08004ee1

08004fac <__sfmoreglue>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	2268      	movs	r2, #104	; 0x68
 8004fb0:	1e4d      	subs	r5, r1, #1
 8004fb2:	4355      	muls	r5, r2
 8004fb4:	460e      	mov	r6, r1
 8004fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004fba:	f7ff fad1 	bl	8004560 <_malloc_r>
 8004fbe:	4604      	mov	r4, r0
 8004fc0:	b140      	cbz	r0, 8004fd4 <__sfmoreglue+0x28>
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8004fc8:	300c      	adds	r0, #12
 8004fca:	60a0      	str	r0, [r4, #8]
 8004fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fd0:	f7ff f9ae 	bl	8004330 <memset>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}

08004fd8 <__sfp_lock_acquire>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__sfp_lock_acquire+0x8>)
 8004fda:	f000 b8b3 	b.w	8005144 <__retarget_lock_acquire_recursive>
 8004fde:	bf00      	nop
 8004fe0:	20000381 	.word	0x20000381

08004fe4 <__sfp_lock_release>:
 8004fe4:	4801      	ldr	r0, [pc, #4]	; (8004fec <__sfp_lock_release+0x8>)
 8004fe6:	f000 b8ae 	b.w	8005146 <__retarget_lock_release_recursive>
 8004fea:	bf00      	nop
 8004fec:	20000381 	.word	0x20000381

08004ff0 <__sinit_lock_acquire>:
 8004ff0:	4801      	ldr	r0, [pc, #4]	; (8004ff8 <__sinit_lock_acquire+0x8>)
 8004ff2:	f000 b8a7 	b.w	8005144 <__retarget_lock_acquire_recursive>
 8004ff6:	bf00      	nop
 8004ff8:	20000382 	.word	0x20000382

08004ffc <__sinit_lock_release>:
 8004ffc:	4801      	ldr	r0, [pc, #4]	; (8005004 <__sinit_lock_release+0x8>)
 8004ffe:	f000 b8a2 	b.w	8005146 <__retarget_lock_release_recursive>
 8005002:	bf00      	nop
 8005004:	20000382 	.word	0x20000382

08005008 <__sinit>:
 8005008:	b510      	push	{r4, lr}
 800500a:	4604      	mov	r4, r0
 800500c:	f7ff fff0 	bl	8004ff0 <__sinit_lock_acquire>
 8005010:	69a3      	ldr	r3, [r4, #24]
 8005012:	b11b      	cbz	r3, 800501c <__sinit+0x14>
 8005014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005018:	f7ff bff0 	b.w	8004ffc <__sinit_lock_release>
 800501c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005020:	6523      	str	r3, [r4, #80]	; 0x50
 8005022:	4b13      	ldr	r3, [pc, #76]	; (8005070 <__sinit+0x68>)
 8005024:	4a13      	ldr	r2, [pc, #76]	; (8005074 <__sinit+0x6c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	62a2      	str	r2, [r4, #40]	; 0x28
 800502a:	42a3      	cmp	r3, r4
 800502c:	bf04      	itt	eq
 800502e:	2301      	moveq	r3, #1
 8005030:	61a3      	streq	r3, [r4, #24]
 8005032:	4620      	mov	r0, r4
 8005034:	f000 f820 	bl	8005078 <__sfp>
 8005038:	6060      	str	r0, [r4, #4]
 800503a:	4620      	mov	r0, r4
 800503c:	f000 f81c 	bl	8005078 <__sfp>
 8005040:	60a0      	str	r0, [r4, #8]
 8005042:	4620      	mov	r0, r4
 8005044:	f000 f818 	bl	8005078 <__sfp>
 8005048:	2200      	movs	r2, #0
 800504a:	60e0      	str	r0, [r4, #12]
 800504c:	2104      	movs	r1, #4
 800504e:	6860      	ldr	r0, [r4, #4]
 8005050:	f7ff ff82 	bl	8004f58 <std>
 8005054:	68a0      	ldr	r0, [r4, #8]
 8005056:	2201      	movs	r2, #1
 8005058:	2109      	movs	r1, #9
 800505a:	f7ff ff7d 	bl	8004f58 <std>
 800505e:	68e0      	ldr	r0, [r4, #12]
 8005060:	2202      	movs	r2, #2
 8005062:	2112      	movs	r1, #18
 8005064:	f7ff ff78 	bl	8004f58 <std>
 8005068:	2301      	movs	r3, #1
 800506a:	61a3      	str	r3, [r4, #24]
 800506c:	e7d2      	b.n	8005014 <__sinit+0xc>
 800506e:	bf00      	nop
 8005070:	08006270 	.word	0x08006270
 8005074:	08004fa1 	.word	0x08004fa1

08005078 <__sfp>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	4607      	mov	r7, r0
 800507c:	f7ff ffac 	bl	8004fd8 <__sfp_lock_acquire>
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <__sfp+0x84>)
 8005082:	681e      	ldr	r6, [r3, #0]
 8005084:	69b3      	ldr	r3, [r6, #24]
 8005086:	b913      	cbnz	r3, 800508e <__sfp+0x16>
 8005088:	4630      	mov	r0, r6
 800508a:	f7ff ffbd 	bl	8005008 <__sinit>
 800508e:	3648      	adds	r6, #72	; 0x48
 8005090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005094:	3b01      	subs	r3, #1
 8005096:	d503      	bpl.n	80050a0 <__sfp+0x28>
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	b30b      	cbz	r3, 80050e0 <__sfp+0x68>
 800509c:	6836      	ldr	r6, [r6, #0]
 800509e:	e7f7      	b.n	8005090 <__sfp+0x18>
 80050a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80050a4:	b9d5      	cbnz	r5, 80050dc <__sfp+0x64>
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <__sfp+0x88>)
 80050a8:	60e3      	str	r3, [r4, #12]
 80050aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80050ae:	6665      	str	r5, [r4, #100]	; 0x64
 80050b0:	f000 f847 	bl	8005142 <__retarget_lock_init_recursive>
 80050b4:	f7ff ff96 	bl	8004fe4 <__sfp_lock_release>
 80050b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80050bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050c0:	6025      	str	r5, [r4, #0]
 80050c2:	61a5      	str	r5, [r4, #24]
 80050c4:	2208      	movs	r2, #8
 80050c6:	4629      	mov	r1, r5
 80050c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050cc:	f7ff f930 	bl	8004330 <memset>
 80050d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050d8:	4620      	mov	r0, r4
 80050da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050dc:	3468      	adds	r4, #104	; 0x68
 80050de:	e7d9      	b.n	8005094 <__sfp+0x1c>
 80050e0:	2104      	movs	r1, #4
 80050e2:	4638      	mov	r0, r7
 80050e4:	f7ff ff62 	bl	8004fac <__sfmoreglue>
 80050e8:	4604      	mov	r4, r0
 80050ea:	6030      	str	r0, [r6, #0]
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1d5      	bne.n	800509c <__sfp+0x24>
 80050f0:	f7ff ff78 	bl	8004fe4 <__sfp_lock_release>
 80050f4:	230c      	movs	r3, #12
 80050f6:	603b      	str	r3, [r7, #0]
 80050f8:	e7ee      	b.n	80050d8 <__sfp+0x60>
 80050fa:	bf00      	nop
 80050fc:	08006270 	.word	0x08006270
 8005100:	ffff0001 	.word	0xffff0001

08005104 <_fwalk_reent>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4606      	mov	r6, r0
 800510a:	4688      	mov	r8, r1
 800510c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005110:	2700      	movs	r7, #0
 8005112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005116:	f1b9 0901 	subs.w	r9, r9, #1
 800511a:	d505      	bpl.n	8005128 <_fwalk_reent+0x24>
 800511c:	6824      	ldr	r4, [r4, #0]
 800511e:	2c00      	cmp	r4, #0
 8005120:	d1f7      	bne.n	8005112 <_fwalk_reent+0xe>
 8005122:	4638      	mov	r0, r7
 8005124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005128:	89ab      	ldrh	r3, [r5, #12]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d907      	bls.n	800513e <_fwalk_reent+0x3a>
 800512e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005132:	3301      	adds	r3, #1
 8005134:	d003      	beq.n	800513e <_fwalk_reent+0x3a>
 8005136:	4629      	mov	r1, r5
 8005138:	4630      	mov	r0, r6
 800513a:	47c0      	blx	r8
 800513c:	4307      	orrs	r7, r0
 800513e:	3568      	adds	r5, #104	; 0x68
 8005140:	e7e9      	b.n	8005116 <_fwalk_reent+0x12>

08005142 <__retarget_lock_init_recursive>:
 8005142:	4770      	bx	lr

08005144 <__retarget_lock_acquire_recursive>:
 8005144:	4770      	bx	lr

08005146 <__retarget_lock_release_recursive>:
 8005146:	4770      	bx	lr

08005148 <__swhatbuf_r>:
 8005148:	b570      	push	{r4, r5, r6, lr}
 800514a:	460e      	mov	r6, r1
 800514c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005150:	2900      	cmp	r1, #0
 8005152:	b096      	sub	sp, #88	; 0x58
 8005154:	4614      	mov	r4, r2
 8005156:	461d      	mov	r5, r3
 8005158:	da08      	bge.n	800516c <__swhatbuf_r+0x24>
 800515a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	602a      	str	r2, [r5, #0]
 8005162:	061a      	lsls	r2, r3, #24
 8005164:	d410      	bmi.n	8005188 <__swhatbuf_r+0x40>
 8005166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516a:	e00e      	b.n	800518a <__swhatbuf_r+0x42>
 800516c:	466a      	mov	r2, sp
 800516e:	f000 f907 	bl	8005380 <_fstat_r>
 8005172:	2800      	cmp	r0, #0
 8005174:	dbf1      	blt.n	800515a <__swhatbuf_r+0x12>
 8005176:	9a01      	ldr	r2, [sp, #4]
 8005178:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800517c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005180:	425a      	negs	r2, r3
 8005182:	415a      	adcs	r2, r3
 8005184:	602a      	str	r2, [r5, #0]
 8005186:	e7ee      	b.n	8005166 <__swhatbuf_r+0x1e>
 8005188:	2340      	movs	r3, #64	; 0x40
 800518a:	2000      	movs	r0, #0
 800518c:	6023      	str	r3, [r4, #0]
 800518e:	b016      	add	sp, #88	; 0x58
 8005190:	bd70      	pop	{r4, r5, r6, pc}
	...

08005194 <__smakebuf_r>:
 8005194:	898b      	ldrh	r3, [r1, #12]
 8005196:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005198:	079d      	lsls	r5, r3, #30
 800519a:	4606      	mov	r6, r0
 800519c:	460c      	mov	r4, r1
 800519e:	d507      	bpl.n	80051b0 <__smakebuf_r+0x1c>
 80051a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	6123      	str	r3, [r4, #16]
 80051a8:	2301      	movs	r3, #1
 80051aa:	6163      	str	r3, [r4, #20]
 80051ac:	b002      	add	sp, #8
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	ab01      	add	r3, sp, #4
 80051b2:	466a      	mov	r2, sp
 80051b4:	f7ff ffc8 	bl	8005148 <__swhatbuf_r>
 80051b8:	9900      	ldr	r1, [sp, #0]
 80051ba:	4605      	mov	r5, r0
 80051bc:	4630      	mov	r0, r6
 80051be:	f7ff f9cf 	bl	8004560 <_malloc_r>
 80051c2:	b948      	cbnz	r0, 80051d8 <__smakebuf_r+0x44>
 80051c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051c8:	059a      	lsls	r2, r3, #22
 80051ca:	d4ef      	bmi.n	80051ac <__smakebuf_r+0x18>
 80051cc:	f023 0303 	bic.w	r3, r3, #3
 80051d0:	f043 0302 	orr.w	r3, r3, #2
 80051d4:	81a3      	strh	r3, [r4, #12]
 80051d6:	e7e3      	b.n	80051a0 <__smakebuf_r+0xc>
 80051d8:	4b0d      	ldr	r3, [pc, #52]	; (8005210 <__smakebuf_r+0x7c>)
 80051da:	62b3      	str	r3, [r6, #40]	; 0x28
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	6020      	str	r0, [r4, #0]
 80051e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	9b00      	ldr	r3, [sp, #0]
 80051e8:	6163      	str	r3, [r4, #20]
 80051ea:	9b01      	ldr	r3, [sp, #4]
 80051ec:	6120      	str	r0, [r4, #16]
 80051ee:	b15b      	cbz	r3, 8005208 <__smakebuf_r+0x74>
 80051f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f4:	4630      	mov	r0, r6
 80051f6:	f000 f8d5 	bl	80053a4 <_isatty_r>
 80051fa:	b128      	cbz	r0, 8005208 <__smakebuf_r+0x74>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f023 0303 	bic.w	r3, r3, #3
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	89a0      	ldrh	r0, [r4, #12]
 800520a:	4305      	orrs	r5, r0
 800520c:	81a5      	strh	r5, [r4, #12]
 800520e:	e7cd      	b.n	80051ac <__smakebuf_r+0x18>
 8005210:	08004fa1 	.word	0x08004fa1

08005214 <__malloc_lock>:
 8005214:	4801      	ldr	r0, [pc, #4]	; (800521c <__malloc_lock+0x8>)
 8005216:	f7ff bf95 	b.w	8005144 <__retarget_lock_acquire_recursive>
 800521a:	bf00      	nop
 800521c:	20000380 	.word	0x20000380

08005220 <__malloc_unlock>:
 8005220:	4801      	ldr	r0, [pc, #4]	; (8005228 <__malloc_unlock+0x8>)
 8005222:	f7ff bf90 	b.w	8005146 <__retarget_lock_release_recursive>
 8005226:	bf00      	nop
 8005228:	20000380 	.word	0x20000380

0800522c <_raise_r>:
 800522c:	291f      	cmp	r1, #31
 800522e:	b538      	push	{r3, r4, r5, lr}
 8005230:	4604      	mov	r4, r0
 8005232:	460d      	mov	r5, r1
 8005234:	d904      	bls.n	8005240 <_raise_r+0x14>
 8005236:	2316      	movs	r3, #22
 8005238:	6003      	str	r3, [r0, #0]
 800523a:	f04f 30ff 	mov.w	r0, #4294967295
 800523e:	bd38      	pop	{r3, r4, r5, pc}
 8005240:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005242:	b112      	cbz	r2, 800524a <_raise_r+0x1e>
 8005244:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005248:	b94b      	cbnz	r3, 800525e <_raise_r+0x32>
 800524a:	4620      	mov	r0, r4
 800524c:	f000 f830 	bl	80052b0 <_getpid_r>
 8005250:	462a      	mov	r2, r5
 8005252:	4601      	mov	r1, r0
 8005254:	4620      	mov	r0, r4
 8005256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800525a:	f000 b817 	b.w	800528c <_kill_r>
 800525e:	2b01      	cmp	r3, #1
 8005260:	d00a      	beq.n	8005278 <_raise_r+0x4c>
 8005262:	1c59      	adds	r1, r3, #1
 8005264:	d103      	bne.n	800526e <_raise_r+0x42>
 8005266:	2316      	movs	r3, #22
 8005268:	6003      	str	r3, [r0, #0]
 800526a:	2001      	movs	r0, #1
 800526c:	e7e7      	b.n	800523e <_raise_r+0x12>
 800526e:	2400      	movs	r4, #0
 8005270:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005274:	4628      	mov	r0, r5
 8005276:	4798      	blx	r3
 8005278:	2000      	movs	r0, #0
 800527a:	e7e0      	b.n	800523e <_raise_r+0x12>

0800527c <raise>:
 800527c:	4b02      	ldr	r3, [pc, #8]	; (8005288 <raise+0xc>)
 800527e:	4601      	mov	r1, r0
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	f7ff bfd3 	b.w	800522c <_raise_r>
 8005286:	bf00      	nop
 8005288:	2000017c 	.word	0x2000017c

0800528c <_kill_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d07      	ldr	r5, [pc, #28]	; (80052ac <_kill_r+0x20>)
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	4611      	mov	r1, r2
 8005298:	602b      	str	r3, [r5, #0]
 800529a:	f7fd fa4a 	bl	8002732 <_kill>
 800529e:	1c43      	adds	r3, r0, #1
 80052a0:	d102      	bne.n	80052a8 <_kill_r+0x1c>
 80052a2:	682b      	ldr	r3, [r5, #0]
 80052a4:	b103      	cbz	r3, 80052a8 <_kill_r+0x1c>
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	bd38      	pop	{r3, r4, r5, pc}
 80052aa:	bf00      	nop
 80052ac:	20000384 	.word	0x20000384

080052b0 <_getpid_r>:
 80052b0:	f7fd ba37 	b.w	8002722 <_getpid>

080052b4 <__sread>:
 80052b4:	b510      	push	{r4, lr}
 80052b6:	460c      	mov	r4, r1
 80052b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052bc:	f000 f894 	bl	80053e8 <_read_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	bfab      	itete	ge
 80052c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80052c6:	89a3      	ldrhlt	r3, [r4, #12]
 80052c8:	181b      	addge	r3, r3, r0
 80052ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80052ce:	bfac      	ite	ge
 80052d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80052d2:	81a3      	strhlt	r3, [r4, #12]
 80052d4:	bd10      	pop	{r4, pc}

080052d6 <__swrite>:
 80052d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052da:	461f      	mov	r7, r3
 80052dc:	898b      	ldrh	r3, [r1, #12]
 80052de:	05db      	lsls	r3, r3, #23
 80052e0:	4605      	mov	r5, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	4616      	mov	r6, r2
 80052e6:	d505      	bpl.n	80052f4 <__swrite+0x1e>
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	2302      	movs	r3, #2
 80052ee:	2200      	movs	r2, #0
 80052f0:	f000 f868 	bl	80053c4 <_lseek_r>
 80052f4:	89a3      	ldrh	r3, [r4, #12]
 80052f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052fe:	81a3      	strh	r3, [r4, #12]
 8005300:	4632      	mov	r2, r6
 8005302:	463b      	mov	r3, r7
 8005304:	4628      	mov	r0, r5
 8005306:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	f000 b817 	b.w	800533c <_write_r>

0800530e <__sseek>:
 800530e:	b510      	push	{r4, lr}
 8005310:	460c      	mov	r4, r1
 8005312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005316:	f000 f855 	bl	80053c4 <_lseek_r>
 800531a:	1c43      	adds	r3, r0, #1
 800531c:	89a3      	ldrh	r3, [r4, #12]
 800531e:	bf15      	itete	ne
 8005320:	6560      	strne	r0, [r4, #84]	; 0x54
 8005322:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005326:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800532a:	81a3      	strheq	r3, [r4, #12]
 800532c:	bf18      	it	ne
 800532e:	81a3      	strhne	r3, [r4, #12]
 8005330:	bd10      	pop	{r4, pc}

08005332 <__sclose>:
 8005332:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005336:	f000 b813 	b.w	8005360 <_close_r>
	...

0800533c <_write_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d07      	ldr	r5, [pc, #28]	; (800535c <_write_r+0x20>)
 8005340:	4604      	mov	r4, r0
 8005342:	4608      	mov	r0, r1
 8005344:	4611      	mov	r1, r2
 8005346:	2200      	movs	r2, #0
 8005348:	602a      	str	r2, [r5, #0]
 800534a:	461a      	mov	r2, r3
 800534c:	f7fd fa28 	bl	80027a0 <_write>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_write_r+0x1e>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_write_r+0x1e>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20000384 	.word	0x20000384

08005360 <_close_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4d06      	ldr	r5, [pc, #24]	; (800537c <_close_r+0x1c>)
 8005364:	2300      	movs	r3, #0
 8005366:	4604      	mov	r4, r0
 8005368:	4608      	mov	r0, r1
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	f7fd fa34 	bl	80027d8 <_close>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_close_r+0x1a>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_close_r+0x1a>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	20000384 	.word	0x20000384

08005380 <_fstat_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	; (80053a0 <_fstat_r+0x20>)
 8005384:	2300      	movs	r3, #0
 8005386:	4604      	mov	r4, r0
 8005388:	4608      	mov	r0, r1
 800538a:	4611      	mov	r1, r2
 800538c:	602b      	str	r3, [r5, #0]
 800538e:	f7fd fa2f 	bl	80027f0 <_fstat>
 8005392:	1c43      	adds	r3, r0, #1
 8005394:	d102      	bne.n	800539c <_fstat_r+0x1c>
 8005396:	682b      	ldr	r3, [r5, #0]
 8005398:	b103      	cbz	r3, 800539c <_fstat_r+0x1c>
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	bd38      	pop	{r3, r4, r5, pc}
 800539e:	bf00      	nop
 80053a0:	20000384 	.word	0x20000384

080053a4 <_isatty_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d06      	ldr	r5, [pc, #24]	; (80053c0 <_isatty_r+0x1c>)
 80053a8:	2300      	movs	r3, #0
 80053aa:	4604      	mov	r4, r0
 80053ac:	4608      	mov	r0, r1
 80053ae:	602b      	str	r3, [r5, #0]
 80053b0:	f7fd fa2e 	bl	8002810 <_isatty>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_isatty_r+0x1a>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_isatty_r+0x1a>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	20000384 	.word	0x20000384

080053c4 <_lseek_r>:
 80053c4:	b538      	push	{r3, r4, r5, lr}
 80053c6:	4d07      	ldr	r5, [pc, #28]	; (80053e4 <_lseek_r+0x20>)
 80053c8:	4604      	mov	r4, r0
 80053ca:	4608      	mov	r0, r1
 80053cc:	4611      	mov	r1, r2
 80053ce:	2200      	movs	r2, #0
 80053d0:	602a      	str	r2, [r5, #0]
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7fd fa27 	bl	8002826 <_lseek>
 80053d8:	1c43      	adds	r3, r0, #1
 80053da:	d102      	bne.n	80053e2 <_lseek_r+0x1e>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	b103      	cbz	r3, 80053e2 <_lseek_r+0x1e>
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	bd38      	pop	{r3, r4, r5, pc}
 80053e4:	20000384 	.word	0x20000384

080053e8 <_read_r>:
 80053e8:	b538      	push	{r3, r4, r5, lr}
 80053ea:	4d07      	ldr	r5, [pc, #28]	; (8005408 <_read_r+0x20>)
 80053ec:	4604      	mov	r4, r0
 80053ee:	4608      	mov	r0, r1
 80053f0:	4611      	mov	r1, r2
 80053f2:	2200      	movs	r2, #0
 80053f4:	602a      	str	r2, [r5, #0]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7fd f9b5 	bl	8002766 <_read>
 80053fc:	1c43      	adds	r3, r0, #1
 80053fe:	d102      	bne.n	8005406 <_read_r+0x1e>
 8005400:	682b      	ldr	r3, [r5, #0]
 8005402:	b103      	cbz	r3, 8005406 <_read_r+0x1e>
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	bd38      	pop	{r3, r4, r5, pc}
 8005408:	20000384 	.word	0x20000384

0800540c <pow>:
 800540c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540e:	ed2d 8b02 	vpush	{d8}
 8005412:	eeb0 8a40 	vmov.f32	s16, s0
 8005416:	eef0 8a60 	vmov.f32	s17, s1
 800541a:	ec55 4b11 	vmov	r4, r5, d1
 800541e:	f000 f867 	bl	80054f0 <__ieee754_pow>
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	4620      	mov	r0, r4
 8005428:	4629      	mov	r1, r5
 800542a:	ec57 6b10 	vmov	r6, r7, d0
 800542e:	f7fb fb7d 	bl	8000b2c <__aeabi_dcmpun>
 8005432:	2800      	cmp	r0, #0
 8005434:	d13b      	bne.n	80054ae <pow+0xa2>
 8005436:	ec51 0b18 	vmov	r0, r1, d8
 800543a:	2200      	movs	r2, #0
 800543c:	2300      	movs	r3, #0
 800543e:	f7fb fb43 	bl	8000ac8 <__aeabi_dcmpeq>
 8005442:	b1b8      	cbz	r0, 8005474 <pow+0x68>
 8005444:	2200      	movs	r2, #0
 8005446:	2300      	movs	r3, #0
 8005448:	4620      	mov	r0, r4
 800544a:	4629      	mov	r1, r5
 800544c:	f7fb fb3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005450:	2800      	cmp	r0, #0
 8005452:	d146      	bne.n	80054e2 <pow+0xd6>
 8005454:	ec45 4b10 	vmov	d0, r4, r5
 8005458:	f000 fe63 	bl	8006122 <finite>
 800545c:	b338      	cbz	r0, 80054ae <pow+0xa2>
 800545e:	2200      	movs	r2, #0
 8005460:	2300      	movs	r3, #0
 8005462:	4620      	mov	r0, r4
 8005464:	4629      	mov	r1, r5
 8005466:	f7fb fb39 	bl	8000adc <__aeabi_dcmplt>
 800546a:	b300      	cbz	r0, 80054ae <pow+0xa2>
 800546c:	f7fe ff36 	bl	80042dc <__errno>
 8005470:	2322      	movs	r3, #34	; 0x22
 8005472:	e01b      	b.n	80054ac <pow+0xa0>
 8005474:	ec47 6b10 	vmov	d0, r6, r7
 8005478:	f000 fe53 	bl	8006122 <finite>
 800547c:	b9e0      	cbnz	r0, 80054b8 <pow+0xac>
 800547e:	eeb0 0a48 	vmov.f32	s0, s16
 8005482:	eef0 0a68 	vmov.f32	s1, s17
 8005486:	f000 fe4c 	bl	8006122 <finite>
 800548a:	b1a8      	cbz	r0, 80054b8 <pow+0xac>
 800548c:	ec45 4b10 	vmov	d0, r4, r5
 8005490:	f000 fe47 	bl	8006122 <finite>
 8005494:	b180      	cbz	r0, 80054b8 <pow+0xac>
 8005496:	4632      	mov	r2, r6
 8005498:	463b      	mov	r3, r7
 800549a:	4630      	mov	r0, r6
 800549c:	4639      	mov	r1, r7
 800549e:	f7fb fb45 	bl	8000b2c <__aeabi_dcmpun>
 80054a2:	2800      	cmp	r0, #0
 80054a4:	d0e2      	beq.n	800546c <pow+0x60>
 80054a6:	f7fe ff19 	bl	80042dc <__errno>
 80054aa:	2321      	movs	r3, #33	; 0x21
 80054ac:	6003      	str	r3, [r0, #0]
 80054ae:	ecbd 8b02 	vpop	{d8}
 80054b2:	ec47 6b10 	vmov	d0, r6, r7
 80054b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b8:	2200      	movs	r2, #0
 80054ba:	2300      	movs	r3, #0
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb fb02 	bl	8000ac8 <__aeabi_dcmpeq>
 80054c4:	2800      	cmp	r0, #0
 80054c6:	d0f2      	beq.n	80054ae <pow+0xa2>
 80054c8:	eeb0 0a48 	vmov.f32	s0, s16
 80054cc:	eef0 0a68 	vmov.f32	s1, s17
 80054d0:	f000 fe27 	bl	8006122 <finite>
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d0ea      	beq.n	80054ae <pow+0xa2>
 80054d8:	ec45 4b10 	vmov	d0, r4, r5
 80054dc:	f000 fe21 	bl	8006122 <finite>
 80054e0:	e7c3      	b.n	800546a <pow+0x5e>
 80054e2:	4f01      	ldr	r7, [pc, #4]	; (80054e8 <pow+0xdc>)
 80054e4:	2600      	movs	r6, #0
 80054e6:	e7e2      	b.n	80054ae <pow+0xa2>
 80054e8:	3ff00000 	.word	0x3ff00000
 80054ec:	00000000 	.word	0x00000000

080054f0 <__ieee754_pow>:
 80054f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f4:	ed2d 8b06 	vpush	{d8-d10}
 80054f8:	b089      	sub	sp, #36	; 0x24
 80054fa:	ed8d 1b00 	vstr	d1, [sp]
 80054fe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8005502:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8005506:	ea58 0102 	orrs.w	r1, r8, r2
 800550a:	ec57 6b10 	vmov	r6, r7, d0
 800550e:	d115      	bne.n	800553c <__ieee754_pow+0x4c>
 8005510:	19b3      	adds	r3, r6, r6
 8005512:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8005516:	4152      	adcs	r2, r2
 8005518:	4299      	cmp	r1, r3
 800551a:	4b89      	ldr	r3, [pc, #548]	; (8005740 <__ieee754_pow+0x250>)
 800551c:	4193      	sbcs	r3, r2
 800551e:	f080 84d2 	bcs.w	8005ec6 <__ieee754_pow+0x9d6>
 8005522:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005526:	4630      	mov	r0, r6
 8005528:	4639      	mov	r1, r7
 800552a:	f7fa feaf 	bl	800028c <__adddf3>
 800552e:	ec41 0b10 	vmov	d0, r0, r1
 8005532:	b009      	add	sp, #36	; 0x24
 8005534:	ecbd 8b06 	vpop	{d8-d10}
 8005538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553c:	4b81      	ldr	r3, [pc, #516]	; (8005744 <__ieee754_pow+0x254>)
 800553e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8005542:	429c      	cmp	r4, r3
 8005544:	ee10 aa10 	vmov	sl, s0
 8005548:	463d      	mov	r5, r7
 800554a:	dc06      	bgt.n	800555a <__ieee754_pow+0x6a>
 800554c:	d101      	bne.n	8005552 <__ieee754_pow+0x62>
 800554e:	2e00      	cmp	r6, #0
 8005550:	d1e7      	bne.n	8005522 <__ieee754_pow+0x32>
 8005552:	4598      	cmp	r8, r3
 8005554:	dc01      	bgt.n	800555a <__ieee754_pow+0x6a>
 8005556:	d10f      	bne.n	8005578 <__ieee754_pow+0x88>
 8005558:	b172      	cbz	r2, 8005578 <__ieee754_pow+0x88>
 800555a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800555e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8005562:	ea55 050a 	orrs.w	r5, r5, sl
 8005566:	d1dc      	bne.n	8005522 <__ieee754_pow+0x32>
 8005568:	e9dd 3200 	ldrd	r3, r2, [sp]
 800556c:	18db      	adds	r3, r3, r3
 800556e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8005572:	4152      	adcs	r2, r2
 8005574:	429d      	cmp	r5, r3
 8005576:	e7d0      	b.n	800551a <__ieee754_pow+0x2a>
 8005578:	2d00      	cmp	r5, #0
 800557a:	da3b      	bge.n	80055f4 <__ieee754_pow+0x104>
 800557c:	4b72      	ldr	r3, [pc, #456]	; (8005748 <__ieee754_pow+0x258>)
 800557e:	4598      	cmp	r8, r3
 8005580:	dc51      	bgt.n	8005626 <__ieee754_pow+0x136>
 8005582:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005586:	4598      	cmp	r8, r3
 8005588:	f340 84ac 	ble.w	8005ee4 <__ieee754_pow+0x9f4>
 800558c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005590:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005594:	2b14      	cmp	r3, #20
 8005596:	dd0f      	ble.n	80055b8 <__ieee754_pow+0xc8>
 8005598:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800559c:	fa22 f103 	lsr.w	r1, r2, r3
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f040 849d 	bne.w	8005ee4 <__ieee754_pow+0x9f4>
 80055aa:	f001 0101 	and.w	r1, r1, #1
 80055ae:	f1c1 0302 	rsb	r3, r1, #2
 80055b2:	9304      	str	r3, [sp, #16]
 80055b4:	b182      	cbz	r2, 80055d8 <__ieee754_pow+0xe8>
 80055b6:	e05f      	b.n	8005678 <__ieee754_pow+0x188>
 80055b8:	2a00      	cmp	r2, #0
 80055ba:	d15b      	bne.n	8005674 <__ieee754_pow+0x184>
 80055bc:	f1c3 0314 	rsb	r3, r3, #20
 80055c0:	fa48 f103 	asr.w	r1, r8, r3
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	4543      	cmp	r3, r8
 80055ca:	f040 8488 	bne.w	8005ede <__ieee754_pow+0x9ee>
 80055ce:	f001 0101 	and.w	r1, r1, #1
 80055d2:	f1c1 0302 	rsb	r3, r1, #2
 80055d6:	9304      	str	r3, [sp, #16]
 80055d8:	4b5c      	ldr	r3, [pc, #368]	; (800574c <__ieee754_pow+0x25c>)
 80055da:	4598      	cmp	r8, r3
 80055dc:	d132      	bne.n	8005644 <__ieee754_pow+0x154>
 80055de:	f1b9 0f00 	cmp.w	r9, #0
 80055e2:	f280 8478 	bge.w	8005ed6 <__ieee754_pow+0x9e6>
 80055e6:	4959      	ldr	r1, [pc, #356]	; (800574c <__ieee754_pow+0x25c>)
 80055e8:	4632      	mov	r2, r6
 80055ea:	463b      	mov	r3, r7
 80055ec:	2000      	movs	r0, #0
 80055ee:	f7fb f92d 	bl	800084c <__aeabi_ddiv>
 80055f2:	e79c      	b.n	800552e <__ieee754_pow+0x3e>
 80055f4:	2300      	movs	r3, #0
 80055f6:	9304      	str	r3, [sp, #16]
 80055f8:	2a00      	cmp	r2, #0
 80055fa:	d13d      	bne.n	8005678 <__ieee754_pow+0x188>
 80055fc:	4b51      	ldr	r3, [pc, #324]	; (8005744 <__ieee754_pow+0x254>)
 80055fe:	4598      	cmp	r8, r3
 8005600:	d1ea      	bne.n	80055d8 <__ieee754_pow+0xe8>
 8005602:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005606:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800560a:	ea53 030a 	orrs.w	r3, r3, sl
 800560e:	f000 845a 	beq.w	8005ec6 <__ieee754_pow+0x9d6>
 8005612:	4b4f      	ldr	r3, [pc, #316]	; (8005750 <__ieee754_pow+0x260>)
 8005614:	429c      	cmp	r4, r3
 8005616:	dd08      	ble.n	800562a <__ieee754_pow+0x13a>
 8005618:	f1b9 0f00 	cmp.w	r9, #0
 800561c:	f2c0 8457 	blt.w	8005ece <__ieee754_pow+0x9de>
 8005620:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005624:	e783      	b.n	800552e <__ieee754_pow+0x3e>
 8005626:	2302      	movs	r3, #2
 8005628:	e7e5      	b.n	80055f6 <__ieee754_pow+0x106>
 800562a:	f1b9 0f00 	cmp.w	r9, #0
 800562e:	f04f 0000 	mov.w	r0, #0
 8005632:	f04f 0100 	mov.w	r1, #0
 8005636:	f6bf af7a 	bge.w	800552e <__ieee754_pow+0x3e>
 800563a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800563e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005642:	e774      	b.n	800552e <__ieee754_pow+0x3e>
 8005644:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005648:	d106      	bne.n	8005658 <__ieee754_pow+0x168>
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	4630      	mov	r0, r6
 8005650:	4639      	mov	r1, r7
 8005652:	f7fa ffd1 	bl	80005f8 <__aeabi_dmul>
 8005656:	e76a      	b.n	800552e <__ieee754_pow+0x3e>
 8005658:	4b3e      	ldr	r3, [pc, #248]	; (8005754 <__ieee754_pow+0x264>)
 800565a:	4599      	cmp	r9, r3
 800565c:	d10c      	bne.n	8005678 <__ieee754_pow+0x188>
 800565e:	2d00      	cmp	r5, #0
 8005660:	db0a      	blt.n	8005678 <__ieee754_pow+0x188>
 8005662:	ec47 6b10 	vmov	d0, r6, r7
 8005666:	b009      	add	sp, #36	; 0x24
 8005668:	ecbd 8b06 	vpop	{d8-d10}
 800566c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005670:	f000 bc6c 	b.w	8005f4c <__ieee754_sqrt>
 8005674:	2300      	movs	r3, #0
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	ec47 6b10 	vmov	d0, r6, r7
 800567c:	f000 fd48 	bl	8006110 <fabs>
 8005680:	ec51 0b10 	vmov	r0, r1, d0
 8005684:	f1ba 0f00 	cmp.w	sl, #0
 8005688:	d129      	bne.n	80056de <__ieee754_pow+0x1ee>
 800568a:	b124      	cbz	r4, 8005696 <__ieee754_pow+0x1a6>
 800568c:	4b2f      	ldr	r3, [pc, #188]	; (800574c <__ieee754_pow+0x25c>)
 800568e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005692:	429a      	cmp	r2, r3
 8005694:	d123      	bne.n	80056de <__ieee754_pow+0x1ee>
 8005696:	f1b9 0f00 	cmp.w	r9, #0
 800569a:	da05      	bge.n	80056a8 <__ieee754_pow+0x1b8>
 800569c:	4602      	mov	r2, r0
 800569e:	460b      	mov	r3, r1
 80056a0:	2000      	movs	r0, #0
 80056a2:	492a      	ldr	r1, [pc, #168]	; (800574c <__ieee754_pow+0x25c>)
 80056a4:	f7fb f8d2 	bl	800084c <__aeabi_ddiv>
 80056a8:	2d00      	cmp	r5, #0
 80056aa:	f6bf af40 	bge.w	800552e <__ieee754_pow+0x3e>
 80056ae:	9b04      	ldr	r3, [sp, #16]
 80056b0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80056b4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80056b8:	4323      	orrs	r3, r4
 80056ba:	d108      	bne.n	80056ce <__ieee754_pow+0x1de>
 80056bc:	4602      	mov	r2, r0
 80056be:	460b      	mov	r3, r1
 80056c0:	4610      	mov	r0, r2
 80056c2:	4619      	mov	r1, r3
 80056c4:	f7fa fde0 	bl	8000288 <__aeabi_dsub>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	e78f      	b.n	80055ee <__ieee754_pow+0xfe>
 80056ce:	9b04      	ldr	r3, [sp, #16]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f47f af2c 	bne.w	800552e <__ieee754_pow+0x3e>
 80056d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056da:	4619      	mov	r1, r3
 80056dc:	e727      	b.n	800552e <__ieee754_pow+0x3e>
 80056de:	0feb      	lsrs	r3, r5, #31
 80056e0:	3b01      	subs	r3, #1
 80056e2:	9306      	str	r3, [sp, #24]
 80056e4:	9a06      	ldr	r2, [sp, #24]
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	d102      	bne.n	80056f2 <__ieee754_pow+0x202>
 80056ec:	4632      	mov	r2, r6
 80056ee:	463b      	mov	r3, r7
 80056f0:	e7e6      	b.n	80056c0 <__ieee754_pow+0x1d0>
 80056f2:	4b19      	ldr	r3, [pc, #100]	; (8005758 <__ieee754_pow+0x268>)
 80056f4:	4598      	cmp	r8, r3
 80056f6:	f340 80fb 	ble.w	80058f0 <__ieee754_pow+0x400>
 80056fa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80056fe:	4598      	cmp	r8, r3
 8005700:	4b13      	ldr	r3, [pc, #76]	; (8005750 <__ieee754_pow+0x260>)
 8005702:	dd0c      	ble.n	800571e <__ieee754_pow+0x22e>
 8005704:	429c      	cmp	r4, r3
 8005706:	dc0f      	bgt.n	8005728 <__ieee754_pow+0x238>
 8005708:	f1b9 0f00 	cmp.w	r9, #0
 800570c:	da0f      	bge.n	800572e <__ieee754_pow+0x23e>
 800570e:	2000      	movs	r0, #0
 8005710:	b009      	add	sp, #36	; 0x24
 8005712:	ecbd 8b06 	vpop	{d8-d10}
 8005716:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800571a:	f000 bcf0 	b.w	80060fe <__math_oflow>
 800571e:	429c      	cmp	r4, r3
 8005720:	dbf2      	blt.n	8005708 <__ieee754_pow+0x218>
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <__ieee754_pow+0x25c>)
 8005724:	429c      	cmp	r4, r3
 8005726:	dd19      	ble.n	800575c <__ieee754_pow+0x26c>
 8005728:	f1b9 0f00 	cmp.w	r9, #0
 800572c:	dcef      	bgt.n	800570e <__ieee754_pow+0x21e>
 800572e:	2000      	movs	r0, #0
 8005730:	b009      	add	sp, #36	; 0x24
 8005732:	ecbd 8b06 	vpop	{d8-d10}
 8005736:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573a:	f000 bcd7 	b.w	80060ec <__math_uflow>
 800573e:	bf00      	nop
 8005740:	fff00000 	.word	0xfff00000
 8005744:	7ff00000 	.word	0x7ff00000
 8005748:	433fffff 	.word	0x433fffff
 800574c:	3ff00000 	.word	0x3ff00000
 8005750:	3fefffff 	.word	0x3fefffff
 8005754:	3fe00000 	.word	0x3fe00000
 8005758:	41e00000 	.word	0x41e00000
 800575c:	4b60      	ldr	r3, [pc, #384]	; (80058e0 <__ieee754_pow+0x3f0>)
 800575e:	2200      	movs	r2, #0
 8005760:	f7fa fd92 	bl	8000288 <__aeabi_dsub>
 8005764:	a354      	add	r3, pc, #336	; (adr r3, 80058b8 <__ieee754_pow+0x3c8>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	4604      	mov	r4, r0
 800576c:	460d      	mov	r5, r1
 800576e:	f7fa ff43 	bl	80005f8 <__aeabi_dmul>
 8005772:	a353      	add	r3, pc, #332	; (adr r3, 80058c0 <__ieee754_pow+0x3d0>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	4606      	mov	r6, r0
 800577a:	460f      	mov	r7, r1
 800577c:	4620      	mov	r0, r4
 800577e:	4629      	mov	r1, r5
 8005780:	f7fa ff3a 	bl	80005f8 <__aeabi_dmul>
 8005784:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <__ieee754_pow+0x3f4>)
 8005786:	4682      	mov	sl, r0
 8005788:	468b      	mov	fp, r1
 800578a:	2200      	movs	r2, #0
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fa ff32 	bl	80005f8 <__aeabi_dmul>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	a14b      	add	r1, pc, #300	; (adr r1, 80058c8 <__ieee754_pow+0x3d8>)
 800579a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800579e:	f7fa fd73 	bl	8000288 <__aeabi_dsub>
 80057a2:	4622      	mov	r2, r4
 80057a4:	462b      	mov	r3, r5
 80057a6:	f7fa ff27 	bl	80005f8 <__aeabi_dmul>
 80057aa:	4602      	mov	r2, r0
 80057ac:	460b      	mov	r3, r1
 80057ae:	2000      	movs	r0, #0
 80057b0:	494d      	ldr	r1, [pc, #308]	; (80058e8 <__ieee754_pow+0x3f8>)
 80057b2:	f7fa fd69 	bl	8000288 <__aeabi_dsub>
 80057b6:	4622      	mov	r2, r4
 80057b8:	4680      	mov	r8, r0
 80057ba:	4689      	mov	r9, r1
 80057bc:	462b      	mov	r3, r5
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fa ff19 	bl	80005f8 <__aeabi_dmul>
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	f7fa ff13 	bl	80005f8 <__aeabi_dmul>
 80057d2:	a33f      	add	r3, pc, #252	; (adr r3, 80058d0 <__ieee754_pow+0x3e0>)
 80057d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d8:	f7fa ff0e 	bl	80005f8 <__aeabi_dmul>
 80057dc:	4602      	mov	r2, r0
 80057de:	460b      	mov	r3, r1
 80057e0:	4650      	mov	r0, sl
 80057e2:	4659      	mov	r1, fp
 80057e4:	f7fa fd50 	bl	8000288 <__aeabi_dsub>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4680      	mov	r8, r0
 80057ee:	4689      	mov	r9, r1
 80057f0:	4630      	mov	r0, r6
 80057f2:	4639      	mov	r1, r7
 80057f4:	f7fa fd4a 	bl	800028c <__adddf3>
 80057f8:	2000      	movs	r0, #0
 80057fa:	4632      	mov	r2, r6
 80057fc:	463b      	mov	r3, r7
 80057fe:	4604      	mov	r4, r0
 8005800:	460d      	mov	r5, r1
 8005802:	f7fa fd41 	bl	8000288 <__aeabi_dsub>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	f7fa fd3b 	bl	8000288 <__aeabi_dsub>
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	9a06      	ldr	r2, [sp, #24]
 8005816:	3b01      	subs	r3, #1
 8005818:	4313      	orrs	r3, r2
 800581a:	4682      	mov	sl, r0
 800581c:	468b      	mov	fp, r1
 800581e:	f040 81e7 	bne.w	8005bf0 <__ieee754_pow+0x700>
 8005822:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80058d8 <__ieee754_pow+0x3e8>
 8005826:	eeb0 8a47 	vmov.f32	s16, s14
 800582a:	eef0 8a67 	vmov.f32	s17, s15
 800582e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005832:	2600      	movs	r6, #0
 8005834:	4632      	mov	r2, r6
 8005836:	463b      	mov	r3, r7
 8005838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800583c:	f7fa fd24 	bl	8000288 <__aeabi_dsub>
 8005840:	4622      	mov	r2, r4
 8005842:	462b      	mov	r3, r5
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	e9dd 2300 	ldrd	r2, r3, [sp]
 800584c:	4680      	mov	r8, r0
 800584e:	4689      	mov	r9, r1
 8005850:	4650      	mov	r0, sl
 8005852:	4659      	mov	r1, fp
 8005854:	f7fa fed0 	bl	80005f8 <__aeabi_dmul>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4640      	mov	r0, r8
 800585e:	4649      	mov	r1, r9
 8005860:	f7fa fd14 	bl	800028c <__adddf3>
 8005864:	4632      	mov	r2, r6
 8005866:	463b      	mov	r3, r7
 8005868:	4680      	mov	r8, r0
 800586a:	4689      	mov	r9, r1
 800586c:	4620      	mov	r0, r4
 800586e:	4629      	mov	r1, r5
 8005870:	f7fa fec2 	bl	80005f8 <__aeabi_dmul>
 8005874:	460b      	mov	r3, r1
 8005876:	4604      	mov	r4, r0
 8005878:	460d      	mov	r5, r1
 800587a:	4602      	mov	r2, r0
 800587c:	4649      	mov	r1, r9
 800587e:	4640      	mov	r0, r8
 8005880:	f7fa fd04 	bl	800028c <__adddf3>
 8005884:	4b19      	ldr	r3, [pc, #100]	; (80058ec <__ieee754_pow+0x3fc>)
 8005886:	4299      	cmp	r1, r3
 8005888:	ec45 4b19 	vmov	d9, r4, r5
 800588c:	4606      	mov	r6, r0
 800588e:	460f      	mov	r7, r1
 8005890:	468b      	mov	fp, r1
 8005892:	f340 82f1 	ble.w	8005e78 <__ieee754_pow+0x988>
 8005896:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800589a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800589e:	4303      	orrs	r3, r0
 80058a0:	f000 81e4 	beq.w	8005c6c <__ieee754_pow+0x77c>
 80058a4:	ec51 0b18 	vmov	r0, r1, d8
 80058a8:	2200      	movs	r2, #0
 80058aa:	2300      	movs	r3, #0
 80058ac:	f7fb f916 	bl	8000adc <__aeabi_dcmplt>
 80058b0:	3800      	subs	r0, #0
 80058b2:	bf18      	it	ne
 80058b4:	2001      	movne	r0, #1
 80058b6:	e72b      	b.n	8005710 <__ieee754_pow+0x220>
 80058b8:	60000000 	.word	0x60000000
 80058bc:	3ff71547 	.word	0x3ff71547
 80058c0:	f85ddf44 	.word	0xf85ddf44
 80058c4:	3e54ae0b 	.word	0x3e54ae0b
 80058c8:	55555555 	.word	0x55555555
 80058cc:	3fd55555 	.word	0x3fd55555
 80058d0:	652b82fe 	.word	0x652b82fe
 80058d4:	3ff71547 	.word	0x3ff71547
 80058d8:	00000000 	.word	0x00000000
 80058dc:	bff00000 	.word	0xbff00000
 80058e0:	3ff00000 	.word	0x3ff00000
 80058e4:	3fd00000 	.word	0x3fd00000
 80058e8:	3fe00000 	.word	0x3fe00000
 80058ec:	408fffff 	.word	0x408fffff
 80058f0:	4bd5      	ldr	r3, [pc, #852]	; (8005c48 <__ieee754_pow+0x758>)
 80058f2:	402b      	ands	r3, r5
 80058f4:	2200      	movs	r2, #0
 80058f6:	b92b      	cbnz	r3, 8005904 <__ieee754_pow+0x414>
 80058f8:	4bd4      	ldr	r3, [pc, #848]	; (8005c4c <__ieee754_pow+0x75c>)
 80058fa:	f7fa fe7d 	bl	80005f8 <__aeabi_dmul>
 80058fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005902:	460c      	mov	r4, r1
 8005904:	1523      	asrs	r3, r4, #20
 8005906:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800590a:	4413      	add	r3, r2
 800590c:	9305      	str	r3, [sp, #20]
 800590e:	4bd0      	ldr	r3, [pc, #832]	; (8005c50 <__ieee754_pow+0x760>)
 8005910:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005914:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005918:	429c      	cmp	r4, r3
 800591a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800591e:	dd08      	ble.n	8005932 <__ieee754_pow+0x442>
 8005920:	4bcc      	ldr	r3, [pc, #816]	; (8005c54 <__ieee754_pow+0x764>)
 8005922:	429c      	cmp	r4, r3
 8005924:	f340 8162 	ble.w	8005bec <__ieee754_pow+0x6fc>
 8005928:	9b05      	ldr	r3, [sp, #20]
 800592a:	3301      	adds	r3, #1
 800592c:	9305      	str	r3, [sp, #20]
 800592e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005932:	2400      	movs	r4, #0
 8005934:	00e3      	lsls	r3, r4, #3
 8005936:	9307      	str	r3, [sp, #28]
 8005938:	4bc7      	ldr	r3, [pc, #796]	; (8005c58 <__ieee754_pow+0x768>)
 800593a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800593e:	ed93 7b00 	vldr	d7, [r3]
 8005942:	4629      	mov	r1, r5
 8005944:	ec53 2b17 	vmov	r2, r3, d7
 8005948:	eeb0 9a47 	vmov.f32	s18, s14
 800594c:	eef0 9a67 	vmov.f32	s19, s15
 8005950:	4682      	mov	sl, r0
 8005952:	f7fa fc99 	bl	8000288 <__aeabi_dsub>
 8005956:	4652      	mov	r2, sl
 8005958:	4606      	mov	r6, r0
 800595a:	460f      	mov	r7, r1
 800595c:	462b      	mov	r3, r5
 800595e:	ec51 0b19 	vmov	r0, r1, d9
 8005962:	f7fa fc93 	bl	800028c <__adddf3>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	2000      	movs	r0, #0
 800596c:	49bb      	ldr	r1, [pc, #748]	; (8005c5c <__ieee754_pow+0x76c>)
 800596e:	f7fa ff6d 	bl	800084c <__aeabi_ddiv>
 8005972:	ec41 0b1a 	vmov	d10, r0, r1
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4630      	mov	r0, r6
 800597c:	4639      	mov	r1, r7
 800597e:	f7fa fe3b 	bl	80005f8 <__aeabi_dmul>
 8005982:	2300      	movs	r3, #0
 8005984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005988:	9302      	str	r3, [sp, #8]
 800598a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800598e:	46ab      	mov	fp, r5
 8005990:	106d      	asrs	r5, r5, #1
 8005992:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005996:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800599a:	ec41 0b18 	vmov	d8, r0, r1
 800599e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80059a2:	2200      	movs	r2, #0
 80059a4:	4640      	mov	r0, r8
 80059a6:	4649      	mov	r1, r9
 80059a8:	4614      	mov	r4, r2
 80059aa:	461d      	mov	r5, r3
 80059ac:	f7fa fe24 	bl	80005f8 <__aeabi_dmul>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4630      	mov	r0, r6
 80059b6:	4639      	mov	r1, r7
 80059b8:	f7fa fc66 	bl	8000288 <__aeabi_dsub>
 80059bc:	ec53 2b19 	vmov	r2, r3, d9
 80059c0:	4606      	mov	r6, r0
 80059c2:	460f      	mov	r7, r1
 80059c4:	4620      	mov	r0, r4
 80059c6:	4629      	mov	r1, r5
 80059c8:	f7fa fc5e 	bl	8000288 <__aeabi_dsub>
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4650      	mov	r0, sl
 80059d2:	4659      	mov	r1, fp
 80059d4:	f7fa fc58 	bl	8000288 <__aeabi_dsub>
 80059d8:	4642      	mov	r2, r8
 80059da:	464b      	mov	r3, r9
 80059dc:	f7fa fe0c 	bl	80005f8 <__aeabi_dmul>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4630      	mov	r0, r6
 80059e6:	4639      	mov	r1, r7
 80059e8:	f7fa fc4e 	bl	8000288 <__aeabi_dsub>
 80059ec:	ec53 2b1a 	vmov	r2, r3, d10
 80059f0:	f7fa fe02 	bl	80005f8 <__aeabi_dmul>
 80059f4:	ec53 2b18 	vmov	r2, r3, d8
 80059f8:	ec41 0b19 	vmov	d9, r0, r1
 80059fc:	ec51 0b18 	vmov	r0, r1, d8
 8005a00:	f7fa fdfa 	bl	80005f8 <__aeabi_dmul>
 8005a04:	a37c      	add	r3, pc, #496	; (adr r3, 8005bf8 <__ieee754_pow+0x708>)
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	460d      	mov	r5, r1
 8005a0e:	f7fa fdf3 	bl	80005f8 <__aeabi_dmul>
 8005a12:	a37b      	add	r3, pc, #492	; (adr r3, 8005c00 <__ieee754_pow+0x710>)
 8005a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a18:	f7fa fc38 	bl	800028c <__adddf3>
 8005a1c:	4622      	mov	r2, r4
 8005a1e:	462b      	mov	r3, r5
 8005a20:	f7fa fdea 	bl	80005f8 <__aeabi_dmul>
 8005a24:	a378      	add	r3, pc, #480	; (adr r3, 8005c08 <__ieee754_pow+0x718>)
 8005a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2a:	f7fa fc2f 	bl	800028c <__adddf3>
 8005a2e:	4622      	mov	r2, r4
 8005a30:	462b      	mov	r3, r5
 8005a32:	f7fa fde1 	bl	80005f8 <__aeabi_dmul>
 8005a36:	a376      	add	r3, pc, #472	; (adr r3, 8005c10 <__ieee754_pow+0x720>)
 8005a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3c:	f7fa fc26 	bl	800028c <__adddf3>
 8005a40:	4622      	mov	r2, r4
 8005a42:	462b      	mov	r3, r5
 8005a44:	f7fa fdd8 	bl	80005f8 <__aeabi_dmul>
 8005a48:	a373      	add	r3, pc, #460	; (adr r3, 8005c18 <__ieee754_pow+0x728>)
 8005a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4e:	f7fa fc1d 	bl	800028c <__adddf3>
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f7fa fdcf 	bl	80005f8 <__aeabi_dmul>
 8005a5a:	a371      	add	r3, pc, #452	; (adr r3, 8005c20 <__ieee754_pow+0x730>)
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	f7fa fc14 	bl	800028c <__adddf3>
 8005a64:	4622      	mov	r2, r4
 8005a66:	4606      	mov	r6, r0
 8005a68:	460f      	mov	r7, r1
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	4629      	mov	r1, r5
 8005a70:	f7fa fdc2 	bl	80005f8 <__aeabi_dmul>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4630      	mov	r0, r6
 8005a7a:	4639      	mov	r1, r7
 8005a7c:	f7fa fdbc 	bl	80005f8 <__aeabi_dmul>
 8005a80:	4642      	mov	r2, r8
 8005a82:	4604      	mov	r4, r0
 8005a84:	460d      	mov	r5, r1
 8005a86:	464b      	mov	r3, r9
 8005a88:	ec51 0b18 	vmov	r0, r1, d8
 8005a8c:	f7fa fbfe 	bl	800028c <__adddf3>
 8005a90:	ec53 2b19 	vmov	r2, r3, d9
 8005a94:	f7fa fdb0 	bl	80005f8 <__aeabi_dmul>
 8005a98:	4622      	mov	r2, r4
 8005a9a:	462b      	mov	r3, r5
 8005a9c:	f7fa fbf6 	bl	800028c <__adddf3>
 8005aa0:	4642      	mov	r2, r8
 8005aa2:	4682      	mov	sl, r0
 8005aa4:	468b      	mov	fp, r1
 8005aa6:	464b      	mov	r3, r9
 8005aa8:	4640      	mov	r0, r8
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f7fa fda4 	bl	80005f8 <__aeabi_dmul>
 8005ab0:	4b6b      	ldr	r3, [pc, #428]	; (8005c60 <__ieee754_pow+0x770>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	460f      	mov	r7, r1
 8005ab8:	f7fa fbe8 	bl	800028c <__adddf3>
 8005abc:	4652      	mov	r2, sl
 8005abe:	465b      	mov	r3, fp
 8005ac0:	f7fa fbe4 	bl	800028c <__adddf3>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460d      	mov	r5, r1
 8005aca:	4602      	mov	r2, r0
 8005acc:	460b      	mov	r3, r1
 8005ace:	4640      	mov	r0, r8
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	f7fa fd91 	bl	80005f8 <__aeabi_dmul>
 8005ad6:	4b62      	ldr	r3, [pc, #392]	; (8005c60 <__ieee754_pow+0x770>)
 8005ad8:	4680      	mov	r8, r0
 8005ada:	4689      	mov	r9, r1
 8005adc:	2200      	movs	r2, #0
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa fbd1 	bl	8000288 <__aeabi_dsub>
 8005ae6:	4632      	mov	r2, r6
 8005ae8:	463b      	mov	r3, r7
 8005aea:	f7fa fbcd 	bl	8000288 <__aeabi_dsub>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4650      	mov	r0, sl
 8005af4:	4659      	mov	r1, fp
 8005af6:	f7fa fbc7 	bl	8000288 <__aeabi_dsub>
 8005afa:	ec53 2b18 	vmov	r2, r3, d8
 8005afe:	f7fa fd7b 	bl	80005f8 <__aeabi_dmul>
 8005b02:	4622      	mov	r2, r4
 8005b04:	4606      	mov	r6, r0
 8005b06:	460f      	mov	r7, r1
 8005b08:	462b      	mov	r3, r5
 8005b0a:	ec51 0b19 	vmov	r0, r1, d9
 8005b0e:	f7fa fd73 	bl	80005f8 <__aeabi_dmul>
 8005b12:	4602      	mov	r2, r0
 8005b14:	460b      	mov	r3, r1
 8005b16:	4630      	mov	r0, r6
 8005b18:	4639      	mov	r1, r7
 8005b1a:	f7fa fbb7 	bl	800028c <__adddf3>
 8005b1e:	4606      	mov	r6, r0
 8005b20:	460f      	mov	r7, r1
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4640      	mov	r0, r8
 8005b28:	4649      	mov	r1, r9
 8005b2a:	f7fa fbaf 	bl	800028c <__adddf3>
 8005b2e:	a33e      	add	r3, pc, #248	; (adr r3, 8005c28 <__ieee754_pow+0x738>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	2000      	movs	r0, #0
 8005b36:	4604      	mov	r4, r0
 8005b38:	460d      	mov	r5, r1
 8005b3a:	f7fa fd5d 	bl	80005f8 <__aeabi_dmul>
 8005b3e:	4642      	mov	r2, r8
 8005b40:	ec41 0b18 	vmov	d8, r0, r1
 8005b44:	464b      	mov	r3, r9
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	f7fa fb9d 	bl	8000288 <__aeabi_dsub>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	4630      	mov	r0, r6
 8005b54:	4639      	mov	r1, r7
 8005b56:	f7fa fb97 	bl	8000288 <__aeabi_dsub>
 8005b5a:	a335      	add	r3, pc, #212	; (adr r3, 8005c30 <__ieee754_pow+0x740>)
 8005b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b60:	f7fa fd4a 	bl	80005f8 <__aeabi_dmul>
 8005b64:	a334      	add	r3, pc, #208	; (adr r3, 8005c38 <__ieee754_pow+0x748>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	4606      	mov	r6, r0
 8005b6c:	460f      	mov	r7, r1
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa fd41 	bl	80005f8 <__aeabi_dmul>
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4630      	mov	r0, r6
 8005b7c:	4639      	mov	r1, r7
 8005b7e:	f7fa fb85 	bl	800028c <__adddf3>
 8005b82:	9a07      	ldr	r2, [sp, #28]
 8005b84:	4b37      	ldr	r3, [pc, #220]	; (8005c64 <__ieee754_pow+0x774>)
 8005b86:	4413      	add	r3, r2
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f7fa fb7e 	bl	800028c <__adddf3>
 8005b90:	4682      	mov	sl, r0
 8005b92:	9805      	ldr	r0, [sp, #20]
 8005b94:	468b      	mov	fp, r1
 8005b96:	f7fa fcc5 	bl	8000524 <__aeabi_i2d>
 8005b9a:	9a07      	ldr	r2, [sp, #28]
 8005b9c:	4b32      	ldr	r3, [pc, #200]	; (8005c68 <__ieee754_pow+0x778>)
 8005b9e:	4413      	add	r3, r2
 8005ba0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	460f      	mov	r7, r1
 8005ba8:	4652      	mov	r2, sl
 8005baa:	465b      	mov	r3, fp
 8005bac:	ec51 0b18 	vmov	r0, r1, d8
 8005bb0:	f7fa fb6c 	bl	800028c <__adddf3>
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f7fa fb68 	bl	800028c <__adddf3>
 8005bbc:	4632      	mov	r2, r6
 8005bbe:	463b      	mov	r3, r7
 8005bc0:	f7fa fb64 	bl	800028c <__adddf3>
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	463b      	mov	r3, r7
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460d      	mov	r5, r1
 8005bce:	f7fa fb5b 	bl	8000288 <__aeabi_dsub>
 8005bd2:	4642      	mov	r2, r8
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	f7fa fb57 	bl	8000288 <__aeabi_dsub>
 8005bda:	ec53 2b18 	vmov	r2, r3, d8
 8005bde:	f7fa fb53 	bl	8000288 <__aeabi_dsub>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4650      	mov	r0, sl
 8005be8:	4659      	mov	r1, fp
 8005bea:	e610      	b.n	800580e <__ieee754_pow+0x31e>
 8005bec:	2401      	movs	r4, #1
 8005bee:	e6a1      	b.n	8005934 <__ieee754_pow+0x444>
 8005bf0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8005c40 <__ieee754_pow+0x750>
 8005bf4:	e617      	b.n	8005826 <__ieee754_pow+0x336>
 8005bf6:	bf00      	nop
 8005bf8:	4a454eef 	.word	0x4a454eef
 8005bfc:	3fca7e28 	.word	0x3fca7e28
 8005c00:	93c9db65 	.word	0x93c9db65
 8005c04:	3fcd864a 	.word	0x3fcd864a
 8005c08:	a91d4101 	.word	0xa91d4101
 8005c0c:	3fd17460 	.word	0x3fd17460
 8005c10:	518f264d 	.word	0x518f264d
 8005c14:	3fd55555 	.word	0x3fd55555
 8005c18:	db6fabff 	.word	0xdb6fabff
 8005c1c:	3fdb6db6 	.word	0x3fdb6db6
 8005c20:	33333303 	.word	0x33333303
 8005c24:	3fe33333 	.word	0x3fe33333
 8005c28:	e0000000 	.word	0xe0000000
 8005c2c:	3feec709 	.word	0x3feec709
 8005c30:	dc3a03fd 	.word	0xdc3a03fd
 8005c34:	3feec709 	.word	0x3feec709
 8005c38:	145b01f5 	.word	0x145b01f5
 8005c3c:	be3e2fe0 	.word	0xbe3e2fe0
 8005c40:	00000000 	.word	0x00000000
 8005c44:	3ff00000 	.word	0x3ff00000
 8005c48:	7ff00000 	.word	0x7ff00000
 8005c4c:	43400000 	.word	0x43400000
 8005c50:	0003988e 	.word	0x0003988e
 8005c54:	000bb679 	.word	0x000bb679
 8005c58:	080063b8 	.word	0x080063b8
 8005c5c:	3ff00000 	.word	0x3ff00000
 8005c60:	40080000 	.word	0x40080000
 8005c64:	080063d8 	.word	0x080063d8
 8005c68:	080063c8 	.word	0x080063c8
 8005c6c:	a3b5      	add	r3, pc, #724	; (adr r3, 8005f44 <__ieee754_pow+0xa54>)
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	4640      	mov	r0, r8
 8005c74:	4649      	mov	r1, r9
 8005c76:	f7fa fb09 	bl	800028c <__adddf3>
 8005c7a:	4622      	mov	r2, r4
 8005c7c:	ec41 0b1a 	vmov	d10, r0, r1
 8005c80:	462b      	mov	r3, r5
 8005c82:	4630      	mov	r0, r6
 8005c84:	4639      	mov	r1, r7
 8005c86:	f7fa faff 	bl	8000288 <__aeabi_dsub>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	ec51 0b1a 	vmov	r0, r1, d10
 8005c92:	f7fa ff41 	bl	8000b18 <__aeabi_dcmpgt>
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f47f ae04 	bne.w	80058a4 <__ieee754_pow+0x3b4>
 8005c9c:	4aa4      	ldr	r2, [pc, #656]	; (8005f30 <__ieee754_pow+0xa40>)
 8005c9e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	f340 8108 	ble.w	8005eb8 <__ieee754_pow+0x9c8>
 8005ca8:	151b      	asrs	r3, r3, #20
 8005caa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005cae:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005cb2:	fa4a f303 	asr.w	r3, sl, r3
 8005cb6:	445b      	add	r3, fp
 8005cb8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005cbc:	4e9d      	ldr	r6, [pc, #628]	; (8005f34 <__ieee754_pow+0xa44>)
 8005cbe:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005cc2:	4116      	asrs	r6, r2
 8005cc4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005cc8:	2000      	movs	r0, #0
 8005cca:	ea23 0106 	bic.w	r1, r3, r6
 8005cce:	f1c2 0214 	rsb	r2, r2, #20
 8005cd2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005cd6:	fa4a fa02 	asr.w	sl, sl, r2
 8005cda:	f1bb 0f00 	cmp.w	fp, #0
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	4629      	mov	r1, r5
 8005ce6:	bfb8      	it	lt
 8005ce8:	f1ca 0a00 	rsblt	sl, sl, #0
 8005cec:	f7fa facc 	bl	8000288 <__aeabi_dsub>
 8005cf0:	ec41 0b19 	vmov	d9, r0, r1
 8005cf4:	4642      	mov	r2, r8
 8005cf6:	464b      	mov	r3, r9
 8005cf8:	ec51 0b19 	vmov	r0, r1, d9
 8005cfc:	f7fa fac6 	bl	800028c <__adddf3>
 8005d00:	a37b      	add	r3, pc, #492	; (adr r3, 8005ef0 <__ieee754_pow+0xa00>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	2000      	movs	r0, #0
 8005d08:	4604      	mov	r4, r0
 8005d0a:	460d      	mov	r5, r1
 8005d0c:	f7fa fc74 	bl	80005f8 <__aeabi_dmul>
 8005d10:	ec53 2b19 	vmov	r2, r3, d9
 8005d14:	4606      	mov	r6, r0
 8005d16:	460f      	mov	r7, r1
 8005d18:	4620      	mov	r0, r4
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f7fa fab4 	bl	8000288 <__aeabi_dsub>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4640      	mov	r0, r8
 8005d26:	4649      	mov	r1, r9
 8005d28:	f7fa faae 	bl	8000288 <__aeabi_dsub>
 8005d2c:	a372      	add	r3, pc, #456	; (adr r3, 8005ef8 <__ieee754_pow+0xa08>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f7fa fc61 	bl	80005f8 <__aeabi_dmul>
 8005d36:	a372      	add	r3, pc, #456	; (adr r3, 8005f00 <__ieee754_pow+0xa10>)
 8005d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d3c:	4680      	mov	r8, r0
 8005d3e:	4689      	mov	r9, r1
 8005d40:	4620      	mov	r0, r4
 8005d42:	4629      	mov	r1, r5
 8005d44:	f7fa fc58 	bl	80005f8 <__aeabi_dmul>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	4640      	mov	r0, r8
 8005d4e:	4649      	mov	r1, r9
 8005d50:	f7fa fa9c 	bl	800028c <__adddf3>
 8005d54:	4604      	mov	r4, r0
 8005d56:	460d      	mov	r5, r1
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fa94 	bl	800028c <__adddf3>
 8005d64:	4632      	mov	r2, r6
 8005d66:	463b      	mov	r3, r7
 8005d68:	4680      	mov	r8, r0
 8005d6a:	4689      	mov	r9, r1
 8005d6c:	f7fa fa8c 	bl	8000288 <__aeabi_dsub>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4620      	mov	r0, r4
 8005d76:	4629      	mov	r1, r5
 8005d78:	f7fa fa86 	bl	8000288 <__aeabi_dsub>
 8005d7c:	4642      	mov	r2, r8
 8005d7e:	4606      	mov	r6, r0
 8005d80:	460f      	mov	r7, r1
 8005d82:	464b      	mov	r3, r9
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa fc36 	bl	80005f8 <__aeabi_dmul>
 8005d8c:	a35e      	add	r3, pc, #376	; (adr r3, 8005f08 <__ieee754_pow+0xa18>)
 8005d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d92:	4604      	mov	r4, r0
 8005d94:	460d      	mov	r5, r1
 8005d96:	f7fa fc2f 	bl	80005f8 <__aeabi_dmul>
 8005d9a:	a35d      	add	r3, pc, #372	; (adr r3, 8005f10 <__ieee754_pow+0xa20>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa fa72 	bl	8000288 <__aeabi_dsub>
 8005da4:	4622      	mov	r2, r4
 8005da6:	462b      	mov	r3, r5
 8005da8:	f7fa fc26 	bl	80005f8 <__aeabi_dmul>
 8005dac:	a35a      	add	r3, pc, #360	; (adr r3, 8005f18 <__ieee754_pow+0xa28>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f7fa fa6b 	bl	800028c <__adddf3>
 8005db6:	4622      	mov	r2, r4
 8005db8:	462b      	mov	r3, r5
 8005dba:	f7fa fc1d 	bl	80005f8 <__aeabi_dmul>
 8005dbe:	a358      	add	r3, pc, #352	; (adr r3, 8005f20 <__ieee754_pow+0xa30>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	f7fa fa60 	bl	8000288 <__aeabi_dsub>
 8005dc8:	4622      	mov	r2, r4
 8005dca:	462b      	mov	r3, r5
 8005dcc:	f7fa fc14 	bl	80005f8 <__aeabi_dmul>
 8005dd0:	a355      	add	r3, pc, #340	; (adr r3, 8005f28 <__ieee754_pow+0xa38>)
 8005dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd6:	f7fa fa59 	bl	800028c <__adddf3>
 8005dda:	4622      	mov	r2, r4
 8005ddc:	462b      	mov	r3, r5
 8005dde:	f7fa fc0b 	bl	80005f8 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4640      	mov	r0, r8
 8005de8:	4649      	mov	r1, r9
 8005dea:	f7fa fa4d 	bl	8000288 <__aeabi_dsub>
 8005dee:	4604      	mov	r4, r0
 8005df0:	460d      	mov	r5, r1
 8005df2:	4602      	mov	r2, r0
 8005df4:	460b      	mov	r3, r1
 8005df6:	4640      	mov	r0, r8
 8005df8:	4649      	mov	r1, r9
 8005dfa:	f7fa fbfd 	bl	80005f8 <__aeabi_dmul>
 8005dfe:	2200      	movs	r2, #0
 8005e00:	ec41 0b19 	vmov	d9, r0, r1
 8005e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005e08:	4620      	mov	r0, r4
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f7fa fa3c 	bl	8000288 <__aeabi_dsub>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	ec51 0b19 	vmov	r0, r1, d9
 8005e18:	f7fa fd18 	bl	800084c <__aeabi_ddiv>
 8005e1c:	4632      	mov	r2, r6
 8005e1e:	4604      	mov	r4, r0
 8005e20:	460d      	mov	r5, r1
 8005e22:	463b      	mov	r3, r7
 8005e24:	4640      	mov	r0, r8
 8005e26:	4649      	mov	r1, r9
 8005e28:	f7fa fbe6 	bl	80005f8 <__aeabi_dmul>
 8005e2c:	4632      	mov	r2, r6
 8005e2e:	463b      	mov	r3, r7
 8005e30:	f7fa fa2c 	bl	800028c <__adddf3>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa fa24 	bl	8000288 <__aeabi_dsub>
 8005e40:	4642      	mov	r2, r8
 8005e42:	464b      	mov	r3, r9
 8005e44:	f7fa fa20 	bl	8000288 <__aeabi_dsub>
 8005e48:	460b      	mov	r3, r1
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	493a      	ldr	r1, [pc, #232]	; (8005f38 <__ieee754_pow+0xa48>)
 8005e4e:	2000      	movs	r0, #0
 8005e50:	f7fa fa1a 	bl	8000288 <__aeabi_dsub>
 8005e54:	ec41 0b10 	vmov	d0, r0, r1
 8005e58:	ee10 3a90 	vmov	r3, s1
 8005e5c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e64:	da2b      	bge.n	8005ebe <__ieee754_pow+0x9ce>
 8005e66:	4650      	mov	r0, sl
 8005e68:	f000 f966 	bl	8006138 <scalbn>
 8005e6c:	ec51 0b10 	vmov	r0, r1, d0
 8005e70:	ec53 2b18 	vmov	r2, r3, d8
 8005e74:	f7ff bbed 	b.w	8005652 <__ieee754_pow+0x162>
 8005e78:	4b30      	ldr	r3, [pc, #192]	; (8005f3c <__ieee754_pow+0xa4c>)
 8005e7a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005e7e:	429e      	cmp	r6, r3
 8005e80:	f77f af0c 	ble.w	8005c9c <__ieee754_pow+0x7ac>
 8005e84:	4b2e      	ldr	r3, [pc, #184]	; (8005f40 <__ieee754_pow+0xa50>)
 8005e86:	440b      	add	r3, r1
 8005e88:	4303      	orrs	r3, r0
 8005e8a:	d009      	beq.n	8005ea0 <__ieee754_pow+0x9b0>
 8005e8c:	ec51 0b18 	vmov	r0, r1, d8
 8005e90:	2200      	movs	r2, #0
 8005e92:	2300      	movs	r3, #0
 8005e94:	f7fa fe22 	bl	8000adc <__aeabi_dcmplt>
 8005e98:	3800      	subs	r0, #0
 8005e9a:	bf18      	it	ne
 8005e9c:	2001      	movne	r0, #1
 8005e9e:	e447      	b.n	8005730 <__ieee754_pow+0x240>
 8005ea0:	4622      	mov	r2, r4
 8005ea2:	462b      	mov	r3, r5
 8005ea4:	f7fa f9f0 	bl	8000288 <__aeabi_dsub>
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	f7fa fe2a 	bl	8000b04 <__aeabi_dcmpge>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	f43f aef3 	beq.w	8005c9c <__ieee754_pow+0x7ac>
 8005eb6:	e7e9      	b.n	8005e8c <__ieee754_pow+0x99c>
 8005eb8:	f04f 0a00 	mov.w	sl, #0
 8005ebc:	e71a      	b.n	8005cf4 <__ieee754_pow+0x804>
 8005ebe:	ec51 0b10 	vmov	r0, r1, d0
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	e7d4      	b.n	8005e70 <__ieee754_pow+0x980>
 8005ec6:	491c      	ldr	r1, [pc, #112]	; (8005f38 <__ieee754_pow+0xa48>)
 8005ec8:	2000      	movs	r0, #0
 8005eca:	f7ff bb30 	b.w	800552e <__ieee754_pow+0x3e>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f7ff bb2c 	b.w	800552e <__ieee754_pow+0x3e>
 8005ed6:	4630      	mov	r0, r6
 8005ed8:	4639      	mov	r1, r7
 8005eda:	f7ff bb28 	b.w	800552e <__ieee754_pow+0x3e>
 8005ede:	9204      	str	r2, [sp, #16]
 8005ee0:	f7ff bb7a 	b.w	80055d8 <__ieee754_pow+0xe8>
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	f7ff bb64 	b.w	80055b2 <__ieee754_pow+0xc2>
 8005eea:	bf00      	nop
 8005eec:	f3af 8000 	nop.w
 8005ef0:	00000000 	.word	0x00000000
 8005ef4:	3fe62e43 	.word	0x3fe62e43
 8005ef8:	fefa39ef 	.word	0xfefa39ef
 8005efc:	3fe62e42 	.word	0x3fe62e42
 8005f00:	0ca86c39 	.word	0x0ca86c39
 8005f04:	be205c61 	.word	0xbe205c61
 8005f08:	72bea4d0 	.word	0x72bea4d0
 8005f0c:	3e663769 	.word	0x3e663769
 8005f10:	c5d26bf1 	.word	0xc5d26bf1
 8005f14:	3ebbbd41 	.word	0x3ebbbd41
 8005f18:	af25de2c 	.word	0xaf25de2c
 8005f1c:	3f11566a 	.word	0x3f11566a
 8005f20:	16bebd93 	.word	0x16bebd93
 8005f24:	3f66c16c 	.word	0x3f66c16c
 8005f28:	5555553e 	.word	0x5555553e
 8005f2c:	3fc55555 	.word	0x3fc55555
 8005f30:	3fe00000 	.word	0x3fe00000
 8005f34:	000fffff 	.word	0x000fffff
 8005f38:	3ff00000 	.word	0x3ff00000
 8005f3c:	4090cbff 	.word	0x4090cbff
 8005f40:	3f6f3400 	.word	0x3f6f3400
 8005f44:	652b82fe 	.word	0x652b82fe
 8005f48:	3c971547 	.word	0x3c971547

08005f4c <__ieee754_sqrt>:
 8005f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f50:	ec55 4b10 	vmov	r4, r5, d0
 8005f54:	4e55      	ldr	r6, [pc, #340]	; (80060ac <__ieee754_sqrt+0x160>)
 8005f56:	43ae      	bics	r6, r5
 8005f58:	ee10 0a10 	vmov	r0, s0
 8005f5c:	ee10 3a10 	vmov	r3, s0
 8005f60:	462a      	mov	r2, r5
 8005f62:	4629      	mov	r1, r5
 8005f64:	d110      	bne.n	8005f88 <__ieee754_sqrt+0x3c>
 8005f66:	ee10 2a10 	vmov	r2, s0
 8005f6a:	462b      	mov	r3, r5
 8005f6c:	f7fa fb44 	bl	80005f8 <__aeabi_dmul>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4620      	mov	r0, r4
 8005f76:	4629      	mov	r1, r5
 8005f78:	f7fa f988 	bl	800028c <__adddf3>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	460d      	mov	r5, r1
 8005f80:	ec45 4b10 	vmov	d0, r4, r5
 8005f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	dc10      	bgt.n	8005fae <__ieee754_sqrt+0x62>
 8005f8c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005f90:	4330      	orrs	r0, r6
 8005f92:	d0f5      	beq.n	8005f80 <__ieee754_sqrt+0x34>
 8005f94:	b15d      	cbz	r5, 8005fae <__ieee754_sqrt+0x62>
 8005f96:	ee10 2a10 	vmov	r2, s0
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	ee10 0a10 	vmov	r0, s0
 8005fa0:	f7fa f972 	bl	8000288 <__aeabi_dsub>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	f7fa fc50 	bl	800084c <__aeabi_ddiv>
 8005fac:	e7e6      	b.n	8005f7c <__ieee754_sqrt+0x30>
 8005fae:	1512      	asrs	r2, r2, #20
 8005fb0:	d074      	beq.n	800609c <__ieee754_sqrt+0x150>
 8005fb2:	07d4      	lsls	r4, r2, #31
 8005fb4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8005fb8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8005fbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005fc0:	bf5e      	ittt	pl
 8005fc2:	0fda      	lsrpl	r2, r3, #31
 8005fc4:	005b      	lslpl	r3, r3, #1
 8005fc6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8005fca:	2400      	movs	r4, #0
 8005fcc:	0fda      	lsrs	r2, r3, #31
 8005fce:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005fd2:	107f      	asrs	r7, r7, #1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	2516      	movs	r5, #22
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005fde:	1886      	adds	r6, r0, r2
 8005fe0:	428e      	cmp	r6, r1
 8005fe2:	bfde      	ittt	le
 8005fe4:	1b89      	suble	r1, r1, r6
 8005fe6:	18b0      	addle	r0, r6, r2
 8005fe8:	18a4      	addle	r4, r4, r2
 8005fea:	0049      	lsls	r1, r1, #1
 8005fec:	3d01      	subs	r5, #1
 8005fee:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8005ff2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005ff6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ffa:	d1f0      	bne.n	8005fde <__ieee754_sqrt+0x92>
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	f04f 0e20 	mov.w	lr, #32
 8006002:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006006:	4281      	cmp	r1, r0
 8006008:	eb06 0c05 	add.w	ip, r6, r5
 800600c:	dc02      	bgt.n	8006014 <__ieee754_sqrt+0xc8>
 800600e:	d113      	bne.n	8006038 <__ieee754_sqrt+0xec>
 8006010:	459c      	cmp	ip, r3
 8006012:	d811      	bhi.n	8006038 <__ieee754_sqrt+0xec>
 8006014:	f1bc 0f00 	cmp.w	ip, #0
 8006018:	eb0c 0506 	add.w	r5, ip, r6
 800601c:	da43      	bge.n	80060a6 <__ieee754_sqrt+0x15a>
 800601e:	2d00      	cmp	r5, #0
 8006020:	db41      	blt.n	80060a6 <__ieee754_sqrt+0x15a>
 8006022:	f100 0801 	add.w	r8, r0, #1
 8006026:	1a09      	subs	r1, r1, r0
 8006028:	459c      	cmp	ip, r3
 800602a:	bf88      	it	hi
 800602c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006030:	eba3 030c 	sub.w	r3, r3, ip
 8006034:	4432      	add	r2, r6
 8006036:	4640      	mov	r0, r8
 8006038:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800603c:	f1be 0e01 	subs.w	lr, lr, #1
 8006040:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006044:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006048:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800604c:	d1db      	bne.n	8006006 <__ieee754_sqrt+0xba>
 800604e:	430b      	orrs	r3, r1
 8006050:	d006      	beq.n	8006060 <__ieee754_sqrt+0x114>
 8006052:	1c50      	adds	r0, r2, #1
 8006054:	bf13      	iteet	ne
 8006056:	3201      	addne	r2, #1
 8006058:	3401      	addeq	r4, #1
 800605a:	4672      	moveq	r2, lr
 800605c:	f022 0201 	bicne.w	r2, r2, #1
 8006060:	1063      	asrs	r3, r4, #1
 8006062:	0852      	lsrs	r2, r2, #1
 8006064:	07e1      	lsls	r1, r4, #31
 8006066:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800606a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800606e:	bf48      	it	mi
 8006070:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006074:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006078:	4614      	mov	r4, r2
 800607a:	e781      	b.n	8005f80 <__ieee754_sqrt+0x34>
 800607c:	0ad9      	lsrs	r1, r3, #11
 800607e:	3815      	subs	r0, #21
 8006080:	055b      	lsls	r3, r3, #21
 8006082:	2900      	cmp	r1, #0
 8006084:	d0fa      	beq.n	800607c <__ieee754_sqrt+0x130>
 8006086:	02cd      	lsls	r5, r1, #11
 8006088:	d50a      	bpl.n	80060a0 <__ieee754_sqrt+0x154>
 800608a:	f1c2 0420 	rsb	r4, r2, #32
 800608e:	fa23 f404 	lsr.w	r4, r3, r4
 8006092:	1e55      	subs	r5, r2, #1
 8006094:	4093      	lsls	r3, r2
 8006096:	4321      	orrs	r1, r4
 8006098:	1b42      	subs	r2, r0, r5
 800609a:	e78a      	b.n	8005fb2 <__ieee754_sqrt+0x66>
 800609c:	4610      	mov	r0, r2
 800609e:	e7f0      	b.n	8006082 <__ieee754_sqrt+0x136>
 80060a0:	0049      	lsls	r1, r1, #1
 80060a2:	3201      	adds	r2, #1
 80060a4:	e7ef      	b.n	8006086 <__ieee754_sqrt+0x13a>
 80060a6:	4680      	mov	r8, r0
 80060a8:	e7bd      	b.n	8006026 <__ieee754_sqrt+0xda>
 80060aa:	bf00      	nop
 80060ac:	7ff00000 	.word	0x7ff00000

080060b0 <with_errno>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4604      	mov	r4, r0
 80060b4:	460d      	mov	r5, r1
 80060b6:	4616      	mov	r6, r2
 80060b8:	f7fe f910 	bl	80042dc <__errno>
 80060bc:	4629      	mov	r1, r5
 80060be:	6006      	str	r6, [r0, #0]
 80060c0:	4620      	mov	r0, r4
 80060c2:	bd70      	pop	{r4, r5, r6, pc}

080060c4 <xflow>:
 80060c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060c6:	4614      	mov	r4, r2
 80060c8:	461d      	mov	r5, r3
 80060ca:	b108      	cbz	r0, 80060d0 <xflow+0xc>
 80060cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80060d0:	e9cd 2300 	strd	r2, r3, [sp]
 80060d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80060d8:	4620      	mov	r0, r4
 80060da:	4629      	mov	r1, r5
 80060dc:	f7fa fa8c 	bl	80005f8 <__aeabi_dmul>
 80060e0:	2222      	movs	r2, #34	; 0x22
 80060e2:	b003      	add	sp, #12
 80060e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80060e8:	f7ff bfe2 	b.w	80060b0 <with_errno>

080060ec <__math_uflow>:
 80060ec:	b508      	push	{r3, lr}
 80060ee:	2200      	movs	r2, #0
 80060f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80060f4:	f7ff ffe6 	bl	80060c4 <xflow>
 80060f8:	ec41 0b10 	vmov	d0, r0, r1
 80060fc:	bd08      	pop	{r3, pc}

080060fe <__math_oflow>:
 80060fe:	b508      	push	{r3, lr}
 8006100:	2200      	movs	r2, #0
 8006102:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006106:	f7ff ffdd 	bl	80060c4 <xflow>
 800610a:	ec41 0b10 	vmov	d0, r0, r1
 800610e:	bd08      	pop	{r3, pc}

08006110 <fabs>:
 8006110:	ec51 0b10 	vmov	r0, r1, d0
 8006114:	ee10 2a10 	vmov	r2, s0
 8006118:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800611c:	ec43 2b10 	vmov	d0, r2, r3
 8006120:	4770      	bx	lr

08006122 <finite>:
 8006122:	b082      	sub	sp, #8
 8006124:	ed8d 0b00 	vstr	d0, [sp]
 8006128:	9801      	ldr	r0, [sp, #4]
 800612a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800612e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006132:	0fc0      	lsrs	r0, r0, #31
 8006134:	b002      	add	sp, #8
 8006136:	4770      	bx	lr

08006138 <scalbn>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	ec55 4b10 	vmov	r4, r5, d0
 800613e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006142:	4606      	mov	r6, r0
 8006144:	462b      	mov	r3, r5
 8006146:	b99a      	cbnz	r2, 8006170 <scalbn+0x38>
 8006148:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800614c:	4323      	orrs	r3, r4
 800614e:	d036      	beq.n	80061be <scalbn+0x86>
 8006150:	4b39      	ldr	r3, [pc, #228]	; (8006238 <scalbn+0x100>)
 8006152:	4629      	mov	r1, r5
 8006154:	ee10 0a10 	vmov	r0, s0
 8006158:	2200      	movs	r2, #0
 800615a:	f7fa fa4d 	bl	80005f8 <__aeabi_dmul>
 800615e:	4b37      	ldr	r3, [pc, #220]	; (800623c <scalbn+0x104>)
 8006160:	429e      	cmp	r6, r3
 8006162:	4604      	mov	r4, r0
 8006164:	460d      	mov	r5, r1
 8006166:	da10      	bge.n	800618a <scalbn+0x52>
 8006168:	a32b      	add	r3, pc, #172	; (adr r3, 8006218 <scalbn+0xe0>)
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	e03a      	b.n	80061e6 <scalbn+0xae>
 8006170:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006174:	428a      	cmp	r2, r1
 8006176:	d10c      	bne.n	8006192 <scalbn+0x5a>
 8006178:	ee10 2a10 	vmov	r2, s0
 800617c:	4620      	mov	r0, r4
 800617e:	4629      	mov	r1, r5
 8006180:	f7fa f884 	bl	800028c <__adddf3>
 8006184:	4604      	mov	r4, r0
 8006186:	460d      	mov	r5, r1
 8006188:	e019      	b.n	80061be <scalbn+0x86>
 800618a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800618e:	460b      	mov	r3, r1
 8006190:	3a36      	subs	r2, #54	; 0x36
 8006192:	4432      	add	r2, r6
 8006194:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006198:	428a      	cmp	r2, r1
 800619a:	dd08      	ble.n	80061ae <scalbn+0x76>
 800619c:	2d00      	cmp	r5, #0
 800619e:	a120      	add	r1, pc, #128	; (adr r1, 8006220 <scalbn+0xe8>)
 80061a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061a4:	da1c      	bge.n	80061e0 <scalbn+0xa8>
 80061a6:	a120      	add	r1, pc, #128	; (adr r1, 8006228 <scalbn+0xf0>)
 80061a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ac:	e018      	b.n	80061e0 <scalbn+0xa8>
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	dd08      	ble.n	80061c4 <scalbn+0x8c>
 80061b2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80061be:	ec45 4b10 	vmov	d0, r4, r5
 80061c2:	bd70      	pop	{r4, r5, r6, pc}
 80061c4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80061c8:	da19      	bge.n	80061fe <scalbn+0xc6>
 80061ca:	f24c 3350 	movw	r3, #50000	; 0xc350
 80061ce:	429e      	cmp	r6, r3
 80061d0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80061d4:	dd0a      	ble.n	80061ec <scalbn+0xb4>
 80061d6:	a112      	add	r1, pc, #72	; (adr r1, 8006220 <scalbn+0xe8>)
 80061d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d1e2      	bne.n	80061a6 <scalbn+0x6e>
 80061e0:	a30f      	add	r3, pc, #60	; (adr r3, 8006220 <scalbn+0xe8>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa fa07 	bl	80005f8 <__aeabi_dmul>
 80061ea:	e7cb      	b.n	8006184 <scalbn+0x4c>
 80061ec:	a10a      	add	r1, pc, #40	; (adr r1, 8006218 <scalbn+0xe0>)
 80061ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0b8      	beq.n	8006168 <scalbn+0x30>
 80061f6:	a10e      	add	r1, pc, #56	; (adr r1, 8006230 <scalbn+0xf8>)
 80061f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061fc:	e7b4      	b.n	8006168 <scalbn+0x30>
 80061fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006202:	3236      	adds	r2, #54	; 0x36
 8006204:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006208:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800620c:	4620      	mov	r0, r4
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <scalbn+0x108>)
 8006210:	2200      	movs	r2, #0
 8006212:	e7e8      	b.n	80061e6 <scalbn+0xae>
 8006214:	f3af 8000 	nop.w
 8006218:	c2f8f359 	.word	0xc2f8f359
 800621c:	01a56e1f 	.word	0x01a56e1f
 8006220:	8800759c 	.word	0x8800759c
 8006224:	7e37e43c 	.word	0x7e37e43c
 8006228:	8800759c 	.word	0x8800759c
 800622c:	fe37e43c 	.word	0xfe37e43c
 8006230:	c2f8f359 	.word	0xc2f8f359
 8006234:	81a56e1f 	.word	0x81a56e1f
 8006238:	43500000 	.word	0x43500000
 800623c:	ffff3cb0 	.word	0xffff3cb0
 8006240:	3c900000 	.word	0x3c900000

08006244 <_init>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr

08006250 <_fini>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	bf00      	nop
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr
